#version 330

//Passed from vertex shader
in vec3 oPosition_WorldSpace;
in vec3 oPosition_ObjectSpace;
in vec3 oPosition_EyeSpace;
in vec3 oNormal_InvWorldSpace;
in vec3 oNormal_ObjectScpace;
in vec2 oUVs;
in vec3 oCamera_WorldSpace;
in float oTime;


out vec4 FragColour;

//Uniform nodes translated as uniform variables.
uniform sampler2D       SCT_TEXTURE2D_0;
uniform vec4            SCT_UNIFORM_ColourIn_0;
uniform vec3            SCT_UNIFORM_FLOATIn_0;


const float TAU = 6.28318530718;
const float MAX_ITER = 5.0;

float softInterval(float a, float b, float c, float d, float x)
{
    return smoothstep(a, b, x) - smoothstep(c, d, x);
}

  


//SCT dummy values for output split nodes
vec2 dummyOutVEC2;
vec3 dummyOutVEC3;
vec4 dummyOutVEC4;


// SCT Nodes Translated as functions.
void Sampler2D(sampler2D Texture, vec2 Texcoord, inout vec4 FinalColour)
{
 FinalColour = texture2D(Texture,Texcoord); 
}

void Blyynn_Phong2(vec3 lightDir, vec3 normal, vec3 cameraPos, vec3 objectPos, vec4 Ambient, vec4 Diffuse, vec4 Specular, float SpecPow, inout vec4 FinalOut)
{
 
   vec3 nViewDirection = normalize(objectPos-cameraPos);
   float NdotL = max( dot(normalize(normal),normalize(lightDir)), 0.0);
   
   	
   vec3 reflection = ((2.0 * normal) * NdotL) - lightDir;
   vec3 nReflection = normalize(reflection);
   float beta = max(0.0, dot(-nReflection, nViewDirection));
   
   
   FinalOut = Ambient + Diffuse*NdotL + Specular * (pow(beta, SpecPow));
   
}



void main()
{

//SCT CALL: Sampler2D
   vec4  OUT_FinalColour0_NF_Sampler2D_0_5405;
   Sampler2D(SCT_TEXTURE2D_0, oUVs, OUT_FinalColour0_NF_Sampler2D_0_5405);

//SCT CALL: Blyynn_Phong2
   vec4  OUT_FinalOut0_NF_Blyynn_Phong2_1_5428;
   Blyynn_Phong2(SCT_UNIFORM_FLOATIn_0, oNormal_InvWorldSpace, oCamera_WorldSpace, oPosition_WorldSpace, vec4 (0.0,0.0,0.0,1.0), OUT_FinalColour0_NF_Sampler2D_0_5405, SCT_UNIFORM_ColourIn_0, 60.0, OUT_FinalOut0_NF_Blyynn_Phong2_1_5428);

FragColour = OUT_FinalOut0_NF_Blyynn_Phong2_1_5428;

}