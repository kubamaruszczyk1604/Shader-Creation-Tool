; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

	TITLE	C:\Users\Kuba\Desktop\glm\glm\detail\glm.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?length@?$tvec2@M$0A@@glm@@SAHXZ		; glm::tvec2<float,0>::length
PUBLIC	??A?$tvec2@M$0A@@glm@@QAEAAMH@Z			; glm::tvec2<float,0>::operator[]
PUBLIC	??A?$tvec2@M$0A@@glm@@QBEABMH@Z			; glm::tvec2<float,0>::operator[]
PUBLIC	??0?$tvec2@M$0A@@glm@@QAE@XZ			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QAE@M@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QAE@MM@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??E?$tvec2@M$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<float,0>::operator++
PUBLIC	??F?$tvec2@M$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<float,0>::operator--
PUBLIC	??E?$tvec2@M$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<float,0>::operator++
PUBLIC	??F?$tvec2@M$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<float,0>::operator--
PUBLIC	?length@?$tvec2@G$0A@@glm@@SAHXZ		; glm::tvec2<unsigned short,0>::length
PUBLIC	??A?$tvec2@G$0A@@glm@@QAEAAGH@Z			; glm::tvec2<unsigned short,0>::operator[]
PUBLIC	??A?$tvec2@G$0A@@glm@@QBEABGH@Z			; glm::tvec2<unsigned short,0>::operator[]
PUBLIC	??0?$tvec2@G$0A@@glm@@QAE@XZ			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
PUBLIC	??0?$tvec2@G$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
PUBLIC	??0?$tvec2@G$0A@@glm@@QAE@G@Z			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
PUBLIC	??0?$tvec2@G$0A@@glm@@QAE@GG@Z			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
PUBLIC	??E?$tvec2@G$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned short,0>::operator++
PUBLIC	??F?$tvec2@G$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned short,0>::operator--
PUBLIC	??E?$tvec2@G$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned short,0>::operator++
PUBLIC	??F?$tvec2@G$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned short,0>::operator--
PUBLIC	?length@?$tvec2@F$0A@@glm@@SAHXZ		; glm::tvec2<short,0>::length
PUBLIC	??A?$tvec2@F$0A@@glm@@QAEAAFH@Z			; glm::tvec2<short,0>::operator[]
PUBLIC	??A?$tvec2@F$0A@@glm@@QBEABFH@Z			; glm::tvec2<short,0>::operator[]
PUBLIC	??0?$tvec2@F$0A@@glm@@QAE@XZ			; glm::tvec2<short,0>::tvec2<short,0>
PUBLIC	??0?$tvec2@F$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<short,0>::tvec2<short,0>
PUBLIC	??0?$tvec2@F$0A@@glm@@QAE@F@Z			; glm::tvec2<short,0>::tvec2<short,0>
PUBLIC	??0?$tvec2@F$0A@@glm@@QAE@FF@Z			; glm::tvec2<short,0>::tvec2<short,0>
PUBLIC	??E?$tvec2@F$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<short,0>::operator++
PUBLIC	??F?$tvec2@F$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<short,0>::operator--
PUBLIC	??E?$tvec2@F$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<short,0>::operator++
PUBLIC	??F?$tvec2@F$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<short,0>::operator--
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QAEAAMH@Z			; glm::tvec4<float,0>::operator[]
PUBLIC	??A?$tvec4@M$0A@@glm@@QBEABMH@Z			; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QAE@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QAE@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QAE@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??E?$tvec4@M$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<float,0>::operator++
PUBLIC	??F?$tvec4@M$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<float,0>::operator--
PUBLIC	??E?$tvec4@M$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<float,0>::operator++
PUBLIC	??F?$tvec4@M$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<float,0>::operator--
PUBLIC	?length@?$tvec4@E$0A@@glm@@SAHXZ		; glm::tvec4<unsigned char,0>::length
PUBLIC	??A?$tvec4@E$0A@@glm@@QAEAAEH@Z			; glm::tvec4<unsigned char,0>::operator[]
PUBLIC	??A?$tvec4@E$0A@@glm@@QBEABEH@Z			; glm::tvec4<unsigned char,0>::operator[]
PUBLIC	??0?$tvec4@E$0A@@glm@@QAE@XZ			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
PUBLIC	??0?$tvec4@E$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
PUBLIC	??0?$tvec4@E$0A@@glm@@QAE@E@Z			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
PUBLIC	??0?$tvec4@E$0A@@glm@@QAE@EEEE@Z		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
PUBLIC	??E?$tvec4@E$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned char,0>::operator++
PUBLIC	??F?$tvec4@E$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned char,0>::operator--
PUBLIC	??E?$tvec4@E$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned char,0>::operator++
PUBLIC	??F?$tvec4@E$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned char,0>::operator--
PUBLIC	?length@?$tvec4@C$0A@@glm@@SAHXZ		; glm::tvec4<signed char,0>::length
PUBLIC	??A?$tvec4@C$0A@@glm@@QAEAACH@Z			; glm::tvec4<signed char,0>::operator[]
PUBLIC	??A?$tvec4@C$0A@@glm@@QBEABCH@Z			; glm::tvec4<signed char,0>::operator[]
PUBLIC	??0?$tvec4@C$0A@@glm@@QAE@XZ			; glm::tvec4<signed char,0>::tvec4<signed char,0>
PUBLIC	??0?$tvec4@C$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<signed char,0>::tvec4<signed char,0>
PUBLIC	??0?$tvec4@C$0A@@glm@@QAE@C@Z			; glm::tvec4<signed char,0>::tvec4<signed char,0>
PUBLIC	??0?$tvec4@C$0A@@glm@@QAE@CCCC@Z		; glm::tvec4<signed char,0>::tvec4<signed char,0>
PUBLIC	??E?$tvec4@C$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<signed char,0>::operator++
PUBLIC	??F?$tvec4@C$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<signed char,0>::operator--
PUBLIC	??E?$tvec4@C$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<signed char,0>::operator++
PUBLIC	??F?$tvec4@C$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<signed char,0>::operator--
PUBLIC	?length@?$tvec2@I$0A@@glm@@SAHXZ		; glm::tvec2<unsigned int,0>::length
PUBLIC	??A?$tvec2@I$0A@@glm@@QAEAAIH@Z			; glm::tvec2<unsigned int,0>::operator[]
PUBLIC	??A?$tvec2@I$0A@@glm@@QBEABIH@Z			; glm::tvec2<unsigned int,0>::operator[]
PUBLIC	??0?$tvec2@I$0A@@glm@@QAE@XZ			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0?$tvec2@I$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0?$tvec2@I$0A@@glm@@QAE@I@Z			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0?$tvec2@I$0A@@glm@@QAE@II@Z			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??E?$tvec2@I$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned int,0>::operator++
PUBLIC	??F?$tvec2@I$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned int,0>::operator--
PUBLIC	??E?$tvec2@I$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned int,0>::operator++
PUBLIC	??F?$tvec2@I$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned int,0>::operator--
PUBLIC	?length@?$tvec1@E$01@glm@@SAHXZ			; glm::tvec1<unsigned char,2>::length
PUBLIC	??A?$tvec1@E$01@glm@@QAEAAEH@Z			; glm::tvec1<unsigned char,2>::operator[]
PUBLIC	??A?$tvec1@E$01@glm@@QBEABEH@Z			; glm::tvec1<unsigned char,2>::operator[]
PUBLIC	??0?$tvec1@E$01@glm@@QAE@XZ			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
PUBLIC	??0?$tvec1@E$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
PUBLIC	??0?$tvec1@E$01@glm@@QAE@E@Z			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
PUBLIC	??E?$tvec1@E$01@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned char,2>::operator++
PUBLIC	??F?$tvec1@E$01@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned char,2>::operator--
PUBLIC	??E?$tvec1@E$01@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned char,2>::operator++
PUBLIC	??F?$tvec1@E$01@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned char,2>::operator--
PUBLIC	?length@?$tvec1@G$01@glm@@SAHXZ			; glm::tvec1<unsigned short,2>::length
PUBLIC	??A?$tvec1@G$01@glm@@QAEAAGH@Z			; glm::tvec1<unsigned short,2>::operator[]
PUBLIC	??A?$tvec1@G$01@glm@@QBEABGH@Z			; glm::tvec1<unsigned short,2>::operator[]
PUBLIC	??0?$tvec1@G$01@glm@@QAE@XZ			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
PUBLIC	??0?$tvec1@G$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
PUBLIC	??0?$tvec1@G$01@glm@@QAE@G@Z			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
PUBLIC	??E?$tvec1@G$01@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned short,2>::operator++
PUBLIC	??F?$tvec1@G$01@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned short,2>::operator--
PUBLIC	??E?$tvec1@G$01@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned short,2>::operator++
PUBLIC	??F?$tvec1@G$01@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned short,2>::operator--
PUBLIC	?length@?$tvec1@I$01@glm@@SAHXZ			; glm::tvec1<unsigned int,2>::length
PUBLIC	??A?$tvec1@I$01@glm@@QAEAAIH@Z			; glm::tvec1<unsigned int,2>::operator[]
PUBLIC	??A?$tvec1@I$01@glm@@QBEABIH@Z			; glm::tvec1<unsigned int,2>::operator[]
PUBLIC	??0?$tvec1@I$01@glm@@QAE@XZ			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
PUBLIC	??0?$tvec1@I$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
PUBLIC	??0?$tvec1@I$01@glm@@QAE@I@Z			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
PUBLIC	??E?$tvec1@I$01@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned int,2>::operator++
PUBLIC	??F?$tvec1@I$01@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned int,2>::operator--
PUBLIC	??E?$tvec1@I$01@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned int,2>::operator++
PUBLIC	??F?$tvec1@I$01@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned int,2>::operator--
PUBLIC	?length@?$tvec1@_K$01@glm@@SAHXZ		; glm::tvec1<unsigned __int64,2>::length
PUBLIC	??A?$tvec1@_K$01@glm@@QAEAA_KH@Z		; glm::tvec1<unsigned __int64,2>::operator[]
PUBLIC	??A?$tvec1@_K$01@glm@@QBEAB_KH@Z		; glm::tvec1<unsigned __int64,2>::operator[]
PUBLIC	??0?$tvec1@_K$01@glm@@QAE@XZ			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
PUBLIC	??0?$tvec1@_K$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
PUBLIC	??0?$tvec1@_K$01@glm@@QAE@_K@Z			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
PUBLIC	??E?$tvec1@_K$01@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec1@_K$01@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned __int64,2>::operator--
PUBLIC	??E?$tvec1@_K$01@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec1@_K$01@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned __int64,2>::operator--
PUBLIC	?length@?$tvec1@C$01@glm@@SAHXZ			; glm::tvec1<signed char,2>::length
PUBLIC	??A?$tvec1@C$01@glm@@QAEAACH@Z			; glm::tvec1<signed char,2>::operator[]
PUBLIC	??A?$tvec1@C$01@glm@@QBEABCH@Z			; glm::tvec1<signed char,2>::operator[]
PUBLIC	??0?$tvec1@C$01@glm@@QAE@XZ			; glm::tvec1<signed char,2>::tvec1<signed char,2>
PUBLIC	??0?$tvec1@C$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<signed char,2>::tvec1<signed char,2>
PUBLIC	??0?$tvec1@C$01@glm@@QAE@C@Z			; glm::tvec1<signed char,2>::tvec1<signed char,2>
PUBLIC	??E?$tvec1@C$01@glm@@QAEAAU01@XZ		; glm::tvec1<signed char,2>::operator++
PUBLIC	??F?$tvec1@C$01@glm@@QAEAAU01@XZ		; glm::tvec1<signed char,2>::operator--
PUBLIC	??E?$tvec1@C$01@glm@@QAE?AU01@H@Z		; glm::tvec1<signed char,2>::operator++
PUBLIC	??F?$tvec1@C$01@glm@@QAE?AU01@H@Z		; glm::tvec1<signed char,2>::operator--
PUBLIC	?length@?$tvec1@F$01@glm@@SAHXZ			; glm::tvec1<short,2>::length
PUBLIC	??A?$tvec1@F$01@glm@@QAEAAFH@Z			; glm::tvec1<short,2>::operator[]
PUBLIC	??A?$tvec1@F$01@glm@@QBEABFH@Z			; glm::tvec1<short,2>::operator[]
PUBLIC	??0?$tvec1@F$01@glm@@QAE@XZ			; glm::tvec1<short,2>::tvec1<short,2>
PUBLIC	??0?$tvec1@F$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<short,2>::tvec1<short,2>
PUBLIC	??0?$tvec1@F$01@glm@@QAE@F@Z			; glm::tvec1<short,2>::tvec1<short,2>
PUBLIC	??E?$tvec1@F$01@glm@@QAEAAU01@XZ		; glm::tvec1<short,2>::operator++
PUBLIC	??F?$tvec1@F$01@glm@@QAEAAU01@XZ		; glm::tvec1<short,2>::operator--
PUBLIC	??E?$tvec1@F$01@glm@@QAE?AU01@H@Z		; glm::tvec1<short,2>::operator++
PUBLIC	??F?$tvec1@F$01@glm@@QAE?AU01@H@Z		; glm::tvec1<short,2>::operator--
PUBLIC	?length@?$tvec1@H$01@glm@@SAHXZ			; glm::tvec1<int,2>::length
PUBLIC	??A?$tvec1@H$01@glm@@QAEAAHH@Z			; glm::tvec1<int,2>::operator[]
PUBLIC	??A?$tvec1@H$01@glm@@QBEABHH@Z			; glm::tvec1<int,2>::operator[]
PUBLIC	??0?$tvec1@H$01@glm@@QAE@XZ			; glm::tvec1<int,2>::tvec1<int,2>
PUBLIC	??0?$tvec1@H$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<int,2>::tvec1<int,2>
PUBLIC	??0?$tvec1@H$01@glm@@QAE@H@Z			; glm::tvec1<int,2>::tvec1<int,2>
PUBLIC	??E?$tvec1@H$01@glm@@QAEAAU01@XZ		; glm::tvec1<int,2>::operator++
PUBLIC	??F?$tvec1@H$01@glm@@QAEAAU01@XZ		; glm::tvec1<int,2>::operator--
PUBLIC	??E?$tvec1@H$01@glm@@QAE?AU01@H@Z		; glm::tvec1<int,2>::operator++
PUBLIC	??F?$tvec1@H$01@glm@@QAE?AU01@H@Z		; glm::tvec1<int,2>::operator--
PUBLIC	?length@?$tvec1@_J$01@glm@@SAHXZ		; glm::tvec1<__int64,2>::length
PUBLIC	??A?$tvec1@_J$01@glm@@QAEAA_JH@Z		; glm::tvec1<__int64,2>::operator[]
PUBLIC	??A?$tvec1@_J$01@glm@@QBEAB_JH@Z		; glm::tvec1<__int64,2>::operator[]
PUBLIC	??0?$tvec1@_J$01@glm@@QAE@XZ			; glm::tvec1<__int64,2>::tvec1<__int64,2>
PUBLIC	??0?$tvec1@_J$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<__int64,2>::tvec1<__int64,2>
PUBLIC	??0?$tvec1@_J$01@glm@@QAE@_J@Z			; glm::tvec1<__int64,2>::tvec1<__int64,2>
PUBLIC	??E?$tvec1@_J$01@glm@@QAEAAU01@XZ		; glm::tvec1<__int64,2>::operator++
PUBLIC	??F?$tvec1@_J$01@glm@@QAEAAU01@XZ		; glm::tvec1<__int64,2>::operator--
PUBLIC	??E?$tvec1@_J$01@glm@@QAE?AU01@H@Z		; glm::tvec1<__int64,2>::operator++
PUBLIC	??F?$tvec1@_J$01@glm@@QAE?AU01@H@Z		; glm::tvec1<__int64,2>::operator--
PUBLIC	?length@?$tvec1@M$01@glm@@SAHXZ			; glm::tvec1<float,2>::length
PUBLIC	??A?$tvec1@M$01@glm@@QAEAAMH@Z			; glm::tvec1<float,2>::operator[]
PUBLIC	??A?$tvec1@M$01@glm@@QBEABMH@Z			; glm::tvec1<float,2>::operator[]
PUBLIC	??0?$tvec1@M$01@glm@@QAE@XZ			; glm::tvec1<float,2>::tvec1<float,2>
PUBLIC	??0?$tvec1@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<float,2>::tvec1<float,2>
PUBLIC	??0?$tvec1@M$01@glm@@QAE@M@Z			; glm::tvec1<float,2>::tvec1<float,2>
PUBLIC	??E?$tvec1@M$01@glm@@QAEAAU01@XZ		; glm::tvec1<float,2>::operator++
PUBLIC	??F?$tvec1@M$01@glm@@QAEAAU01@XZ		; glm::tvec1<float,2>::operator--
PUBLIC	??E?$tvec1@M$01@glm@@QAE?AU01@H@Z		; glm::tvec1<float,2>::operator++
PUBLIC	??F?$tvec1@M$01@glm@@QAE?AU01@H@Z		; glm::tvec1<float,2>::operator--
PUBLIC	?length@?$tvec1@N$01@glm@@SAHXZ			; glm::tvec1<double,2>::length
PUBLIC	??A?$tvec1@N$01@glm@@QAEAANH@Z			; glm::tvec1<double,2>::operator[]
PUBLIC	??A?$tvec1@N$01@glm@@QBEABNH@Z			; glm::tvec1<double,2>::operator[]
PUBLIC	??0?$tvec1@N$01@glm@@QAE@XZ			; glm::tvec1<double,2>::tvec1<double,2>
PUBLIC	??0?$tvec1@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<double,2>::tvec1<double,2>
PUBLIC	??0?$tvec1@N$01@glm@@QAE@N@Z			; glm::tvec1<double,2>::tvec1<double,2>
PUBLIC	??E?$tvec1@N$01@glm@@QAEAAU01@XZ		; glm::tvec1<double,2>::operator++
PUBLIC	??F?$tvec1@N$01@glm@@QAEAAU01@XZ		; glm::tvec1<double,2>::operator--
PUBLIC	??E?$tvec1@N$01@glm@@QAE?AU01@H@Z		; glm::tvec1<double,2>::operator++
PUBLIC	??F?$tvec1@N$01@glm@@QAE?AU01@H@Z		; glm::tvec1<double,2>::operator--
PUBLIC	?length@?$tvec1@E$00@glm@@SAHXZ			; glm::tvec1<unsigned char,1>::length
PUBLIC	??A?$tvec1@E$00@glm@@QAEAAEH@Z			; glm::tvec1<unsigned char,1>::operator[]
PUBLIC	??A?$tvec1@E$00@glm@@QBEABEH@Z			; glm::tvec1<unsigned char,1>::operator[]
PUBLIC	??0?$tvec1@E$00@glm@@QAE@XZ			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
PUBLIC	??0?$tvec1@E$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
PUBLIC	??0?$tvec1@E$00@glm@@QAE@E@Z			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
PUBLIC	??E?$tvec1@E$00@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned char,1>::operator++
PUBLIC	??F?$tvec1@E$00@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned char,1>::operator--
PUBLIC	??E?$tvec1@E$00@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned char,1>::operator++
PUBLIC	??F?$tvec1@E$00@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned char,1>::operator--
PUBLIC	?length@?$tvec1@G$00@glm@@SAHXZ			; glm::tvec1<unsigned short,1>::length
PUBLIC	??A?$tvec1@G$00@glm@@QAEAAGH@Z			; glm::tvec1<unsigned short,1>::operator[]
PUBLIC	??A?$tvec1@G$00@glm@@QBEABGH@Z			; glm::tvec1<unsigned short,1>::operator[]
PUBLIC	??0?$tvec1@G$00@glm@@QAE@XZ			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
PUBLIC	??0?$tvec1@G$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
PUBLIC	??0?$tvec1@G$00@glm@@QAE@G@Z			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
PUBLIC	??E?$tvec1@G$00@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned short,1>::operator++
PUBLIC	??F?$tvec1@G$00@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned short,1>::operator--
PUBLIC	??E?$tvec1@G$00@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned short,1>::operator++
PUBLIC	??F?$tvec1@G$00@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned short,1>::operator--
PUBLIC	?length@?$tvec1@I$00@glm@@SAHXZ			; glm::tvec1<unsigned int,1>::length
PUBLIC	??A?$tvec1@I$00@glm@@QAEAAIH@Z			; glm::tvec1<unsigned int,1>::operator[]
PUBLIC	??A?$tvec1@I$00@glm@@QBEABIH@Z			; glm::tvec1<unsigned int,1>::operator[]
PUBLIC	??0?$tvec1@I$00@glm@@QAE@XZ			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
PUBLIC	??0?$tvec1@I$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
PUBLIC	??0?$tvec1@I$00@glm@@QAE@I@Z			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
PUBLIC	??E?$tvec1@I$00@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned int,1>::operator++
PUBLIC	??F?$tvec1@I$00@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned int,1>::operator--
PUBLIC	??E?$tvec1@I$00@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned int,1>::operator++
PUBLIC	??F?$tvec1@I$00@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned int,1>::operator--
PUBLIC	?length@?$tvec1@_K$00@glm@@SAHXZ		; glm::tvec1<unsigned __int64,1>::length
PUBLIC	??A?$tvec1@_K$00@glm@@QAEAA_KH@Z		; glm::tvec1<unsigned __int64,1>::operator[]
PUBLIC	??A?$tvec1@_K$00@glm@@QBEAB_KH@Z		; glm::tvec1<unsigned __int64,1>::operator[]
PUBLIC	??0?$tvec1@_K$00@glm@@QAE@XZ			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
PUBLIC	??0?$tvec1@_K$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
PUBLIC	??0?$tvec1@_K$00@glm@@QAE@_K@Z			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
PUBLIC	??E?$tvec1@_K$00@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec1@_K$00@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned __int64,1>::operator--
PUBLIC	??E?$tvec1@_K$00@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec1@_K$00@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned __int64,1>::operator--
PUBLIC	?length@?$tvec1@C$00@glm@@SAHXZ			; glm::tvec1<signed char,1>::length
PUBLIC	??A?$tvec1@C$00@glm@@QAEAACH@Z			; glm::tvec1<signed char,1>::operator[]
PUBLIC	??A?$tvec1@C$00@glm@@QBEABCH@Z			; glm::tvec1<signed char,1>::operator[]
PUBLIC	??0?$tvec1@C$00@glm@@QAE@XZ			; glm::tvec1<signed char,1>::tvec1<signed char,1>
PUBLIC	??0?$tvec1@C$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<signed char,1>::tvec1<signed char,1>
PUBLIC	??0?$tvec1@C$00@glm@@QAE@C@Z			; glm::tvec1<signed char,1>::tvec1<signed char,1>
PUBLIC	??E?$tvec1@C$00@glm@@QAEAAU01@XZ		; glm::tvec1<signed char,1>::operator++
PUBLIC	??F?$tvec1@C$00@glm@@QAEAAU01@XZ		; glm::tvec1<signed char,1>::operator--
PUBLIC	??E?$tvec1@C$00@glm@@QAE?AU01@H@Z		; glm::tvec1<signed char,1>::operator++
PUBLIC	??F?$tvec1@C$00@glm@@QAE?AU01@H@Z		; glm::tvec1<signed char,1>::operator--
PUBLIC	?length@?$tvec1@F$00@glm@@SAHXZ			; glm::tvec1<short,1>::length
PUBLIC	??A?$tvec1@F$00@glm@@QAEAAFH@Z			; glm::tvec1<short,1>::operator[]
PUBLIC	??A?$tvec1@F$00@glm@@QBEABFH@Z			; glm::tvec1<short,1>::operator[]
PUBLIC	??0?$tvec1@F$00@glm@@QAE@XZ			; glm::tvec1<short,1>::tvec1<short,1>
PUBLIC	??0?$tvec1@F$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<short,1>::tvec1<short,1>
PUBLIC	??0?$tvec1@F$00@glm@@QAE@F@Z			; glm::tvec1<short,1>::tvec1<short,1>
PUBLIC	??E?$tvec1@F$00@glm@@QAEAAU01@XZ		; glm::tvec1<short,1>::operator++
PUBLIC	??F?$tvec1@F$00@glm@@QAEAAU01@XZ		; glm::tvec1<short,1>::operator--
PUBLIC	??E?$tvec1@F$00@glm@@QAE?AU01@H@Z		; glm::tvec1<short,1>::operator++
PUBLIC	??F?$tvec1@F$00@glm@@QAE?AU01@H@Z		; glm::tvec1<short,1>::operator--
PUBLIC	?length@?$tvec1@H$00@glm@@SAHXZ			; glm::tvec1<int,1>::length
PUBLIC	??A?$tvec1@H$00@glm@@QAEAAHH@Z			; glm::tvec1<int,1>::operator[]
PUBLIC	??A?$tvec1@H$00@glm@@QBEABHH@Z			; glm::tvec1<int,1>::operator[]
PUBLIC	??0?$tvec1@H$00@glm@@QAE@XZ			; glm::tvec1<int,1>::tvec1<int,1>
PUBLIC	??0?$tvec1@H$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<int,1>::tvec1<int,1>
PUBLIC	??0?$tvec1@H$00@glm@@QAE@H@Z			; glm::tvec1<int,1>::tvec1<int,1>
PUBLIC	??E?$tvec1@H$00@glm@@QAEAAU01@XZ		; glm::tvec1<int,1>::operator++
PUBLIC	??F?$tvec1@H$00@glm@@QAEAAU01@XZ		; glm::tvec1<int,1>::operator--
PUBLIC	??E?$tvec1@H$00@glm@@QAE?AU01@H@Z		; glm::tvec1<int,1>::operator++
PUBLIC	??F?$tvec1@H$00@glm@@QAE?AU01@H@Z		; glm::tvec1<int,1>::operator--
PUBLIC	?length@?$tvec1@_J$00@glm@@SAHXZ		; glm::tvec1<__int64,1>::length
PUBLIC	??A?$tvec1@_J$00@glm@@QAEAA_JH@Z		; glm::tvec1<__int64,1>::operator[]
PUBLIC	??A?$tvec1@_J$00@glm@@QBEAB_JH@Z		; glm::tvec1<__int64,1>::operator[]
PUBLIC	??0?$tvec1@_J$00@glm@@QAE@XZ			; glm::tvec1<__int64,1>::tvec1<__int64,1>
PUBLIC	??0?$tvec1@_J$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<__int64,1>::tvec1<__int64,1>
PUBLIC	??0?$tvec1@_J$00@glm@@QAE@_J@Z			; glm::tvec1<__int64,1>::tvec1<__int64,1>
PUBLIC	??E?$tvec1@_J$00@glm@@QAEAAU01@XZ		; glm::tvec1<__int64,1>::operator++
PUBLIC	??F?$tvec1@_J$00@glm@@QAEAAU01@XZ		; glm::tvec1<__int64,1>::operator--
PUBLIC	??E?$tvec1@_J$00@glm@@QAE?AU01@H@Z		; glm::tvec1<__int64,1>::operator++
PUBLIC	??F?$tvec1@_J$00@glm@@QAE?AU01@H@Z		; glm::tvec1<__int64,1>::operator--
PUBLIC	?length@?$tvec1@M$00@glm@@SAHXZ			; glm::tvec1<float,1>::length
PUBLIC	??A?$tvec1@M$00@glm@@QAEAAMH@Z			; glm::tvec1<float,1>::operator[]
PUBLIC	??A?$tvec1@M$00@glm@@QBEABMH@Z			; glm::tvec1<float,1>::operator[]
PUBLIC	??0?$tvec1@M$00@glm@@QAE@XZ			; glm::tvec1<float,1>::tvec1<float,1>
PUBLIC	??0?$tvec1@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<float,1>::tvec1<float,1>
PUBLIC	??0?$tvec1@M$00@glm@@QAE@M@Z			; glm::tvec1<float,1>::tvec1<float,1>
PUBLIC	??E?$tvec1@M$00@glm@@QAEAAU01@XZ		; glm::tvec1<float,1>::operator++
PUBLIC	??F?$tvec1@M$00@glm@@QAEAAU01@XZ		; glm::tvec1<float,1>::operator--
PUBLIC	??E?$tvec1@M$00@glm@@QAE?AU01@H@Z		; glm::tvec1<float,1>::operator++
PUBLIC	??F?$tvec1@M$00@glm@@QAE?AU01@H@Z		; glm::tvec1<float,1>::operator--
PUBLIC	?length@?$tvec1@N$00@glm@@SAHXZ			; glm::tvec1<double,1>::length
PUBLIC	??A?$tvec1@N$00@glm@@QAEAANH@Z			; glm::tvec1<double,1>::operator[]
PUBLIC	??A?$tvec1@N$00@glm@@QBEABNH@Z			; glm::tvec1<double,1>::operator[]
PUBLIC	??0?$tvec1@N$00@glm@@QAE@XZ			; glm::tvec1<double,1>::tvec1<double,1>
PUBLIC	??0?$tvec1@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<double,1>::tvec1<double,1>
PUBLIC	??0?$tvec1@N$00@glm@@QAE@N@Z			; glm::tvec1<double,1>::tvec1<double,1>
PUBLIC	??E?$tvec1@N$00@glm@@QAEAAU01@XZ		; glm::tvec1<double,1>::operator++
PUBLIC	??F?$tvec1@N$00@glm@@QAEAAU01@XZ		; glm::tvec1<double,1>::operator--
PUBLIC	??E?$tvec1@N$00@glm@@QAE?AU01@H@Z		; glm::tvec1<double,1>::operator++
PUBLIC	??F?$tvec1@N$00@glm@@QAE?AU01@H@Z		; glm::tvec1<double,1>::operator--
PUBLIC	?length@?$tvec1@E$0A@@glm@@SAHXZ		; glm::tvec1<unsigned char,0>::length
PUBLIC	??A?$tvec1@E$0A@@glm@@QAEAAEH@Z			; glm::tvec1<unsigned char,0>::operator[]
PUBLIC	??A?$tvec1@E$0A@@glm@@QBEABEH@Z			; glm::tvec1<unsigned char,0>::operator[]
PUBLIC	??0?$tvec1@E$0A@@glm@@QAE@XZ			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
PUBLIC	??0?$tvec1@E$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
PUBLIC	??0?$tvec1@E$0A@@glm@@QAE@E@Z			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
PUBLIC	??E?$tvec1@E$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned char,0>::operator++
PUBLIC	??F?$tvec1@E$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned char,0>::operator--
PUBLIC	??E?$tvec1@E$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned char,0>::operator++
PUBLIC	??F?$tvec1@E$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned char,0>::operator--
PUBLIC	?length@?$tvec1@G$0A@@glm@@SAHXZ		; glm::tvec1<unsigned short,0>::length
PUBLIC	??A?$tvec1@G$0A@@glm@@QAEAAGH@Z			; glm::tvec1<unsigned short,0>::operator[]
PUBLIC	??A?$tvec1@G$0A@@glm@@QBEABGH@Z			; glm::tvec1<unsigned short,0>::operator[]
PUBLIC	??0?$tvec1@G$0A@@glm@@QAE@XZ			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
PUBLIC	??0?$tvec1@G$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
PUBLIC	??0?$tvec1@G$0A@@glm@@QAE@G@Z			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
PUBLIC	??E?$tvec1@G$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned short,0>::operator++
PUBLIC	??F?$tvec1@G$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned short,0>::operator--
PUBLIC	??E?$tvec1@G$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned short,0>::operator++
PUBLIC	??F?$tvec1@G$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned short,0>::operator--
PUBLIC	?length@?$tvec1@I$0A@@glm@@SAHXZ		; glm::tvec1<unsigned int,0>::length
PUBLIC	??A?$tvec1@I$0A@@glm@@QAEAAIH@Z			; glm::tvec1<unsigned int,0>::operator[]
PUBLIC	??A?$tvec1@I$0A@@glm@@QBEABIH@Z			; glm::tvec1<unsigned int,0>::operator[]
PUBLIC	??0?$tvec1@I$0A@@glm@@QAE@XZ			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
PUBLIC	??0?$tvec1@I$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
PUBLIC	??0?$tvec1@I$0A@@glm@@QAE@I@Z			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
PUBLIC	??E?$tvec1@I$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned int,0>::operator++
PUBLIC	??F?$tvec1@I$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned int,0>::operator--
PUBLIC	??E?$tvec1@I$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned int,0>::operator++
PUBLIC	??F?$tvec1@I$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned int,0>::operator--
PUBLIC	?length@?$tvec1@_K$0A@@glm@@SAHXZ		; glm::tvec1<unsigned __int64,0>::length
PUBLIC	??A?$tvec1@_K$0A@@glm@@QAEAA_KH@Z		; glm::tvec1<unsigned __int64,0>::operator[]
PUBLIC	??A?$tvec1@_K$0A@@glm@@QBEAB_KH@Z		; glm::tvec1<unsigned __int64,0>::operator[]
PUBLIC	??0?$tvec1@_K$0A@@glm@@QAE@XZ			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
PUBLIC	??0?$tvec1@_K$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
PUBLIC	??0?$tvec1@_K$0A@@glm@@QAE@_K@Z			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
PUBLIC	??E?$tvec1@_K$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec1@_K$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<unsigned __int64,0>::operator--
PUBLIC	??E?$tvec1@_K$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec1@_K$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<unsigned __int64,0>::operator--
PUBLIC	?length@?$tvec1@C$0A@@glm@@SAHXZ		; glm::tvec1<signed char,0>::length
PUBLIC	??A?$tvec1@C$0A@@glm@@QAEAACH@Z			; glm::tvec1<signed char,0>::operator[]
PUBLIC	??A?$tvec1@C$0A@@glm@@QBEABCH@Z			; glm::tvec1<signed char,0>::operator[]
PUBLIC	??0?$tvec1@C$0A@@glm@@QAE@XZ			; glm::tvec1<signed char,0>::tvec1<signed char,0>
PUBLIC	??0?$tvec1@C$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<signed char,0>::tvec1<signed char,0>
PUBLIC	??0?$tvec1@C$0A@@glm@@QAE@C@Z			; glm::tvec1<signed char,0>::tvec1<signed char,0>
PUBLIC	??E?$tvec1@C$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<signed char,0>::operator++
PUBLIC	??F?$tvec1@C$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<signed char,0>::operator--
PUBLIC	??E?$tvec1@C$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<signed char,0>::operator++
PUBLIC	??F?$tvec1@C$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<signed char,0>::operator--
PUBLIC	?length@?$tvec1@F$0A@@glm@@SAHXZ		; glm::tvec1<short,0>::length
PUBLIC	??A?$tvec1@F$0A@@glm@@QAEAAFH@Z			; glm::tvec1<short,0>::operator[]
PUBLIC	??A?$tvec1@F$0A@@glm@@QBEABFH@Z			; glm::tvec1<short,0>::operator[]
PUBLIC	??0?$tvec1@F$0A@@glm@@QAE@XZ			; glm::tvec1<short,0>::tvec1<short,0>
PUBLIC	??0?$tvec1@F$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<short,0>::tvec1<short,0>
PUBLIC	??0?$tvec1@F$0A@@glm@@QAE@F@Z			; glm::tvec1<short,0>::tvec1<short,0>
PUBLIC	??E?$tvec1@F$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<short,0>::operator++
PUBLIC	??F?$tvec1@F$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<short,0>::operator--
PUBLIC	??E?$tvec1@F$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<short,0>::operator++
PUBLIC	??F?$tvec1@F$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<short,0>::operator--
PUBLIC	?length@?$tvec1@H$0A@@glm@@SAHXZ		; glm::tvec1<int,0>::length
PUBLIC	??A?$tvec1@H$0A@@glm@@QAEAAHH@Z			; glm::tvec1<int,0>::operator[]
PUBLIC	??A?$tvec1@H$0A@@glm@@QBEABHH@Z			; glm::tvec1<int,0>::operator[]
PUBLIC	??0?$tvec1@H$0A@@glm@@QAE@XZ			; glm::tvec1<int,0>::tvec1<int,0>
PUBLIC	??0?$tvec1@H$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<int,0>::tvec1<int,0>
PUBLIC	??0?$tvec1@H$0A@@glm@@QAE@H@Z			; glm::tvec1<int,0>::tvec1<int,0>
PUBLIC	??E?$tvec1@H$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<int,0>::operator++
PUBLIC	??F?$tvec1@H$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<int,0>::operator--
PUBLIC	??E?$tvec1@H$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<int,0>::operator++
PUBLIC	??F?$tvec1@H$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<int,0>::operator--
PUBLIC	?length@?$tvec1@_J$0A@@glm@@SAHXZ		; glm::tvec1<__int64,0>::length
PUBLIC	??A?$tvec1@_J$0A@@glm@@QAEAA_JH@Z		; glm::tvec1<__int64,0>::operator[]
PUBLIC	??A?$tvec1@_J$0A@@glm@@QBEAB_JH@Z		; glm::tvec1<__int64,0>::operator[]
PUBLIC	??0?$tvec1@_J$0A@@glm@@QAE@XZ			; glm::tvec1<__int64,0>::tvec1<__int64,0>
PUBLIC	??0?$tvec1@_J$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<__int64,0>::tvec1<__int64,0>
PUBLIC	??0?$tvec1@_J$0A@@glm@@QAE@_J@Z			; glm::tvec1<__int64,0>::tvec1<__int64,0>
PUBLIC	??E?$tvec1@_J$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<__int64,0>::operator++
PUBLIC	??F?$tvec1@_J$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<__int64,0>::operator--
PUBLIC	??E?$tvec1@_J$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<__int64,0>::operator++
PUBLIC	??F?$tvec1@_J$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<__int64,0>::operator--
PUBLIC	?length@?$tvec1@M$0A@@glm@@SAHXZ		; glm::tvec1<float,0>::length
PUBLIC	??A?$tvec1@M$0A@@glm@@QAEAAMH@Z			; glm::tvec1<float,0>::operator[]
PUBLIC	??A?$tvec1@M$0A@@glm@@QBEABMH@Z			; glm::tvec1<float,0>::operator[]
PUBLIC	??0?$tvec1@M$0A@@glm@@QAE@XZ			; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??0?$tvec1@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??0?$tvec1@M$0A@@glm@@QAE@M@Z			; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??E?$tvec1@M$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<float,0>::operator++
PUBLIC	??F?$tvec1@M$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<float,0>::operator--
PUBLIC	??E?$tvec1@M$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<float,0>::operator++
PUBLIC	??F?$tvec1@M$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<float,0>::operator--
PUBLIC	?length@?$tvec1@N$0A@@glm@@SAHXZ		; glm::tvec1<double,0>::length
PUBLIC	??A?$tvec1@N$0A@@glm@@QAEAANH@Z			; glm::tvec1<double,0>::operator[]
PUBLIC	??A?$tvec1@N$0A@@glm@@QBEABNH@Z			; glm::tvec1<double,0>::operator[]
PUBLIC	??0?$tvec1@N$0A@@glm@@QAE@XZ			; glm::tvec1<double,0>::tvec1<double,0>
PUBLIC	??0?$tvec1@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec1<double,0>::tvec1<double,0>
PUBLIC	??0?$tvec1@N$0A@@glm@@QAE@N@Z			; glm::tvec1<double,0>::tvec1<double,0>
PUBLIC	??E?$tvec1@N$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<double,0>::operator++
PUBLIC	??F?$tvec1@N$0A@@glm@@QAEAAU01@XZ		; glm::tvec1<double,0>::operator--
PUBLIC	??E?$tvec1@N$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<double,0>::operator++
PUBLIC	??F?$tvec1@N$0A@@glm@@QAE?AU01@H@Z		; glm::tvec1<double,0>::operator--
PUBLIC	?length@?$tvec2@E$01@glm@@SAHXZ			; glm::tvec2<unsigned char,2>::length
PUBLIC	??A?$tvec2@E$01@glm@@QAEAAEH@Z			; glm::tvec2<unsigned char,2>::operator[]
PUBLIC	??A?$tvec2@E$01@glm@@QBEABEH@Z			; glm::tvec2<unsigned char,2>::operator[]
PUBLIC	??0?$tvec2@E$01@glm@@QAE@XZ			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
PUBLIC	??0?$tvec2@E$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
PUBLIC	??0?$tvec2@E$01@glm@@QAE@E@Z			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
PUBLIC	??0?$tvec2@E$01@glm@@QAE@EE@Z			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
PUBLIC	??E?$tvec2@E$01@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned char,2>::operator++
PUBLIC	??F?$tvec2@E$01@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned char,2>::operator--
PUBLIC	??E?$tvec2@E$01@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned char,2>::operator++
PUBLIC	??F?$tvec2@E$01@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned char,2>::operator--
PUBLIC	?length@?$tvec2@G$01@glm@@SAHXZ			; glm::tvec2<unsigned short,2>::length
PUBLIC	??A?$tvec2@G$01@glm@@QAEAAGH@Z			; glm::tvec2<unsigned short,2>::operator[]
PUBLIC	??A?$tvec2@G$01@glm@@QBEABGH@Z			; glm::tvec2<unsigned short,2>::operator[]
PUBLIC	??0?$tvec2@G$01@glm@@QAE@XZ			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
PUBLIC	??0?$tvec2@G$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
PUBLIC	??0?$tvec2@G$01@glm@@QAE@G@Z			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
PUBLIC	??0?$tvec2@G$01@glm@@QAE@GG@Z			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
PUBLIC	??E?$tvec2@G$01@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned short,2>::operator++
PUBLIC	??F?$tvec2@G$01@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned short,2>::operator--
PUBLIC	??E?$tvec2@G$01@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned short,2>::operator++
PUBLIC	??F?$tvec2@G$01@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned short,2>::operator--
PUBLIC	?length@?$tvec2@I$01@glm@@SAHXZ			; glm::tvec2<unsigned int,2>::length
PUBLIC	??A?$tvec2@I$01@glm@@QAEAAIH@Z			; glm::tvec2<unsigned int,2>::operator[]
PUBLIC	??A?$tvec2@I$01@glm@@QBEABIH@Z			; glm::tvec2<unsigned int,2>::operator[]
PUBLIC	??0?$tvec2@I$01@glm@@QAE@XZ			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
PUBLIC	??0?$tvec2@I$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
PUBLIC	??0?$tvec2@I$01@glm@@QAE@I@Z			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
PUBLIC	??0?$tvec2@I$01@glm@@QAE@II@Z			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
PUBLIC	??E?$tvec2@I$01@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned int,2>::operator++
PUBLIC	??F?$tvec2@I$01@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned int,2>::operator--
PUBLIC	??E?$tvec2@I$01@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned int,2>::operator++
PUBLIC	??F?$tvec2@I$01@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned int,2>::operator--
PUBLIC	?length@?$tvec2@_K$01@glm@@SAHXZ		; glm::tvec2<unsigned __int64,2>::length
PUBLIC	??A?$tvec2@_K$01@glm@@QAEAA_KH@Z		; glm::tvec2<unsigned __int64,2>::operator[]
PUBLIC	??A?$tvec2@_K$01@glm@@QBEAB_KH@Z		; glm::tvec2<unsigned __int64,2>::operator[]
PUBLIC	??0?$tvec2@_K$01@glm@@QAE@XZ			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
PUBLIC	??0?$tvec2@_K$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
PUBLIC	??0?$tvec2@_K$01@glm@@QAE@_K@Z			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
PUBLIC	??0?$tvec2@_K$01@glm@@QAE@_K0@Z			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
PUBLIC	??E?$tvec2@_K$01@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec2@_K$01@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned __int64,2>::operator--
PUBLIC	??E?$tvec2@_K$01@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec2@_K$01@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned __int64,2>::operator--
PUBLIC	?length@?$tvec2@C$01@glm@@SAHXZ			; glm::tvec2<signed char,2>::length
PUBLIC	??A?$tvec2@C$01@glm@@QAEAACH@Z			; glm::tvec2<signed char,2>::operator[]
PUBLIC	??A?$tvec2@C$01@glm@@QBEABCH@Z			; glm::tvec2<signed char,2>::operator[]
PUBLIC	??0?$tvec2@C$01@glm@@QAE@XZ			; glm::tvec2<signed char,2>::tvec2<signed char,2>
PUBLIC	??0?$tvec2@C$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<signed char,2>::tvec2<signed char,2>
PUBLIC	??0?$tvec2@C$01@glm@@QAE@C@Z			; glm::tvec2<signed char,2>::tvec2<signed char,2>
PUBLIC	??0?$tvec2@C$01@glm@@QAE@CC@Z			; glm::tvec2<signed char,2>::tvec2<signed char,2>
PUBLIC	??E?$tvec2@C$01@glm@@QAEAAU01@XZ		; glm::tvec2<signed char,2>::operator++
PUBLIC	??F?$tvec2@C$01@glm@@QAEAAU01@XZ		; glm::tvec2<signed char,2>::operator--
PUBLIC	??E?$tvec2@C$01@glm@@QAE?AU01@H@Z		; glm::tvec2<signed char,2>::operator++
PUBLIC	??F?$tvec2@C$01@glm@@QAE?AU01@H@Z		; glm::tvec2<signed char,2>::operator--
PUBLIC	?length@?$tvec2@F$01@glm@@SAHXZ			; glm::tvec2<short,2>::length
PUBLIC	??A?$tvec2@F$01@glm@@QAEAAFH@Z			; glm::tvec2<short,2>::operator[]
PUBLIC	??A?$tvec2@F$01@glm@@QBEABFH@Z			; glm::tvec2<short,2>::operator[]
PUBLIC	??0?$tvec2@F$01@glm@@QAE@XZ			; glm::tvec2<short,2>::tvec2<short,2>
PUBLIC	??0?$tvec2@F$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<short,2>::tvec2<short,2>
PUBLIC	??0?$tvec2@F$01@glm@@QAE@F@Z			; glm::tvec2<short,2>::tvec2<short,2>
PUBLIC	??0?$tvec2@F$01@glm@@QAE@FF@Z			; glm::tvec2<short,2>::tvec2<short,2>
PUBLIC	??E?$tvec2@F$01@glm@@QAEAAU01@XZ		; glm::tvec2<short,2>::operator++
PUBLIC	??F?$tvec2@F$01@glm@@QAEAAU01@XZ		; glm::tvec2<short,2>::operator--
PUBLIC	??E?$tvec2@F$01@glm@@QAE?AU01@H@Z		; glm::tvec2<short,2>::operator++
PUBLIC	??F?$tvec2@F$01@glm@@QAE?AU01@H@Z		; glm::tvec2<short,2>::operator--
PUBLIC	?length@?$tvec2@H$01@glm@@SAHXZ			; glm::tvec2<int,2>::length
PUBLIC	??A?$tvec2@H$01@glm@@QAEAAHH@Z			; glm::tvec2<int,2>::operator[]
PUBLIC	??A?$tvec2@H$01@glm@@QBEABHH@Z			; glm::tvec2<int,2>::operator[]
PUBLIC	??0?$tvec2@H$01@glm@@QAE@XZ			; glm::tvec2<int,2>::tvec2<int,2>
PUBLIC	??0?$tvec2@H$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<int,2>::tvec2<int,2>
PUBLIC	??0?$tvec2@H$01@glm@@QAE@H@Z			; glm::tvec2<int,2>::tvec2<int,2>
PUBLIC	??0?$tvec2@H$01@glm@@QAE@HH@Z			; glm::tvec2<int,2>::tvec2<int,2>
PUBLIC	??E?$tvec2@H$01@glm@@QAEAAU01@XZ		; glm::tvec2<int,2>::operator++
PUBLIC	??F?$tvec2@H$01@glm@@QAEAAU01@XZ		; glm::tvec2<int,2>::operator--
PUBLIC	??E?$tvec2@H$01@glm@@QAE?AU01@H@Z		; glm::tvec2<int,2>::operator++
PUBLIC	??F?$tvec2@H$01@glm@@QAE?AU01@H@Z		; glm::tvec2<int,2>::operator--
PUBLIC	?length@?$tvec2@_J$01@glm@@SAHXZ		; glm::tvec2<__int64,2>::length
PUBLIC	??A?$tvec2@_J$01@glm@@QAEAA_JH@Z		; glm::tvec2<__int64,2>::operator[]
PUBLIC	??A?$tvec2@_J$01@glm@@QBEAB_JH@Z		; glm::tvec2<__int64,2>::operator[]
PUBLIC	??0?$tvec2@_J$01@glm@@QAE@XZ			; glm::tvec2<__int64,2>::tvec2<__int64,2>
PUBLIC	??0?$tvec2@_J$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<__int64,2>::tvec2<__int64,2>
PUBLIC	??0?$tvec2@_J$01@glm@@QAE@_J@Z			; glm::tvec2<__int64,2>::tvec2<__int64,2>
PUBLIC	??0?$tvec2@_J$01@glm@@QAE@_J0@Z			; glm::tvec2<__int64,2>::tvec2<__int64,2>
PUBLIC	??E?$tvec2@_J$01@glm@@QAEAAU01@XZ		; glm::tvec2<__int64,2>::operator++
PUBLIC	??F?$tvec2@_J$01@glm@@QAEAAU01@XZ		; glm::tvec2<__int64,2>::operator--
PUBLIC	??E?$tvec2@_J$01@glm@@QAE?AU01@H@Z		; glm::tvec2<__int64,2>::operator++
PUBLIC	??F?$tvec2@_J$01@glm@@QAE?AU01@H@Z		; glm::tvec2<__int64,2>::operator--
PUBLIC	?length@?$tvec2@M$01@glm@@SAHXZ			; glm::tvec2<float,2>::length
PUBLIC	??A?$tvec2@M$01@glm@@QAEAAMH@Z			; glm::tvec2<float,2>::operator[]
PUBLIC	??A?$tvec2@M$01@glm@@QBEABMH@Z			; glm::tvec2<float,2>::operator[]
PUBLIC	??0?$tvec2@M$01@glm@@QAE@XZ			; glm::tvec2<float,2>::tvec2<float,2>
PUBLIC	??0?$tvec2@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<float,2>::tvec2<float,2>
PUBLIC	??0?$tvec2@M$01@glm@@QAE@M@Z			; glm::tvec2<float,2>::tvec2<float,2>
PUBLIC	??0?$tvec2@M$01@glm@@QAE@MM@Z			; glm::tvec2<float,2>::tvec2<float,2>
PUBLIC	??E?$tvec2@M$01@glm@@QAEAAU01@XZ		; glm::tvec2<float,2>::operator++
PUBLIC	??F?$tvec2@M$01@glm@@QAEAAU01@XZ		; glm::tvec2<float,2>::operator--
PUBLIC	??E?$tvec2@M$01@glm@@QAE?AU01@H@Z		; glm::tvec2<float,2>::operator++
PUBLIC	??F?$tvec2@M$01@glm@@QAE?AU01@H@Z		; glm::tvec2<float,2>::operator--
PUBLIC	?length@?$tvec2@N$01@glm@@SAHXZ			; glm::tvec2<double,2>::length
PUBLIC	??A?$tvec2@N$01@glm@@QAEAANH@Z			; glm::tvec2<double,2>::operator[]
PUBLIC	??A?$tvec2@N$01@glm@@QBEABNH@Z			; glm::tvec2<double,2>::operator[]
PUBLIC	??0?$tvec2@N$01@glm@@QAE@XZ			; glm::tvec2<double,2>::tvec2<double,2>
PUBLIC	??0?$tvec2@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<double,2>::tvec2<double,2>
PUBLIC	??0?$tvec2@N$01@glm@@QAE@N@Z			; glm::tvec2<double,2>::tvec2<double,2>
PUBLIC	??0?$tvec2@N$01@glm@@QAE@NN@Z			; glm::tvec2<double,2>::tvec2<double,2>
PUBLIC	??E?$tvec2@N$01@glm@@QAEAAU01@XZ		; glm::tvec2<double,2>::operator++
PUBLIC	??F?$tvec2@N$01@glm@@QAEAAU01@XZ		; glm::tvec2<double,2>::operator--
PUBLIC	??E?$tvec2@N$01@glm@@QAE?AU01@H@Z		; glm::tvec2<double,2>::operator++
PUBLIC	??F?$tvec2@N$01@glm@@QAE?AU01@H@Z		; glm::tvec2<double,2>::operator--
PUBLIC	?length@?$tvec2@E$00@glm@@SAHXZ			; glm::tvec2<unsigned char,1>::length
PUBLIC	??A?$tvec2@E$00@glm@@QAEAAEH@Z			; glm::tvec2<unsigned char,1>::operator[]
PUBLIC	??A?$tvec2@E$00@glm@@QBEABEH@Z			; glm::tvec2<unsigned char,1>::operator[]
PUBLIC	??0?$tvec2@E$00@glm@@QAE@XZ			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
PUBLIC	??0?$tvec2@E$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
PUBLIC	??0?$tvec2@E$00@glm@@QAE@E@Z			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
PUBLIC	??0?$tvec2@E$00@glm@@QAE@EE@Z			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
PUBLIC	??E?$tvec2@E$00@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned char,1>::operator++
PUBLIC	??F?$tvec2@E$00@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned char,1>::operator--
PUBLIC	??E?$tvec2@E$00@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned char,1>::operator++
PUBLIC	??F?$tvec2@E$00@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned char,1>::operator--
PUBLIC	?length@?$tvec2@G$00@glm@@SAHXZ			; glm::tvec2<unsigned short,1>::length
PUBLIC	??A?$tvec2@G$00@glm@@QAEAAGH@Z			; glm::tvec2<unsigned short,1>::operator[]
PUBLIC	??A?$tvec2@G$00@glm@@QBEABGH@Z			; glm::tvec2<unsigned short,1>::operator[]
PUBLIC	??0?$tvec2@G$00@glm@@QAE@XZ			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
PUBLIC	??0?$tvec2@G$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
PUBLIC	??0?$tvec2@G$00@glm@@QAE@G@Z			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
PUBLIC	??0?$tvec2@G$00@glm@@QAE@GG@Z			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
PUBLIC	??E?$tvec2@G$00@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned short,1>::operator++
PUBLIC	??F?$tvec2@G$00@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned short,1>::operator--
PUBLIC	??E?$tvec2@G$00@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned short,1>::operator++
PUBLIC	??F?$tvec2@G$00@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned short,1>::operator--
PUBLIC	?length@?$tvec2@I$00@glm@@SAHXZ			; glm::tvec2<unsigned int,1>::length
PUBLIC	??A?$tvec2@I$00@glm@@QAEAAIH@Z			; glm::tvec2<unsigned int,1>::operator[]
PUBLIC	??A?$tvec2@I$00@glm@@QBEABIH@Z			; glm::tvec2<unsigned int,1>::operator[]
PUBLIC	??0?$tvec2@I$00@glm@@QAE@XZ			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
PUBLIC	??0?$tvec2@I$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
PUBLIC	??0?$tvec2@I$00@glm@@QAE@I@Z			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
PUBLIC	??0?$tvec2@I$00@glm@@QAE@II@Z			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
PUBLIC	??E?$tvec2@I$00@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned int,1>::operator++
PUBLIC	??F?$tvec2@I$00@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned int,1>::operator--
PUBLIC	??E?$tvec2@I$00@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned int,1>::operator++
PUBLIC	??F?$tvec2@I$00@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned int,1>::operator--
PUBLIC	?length@?$tvec2@_K$00@glm@@SAHXZ		; glm::tvec2<unsigned __int64,1>::length
PUBLIC	??A?$tvec2@_K$00@glm@@QAEAA_KH@Z		; glm::tvec2<unsigned __int64,1>::operator[]
PUBLIC	??A?$tvec2@_K$00@glm@@QBEAB_KH@Z		; glm::tvec2<unsigned __int64,1>::operator[]
PUBLIC	??0?$tvec2@_K$00@glm@@QAE@XZ			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
PUBLIC	??0?$tvec2@_K$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
PUBLIC	??0?$tvec2@_K$00@glm@@QAE@_K@Z			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
PUBLIC	??0?$tvec2@_K$00@glm@@QAE@_K0@Z			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
PUBLIC	??E?$tvec2@_K$00@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec2@_K$00@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned __int64,1>::operator--
PUBLIC	??E?$tvec2@_K$00@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec2@_K$00@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned __int64,1>::operator--
PUBLIC	?length@?$tvec2@C$00@glm@@SAHXZ			; glm::tvec2<signed char,1>::length
PUBLIC	??A?$tvec2@C$00@glm@@QAEAACH@Z			; glm::tvec2<signed char,1>::operator[]
PUBLIC	??A?$tvec2@C$00@glm@@QBEABCH@Z			; glm::tvec2<signed char,1>::operator[]
PUBLIC	??0?$tvec2@C$00@glm@@QAE@XZ			; glm::tvec2<signed char,1>::tvec2<signed char,1>
PUBLIC	??0?$tvec2@C$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<signed char,1>::tvec2<signed char,1>
PUBLIC	??0?$tvec2@C$00@glm@@QAE@C@Z			; glm::tvec2<signed char,1>::tvec2<signed char,1>
PUBLIC	??0?$tvec2@C$00@glm@@QAE@CC@Z			; glm::tvec2<signed char,1>::tvec2<signed char,1>
PUBLIC	??E?$tvec2@C$00@glm@@QAEAAU01@XZ		; glm::tvec2<signed char,1>::operator++
PUBLIC	??F?$tvec2@C$00@glm@@QAEAAU01@XZ		; glm::tvec2<signed char,1>::operator--
PUBLIC	??E?$tvec2@C$00@glm@@QAE?AU01@H@Z		; glm::tvec2<signed char,1>::operator++
PUBLIC	??F?$tvec2@C$00@glm@@QAE?AU01@H@Z		; glm::tvec2<signed char,1>::operator--
PUBLIC	?length@?$tvec2@F$00@glm@@SAHXZ			; glm::tvec2<short,1>::length
PUBLIC	??A?$tvec2@F$00@glm@@QAEAAFH@Z			; glm::tvec2<short,1>::operator[]
PUBLIC	??A?$tvec2@F$00@glm@@QBEABFH@Z			; glm::tvec2<short,1>::operator[]
PUBLIC	??0?$tvec2@F$00@glm@@QAE@XZ			; glm::tvec2<short,1>::tvec2<short,1>
PUBLIC	??0?$tvec2@F$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<short,1>::tvec2<short,1>
PUBLIC	??0?$tvec2@F$00@glm@@QAE@F@Z			; glm::tvec2<short,1>::tvec2<short,1>
PUBLIC	??0?$tvec2@F$00@glm@@QAE@FF@Z			; glm::tvec2<short,1>::tvec2<short,1>
PUBLIC	??E?$tvec2@F$00@glm@@QAEAAU01@XZ		; glm::tvec2<short,1>::operator++
PUBLIC	??F?$tvec2@F$00@glm@@QAEAAU01@XZ		; glm::tvec2<short,1>::operator--
PUBLIC	??E?$tvec2@F$00@glm@@QAE?AU01@H@Z		; glm::tvec2<short,1>::operator++
PUBLIC	??F?$tvec2@F$00@glm@@QAE?AU01@H@Z		; glm::tvec2<short,1>::operator--
PUBLIC	?length@?$tvec2@H$00@glm@@SAHXZ			; glm::tvec2<int,1>::length
PUBLIC	??A?$tvec2@H$00@glm@@QAEAAHH@Z			; glm::tvec2<int,1>::operator[]
PUBLIC	??A?$tvec2@H$00@glm@@QBEABHH@Z			; glm::tvec2<int,1>::operator[]
PUBLIC	??0?$tvec2@H$00@glm@@QAE@XZ			; glm::tvec2<int,1>::tvec2<int,1>
PUBLIC	??0?$tvec2@H$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<int,1>::tvec2<int,1>
PUBLIC	??0?$tvec2@H$00@glm@@QAE@H@Z			; glm::tvec2<int,1>::tvec2<int,1>
PUBLIC	??0?$tvec2@H$00@glm@@QAE@HH@Z			; glm::tvec2<int,1>::tvec2<int,1>
PUBLIC	??E?$tvec2@H$00@glm@@QAEAAU01@XZ		; glm::tvec2<int,1>::operator++
PUBLIC	??F?$tvec2@H$00@glm@@QAEAAU01@XZ		; glm::tvec2<int,1>::operator--
PUBLIC	??E?$tvec2@H$00@glm@@QAE?AU01@H@Z		; glm::tvec2<int,1>::operator++
PUBLIC	??F?$tvec2@H$00@glm@@QAE?AU01@H@Z		; glm::tvec2<int,1>::operator--
PUBLIC	?length@?$tvec2@_J$00@glm@@SAHXZ		; glm::tvec2<__int64,1>::length
PUBLIC	??A?$tvec2@_J$00@glm@@QAEAA_JH@Z		; glm::tvec2<__int64,1>::operator[]
PUBLIC	??A?$tvec2@_J$00@glm@@QBEAB_JH@Z		; glm::tvec2<__int64,1>::operator[]
PUBLIC	??0?$tvec2@_J$00@glm@@QAE@XZ			; glm::tvec2<__int64,1>::tvec2<__int64,1>
PUBLIC	??0?$tvec2@_J$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<__int64,1>::tvec2<__int64,1>
PUBLIC	??0?$tvec2@_J$00@glm@@QAE@_J@Z			; glm::tvec2<__int64,1>::tvec2<__int64,1>
PUBLIC	??0?$tvec2@_J$00@glm@@QAE@_J0@Z			; glm::tvec2<__int64,1>::tvec2<__int64,1>
PUBLIC	??E?$tvec2@_J$00@glm@@QAEAAU01@XZ		; glm::tvec2<__int64,1>::operator++
PUBLIC	??F?$tvec2@_J$00@glm@@QAEAAU01@XZ		; glm::tvec2<__int64,1>::operator--
PUBLIC	??E?$tvec2@_J$00@glm@@QAE?AU01@H@Z		; glm::tvec2<__int64,1>::operator++
PUBLIC	??F?$tvec2@_J$00@glm@@QAE?AU01@H@Z		; glm::tvec2<__int64,1>::operator--
PUBLIC	?length@?$tvec2@M$00@glm@@SAHXZ			; glm::tvec2<float,1>::length
PUBLIC	??A?$tvec2@M$00@glm@@QAEAAMH@Z			; glm::tvec2<float,1>::operator[]
PUBLIC	??A?$tvec2@M$00@glm@@QBEABMH@Z			; glm::tvec2<float,1>::operator[]
PUBLIC	??0?$tvec2@M$00@glm@@QAE@XZ			; glm::tvec2<float,1>::tvec2<float,1>
PUBLIC	??0?$tvec2@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<float,1>::tvec2<float,1>
PUBLIC	??0?$tvec2@M$00@glm@@QAE@M@Z			; glm::tvec2<float,1>::tvec2<float,1>
PUBLIC	??0?$tvec2@M$00@glm@@QAE@MM@Z			; glm::tvec2<float,1>::tvec2<float,1>
PUBLIC	??E?$tvec2@M$00@glm@@QAEAAU01@XZ		; glm::tvec2<float,1>::operator++
PUBLIC	??F?$tvec2@M$00@glm@@QAEAAU01@XZ		; glm::tvec2<float,1>::operator--
PUBLIC	??E?$tvec2@M$00@glm@@QAE?AU01@H@Z		; glm::tvec2<float,1>::operator++
PUBLIC	??F?$tvec2@M$00@glm@@QAE?AU01@H@Z		; glm::tvec2<float,1>::operator--
PUBLIC	?length@?$tvec2@N$00@glm@@SAHXZ			; glm::tvec2<double,1>::length
PUBLIC	??A?$tvec2@N$00@glm@@QAEAANH@Z			; glm::tvec2<double,1>::operator[]
PUBLIC	??A?$tvec2@N$00@glm@@QBEABNH@Z			; glm::tvec2<double,1>::operator[]
PUBLIC	??0?$tvec2@N$00@glm@@QAE@XZ			; glm::tvec2<double,1>::tvec2<double,1>
PUBLIC	??0?$tvec2@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<double,1>::tvec2<double,1>
PUBLIC	??0?$tvec2@N$00@glm@@QAE@N@Z			; glm::tvec2<double,1>::tvec2<double,1>
PUBLIC	??0?$tvec2@N$00@glm@@QAE@NN@Z			; glm::tvec2<double,1>::tvec2<double,1>
PUBLIC	??E?$tvec2@N$00@glm@@QAEAAU01@XZ		; glm::tvec2<double,1>::operator++
PUBLIC	??F?$tvec2@N$00@glm@@QAEAAU01@XZ		; glm::tvec2<double,1>::operator--
PUBLIC	??E?$tvec2@N$00@glm@@QAE?AU01@H@Z		; glm::tvec2<double,1>::operator++
PUBLIC	??F?$tvec2@N$00@glm@@QAE?AU01@H@Z		; glm::tvec2<double,1>::operator--
PUBLIC	?length@?$tvec2@E$0A@@glm@@SAHXZ		; glm::tvec2<unsigned char,0>::length
PUBLIC	??A?$tvec2@E$0A@@glm@@QAEAAEH@Z			; glm::tvec2<unsigned char,0>::operator[]
PUBLIC	??A?$tvec2@E$0A@@glm@@QBEABEH@Z			; glm::tvec2<unsigned char,0>::operator[]
PUBLIC	??0?$tvec2@E$0A@@glm@@QAE@XZ			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
PUBLIC	??0?$tvec2@E$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
PUBLIC	??0?$tvec2@E$0A@@glm@@QAE@E@Z			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
PUBLIC	??0?$tvec2@E$0A@@glm@@QAE@EE@Z			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
PUBLIC	??E?$tvec2@E$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned char,0>::operator++
PUBLIC	??F?$tvec2@E$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned char,0>::operator--
PUBLIC	??E?$tvec2@E$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned char,0>::operator++
PUBLIC	??F?$tvec2@E$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned char,0>::operator--
PUBLIC	?length@?$tvec2@_K$0A@@glm@@SAHXZ		; glm::tvec2<unsigned __int64,0>::length
PUBLIC	??A?$tvec2@_K$0A@@glm@@QAEAA_KH@Z		; glm::tvec2<unsigned __int64,0>::operator[]
PUBLIC	??A?$tvec2@_K$0A@@glm@@QBEAB_KH@Z		; glm::tvec2<unsigned __int64,0>::operator[]
PUBLIC	??0?$tvec2@_K$0A@@glm@@QAE@XZ			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
PUBLIC	??0?$tvec2@_K$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
PUBLIC	??0?$tvec2@_K$0A@@glm@@QAE@_K@Z			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
PUBLIC	??0?$tvec2@_K$0A@@glm@@QAE@_K0@Z		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
PUBLIC	??E?$tvec2@_K$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec2@_K$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<unsigned __int64,0>::operator--
PUBLIC	??E?$tvec2@_K$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec2@_K$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<unsigned __int64,0>::operator--
PUBLIC	?length@?$tvec2@C$0A@@glm@@SAHXZ		; glm::tvec2<signed char,0>::length
PUBLIC	??A?$tvec2@C$0A@@glm@@QAEAACH@Z			; glm::tvec2<signed char,0>::operator[]
PUBLIC	??A?$tvec2@C$0A@@glm@@QBEABCH@Z			; glm::tvec2<signed char,0>::operator[]
PUBLIC	??0?$tvec2@C$0A@@glm@@QAE@XZ			; glm::tvec2<signed char,0>::tvec2<signed char,0>
PUBLIC	??0?$tvec2@C$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<signed char,0>::tvec2<signed char,0>
PUBLIC	??0?$tvec2@C$0A@@glm@@QAE@C@Z			; glm::tvec2<signed char,0>::tvec2<signed char,0>
PUBLIC	??0?$tvec2@C$0A@@glm@@QAE@CC@Z			; glm::tvec2<signed char,0>::tvec2<signed char,0>
PUBLIC	??E?$tvec2@C$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<signed char,0>::operator++
PUBLIC	??F?$tvec2@C$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<signed char,0>::operator--
PUBLIC	??E?$tvec2@C$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<signed char,0>::operator++
PUBLIC	??F?$tvec2@C$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<signed char,0>::operator--
PUBLIC	?length@?$tvec2@H$0A@@glm@@SAHXZ		; glm::tvec2<int,0>::length
PUBLIC	??A?$tvec2@H$0A@@glm@@QAEAAHH@Z			; glm::tvec2<int,0>::operator[]
PUBLIC	??A?$tvec2@H$0A@@glm@@QBEABHH@Z			; glm::tvec2<int,0>::operator[]
PUBLIC	??0?$tvec2@H$0A@@glm@@QAE@XZ			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??0?$tvec2@H$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??0?$tvec2@H$0A@@glm@@QAE@H@Z			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??0?$tvec2@H$0A@@glm@@QAE@HH@Z			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??E?$tvec2@H$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<int,0>::operator++
PUBLIC	??F?$tvec2@H$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<int,0>::operator--
PUBLIC	??E?$tvec2@H$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<int,0>::operator++
PUBLIC	??F?$tvec2@H$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<int,0>::operator--
PUBLIC	?length@?$tvec2@_J$0A@@glm@@SAHXZ		; glm::tvec2<__int64,0>::length
PUBLIC	??A?$tvec2@_J$0A@@glm@@QAEAA_JH@Z		; glm::tvec2<__int64,0>::operator[]
PUBLIC	??A?$tvec2@_J$0A@@glm@@QBEAB_JH@Z		; glm::tvec2<__int64,0>::operator[]
PUBLIC	??0?$tvec2@_J$0A@@glm@@QAE@XZ			; glm::tvec2<__int64,0>::tvec2<__int64,0>
PUBLIC	??0?$tvec2@_J$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<__int64,0>::tvec2<__int64,0>
PUBLIC	??0?$tvec2@_J$0A@@glm@@QAE@_J@Z			; glm::tvec2<__int64,0>::tvec2<__int64,0>
PUBLIC	??0?$tvec2@_J$0A@@glm@@QAE@_J0@Z		; glm::tvec2<__int64,0>::tvec2<__int64,0>
PUBLIC	??E?$tvec2@_J$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<__int64,0>::operator++
PUBLIC	??F?$tvec2@_J$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<__int64,0>::operator--
PUBLIC	??E?$tvec2@_J$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<__int64,0>::operator++
PUBLIC	??F?$tvec2@_J$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<__int64,0>::operator--
PUBLIC	?length@?$tvec2@N$0A@@glm@@SAHXZ		; glm::tvec2<double,0>::length
PUBLIC	??A?$tvec2@N$0A@@glm@@QAEAANH@Z			; glm::tvec2<double,0>::operator[]
PUBLIC	??A?$tvec2@N$0A@@glm@@QBEABNH@Z			; glm::tvec2<double,0>::operator[]
PUBLIC	??0?$tvec2@N$0A@@glm@@QAE@XZ			; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??0?$tvec2@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??0?$tvec2@N$0A@@glm@@QAE@N@Z			; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??0?$tvec2@N$0A@@glm@@QAE@NN@Z			; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??E?$tvec2@N$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<double,0>::operator++
PUBLIC	??F?$tvec2@N$0A@@glm@@QAEAAU01@XZ		; glm::tvec2<double,0>::operator--
PUBLIC	??E?$tvec2@N$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<double,0>::operator++
PUBLIC	??F?$tvec2@N$0A@@glm@@QAE?AU01@H@Z		; glm::tvec2<double,0>::operator--
PUBLIC	?length@?$tvec3@E$01@glm@@SAHXZ			; glm::tvec3<unsigned char,2>::length
PUBLIC	??A?$tvec3@E$01@glm@@QAEAAEH@Z			; glm::tvec3<unsigned char,2>::operator[]
PUBLIC	??A?$tvec3@E$01@glm@@QBEABEH@Z			; glm::tvec3<unsigned char,2>::operator[]
PUBLIC	??0?$tvec3@E$01@glm@@QAE@XZ			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
PUBLIC	??0?$tvec3@E$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
PUBLIC	??0?$tvec3@E$01@glm@@QAE@E@Z			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
PUBLIC	??0?$tvec3@E$01@glm@@QAE@EEE@Z			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
PUBLIC	??E?$tvec3@E$01@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned char,2>::operator++
PUBLIC	??F?$tvec3@E$01@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned char,2>::operator--
PUBLIC	??E?$tvec3@E$01@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned char,2>::operator++
PUBLIC	??F?$tvec3@E$01@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned char,2>::operator--
PUBLIC	?length@?$tvec3@G$01@glm@@SAHXZ			; glm::tvec3<unsigned short,2>::length
PUBLIC	??A?$tvec3@G$01@glm@@QAEAAGH@Z			; glm::tvec3<unsigned short,2>::operator[]
PUBLIC	??A?$tvec3@G$01@glm@@QBEABGH@Z			; glm::tvec3<unsigned short,2>::operator[]
PUBLIC	??0?$tvec3@G$01@glm@@QAE@XZ			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
PUBLIC	??0?$tvec3@G$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
PUBLIC	??0?$tvec3@G$01@glm@@QAE@G@Z			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
PUBLIC	??0?$tvec3@G$01@glm@@QAE@GGG@Z			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
PUBLIC	??E?$tvec3@G$01@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned short,2>::operator++
PUBLIC	??F?$tvec3@G$01@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned short,2>::operator--
PUBLIC	??E?$tvec3@G$01@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned short,2>::operator++
PUBLIC	??F?$tvec3@G$01@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned short,2>::operator--
PUBLIC	?length@?$tvec3@I$01@glm@@SAHXZ			; glm::tvec3<unsigned int,2>::length
PUBLIC	??A?$tvec3@I$01@glm@@QAEAAIH@Z			; glm::tvec3<unsigned int,2>::operator[]
PUBLIC	??A?$tvec3@I$01@glm@@QBEABIH@Z			; glm::tvec3<unsigned int,2>::operator[]
PUBLIC	??0?$tvec3@I$01@glm@@QAE@XZ			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
PUBLIC	??0?$tvec3@I$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
PUBLIC	??0?$tvec3@I$01@glm@@QAE@I@Z			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
PUBLIC	??0?$tvec3@I$01@glm@@QAE@III@Z			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
PUBLIC	??E?$tvec3@I$01@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned int,2>::operator++
PUBLIC	??F?$tvec3@I$01@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned int,2>::operator--
PUBLIC	??E?$tvec3@I$01@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned int,2>::operator++
PUBLIC	??F?$tvec3@I$01@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned int,2>::operator--
PUBLIC	?length@?$tvec3@_K$01@glm@@SAHXZ		; glm::tvec3<unsigned __int64,2>::length
PUBLIC	??A?$tvec3@_K$01@glm@@QAEAA_KH@Z		; glm::tvec3<unsigned __int64,2>::operator[]
PUBLIC	??A?$tvec3@_K$01@glm@@QBEAB_KH@Z		; glm::tvec3<unsigned __int64,2>::operator[]
PUBLIC	??0?$tvec3@_K$01@glm@@QAE@XZ			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
PUBLIC	??0?$tvec3@_K$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
PUBLIC	??0?$tvec3@_K$01@glm@@QAE@_K@Z			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
PUBLIC	??0?$tvec3@_K$01@glm@@QAE@_K00@Z		; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
PUBLIC	??E?$tvec3@_K$01@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec3@_K$01@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned __int64,2>::operator--
PUBLIC	??E?$tvec3@_K$01@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec3@_K$01@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned __int64,2>::operator--
PUBLIC	?length@?$tvec3@C$01@glm@@SAHXZ			; glm::tvec3<signed char,2>::length
PUBLIC	??A?$tvec3@C$01@glm@@QAEAACH@Z			; glm::tvec3<signed char,2>::operator[]
PUBLIC	??A?$tvec3@C$01@glm@@QBEABCH@Z			; glm::tvec3<signed char,2>::operator[]
PUBLIC	??0?$tvec3@C$01@glm@@QAE@XZ			; glm::tvec3<signed char,2>::tvec3<signed char,2>
PUBLIC	??0?$tvec3@C$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<signed char,2>::tvec3<signed char,2>
PUBLIC	??0?$tvec3@C$01@glm@@QAE@C@Z			; glm::tvec3<signed char,2>::tvec3<signed char,2>
PUBLIC	??0?$tvec3@C$01@glm@@QAE@CCC@Z			; glm::tvec3<signed char,2>::tvec3<signed char,2>
PUBLIC	??E?$tvec3@C$01@glm@@QAEAAU01@XZ		; glm::tvec3<signed char,2>::operator++
PUBLIC	??F?$tvec3@C$01@glm@@QAEAAU01@XZ		; glm::tvec3<signed char,2>::operator--
PUBLIC	??E?$tvec3@C$01@glm@@QAE?AU01@H@Z		; glm::tvec3<signed char,2>::operator++
PUBLIC	??F?$tvec3@C$01@glm@@QAE?AU01@H@Z		; glm::tvec3<signed char,2>::operator--
PUBLIC	?length@?$tvec3@F$01@glm@@SAHXZ			; glm::tvec3<short,2>::length
PUBLIC	??A?$tvec3@F$01@glm@@QAEAAFH@Z			; glm::tvec3<short,2>::operator[]
PUBLIC	??A?$tvec3@F$01@glm@@QBEABFH@Z			; glm::tvec3<short,2>::operator[]
PUBLIC	??0?$tvec3@F$01@glm@@QAE@XZ			; glm::tvec3<short,2>::tvec3<short,2>
PUBLIC	??0?$tvec3@F$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<short,2>::tvec3<short,2>
PUBLIC	??0?$tvec3@F$01@glm@@QAE@F@Z			; glm::tvec3<short,2>::tvec3<short,2>
PUBLIC	??0?$tvec3@F$01@glm@@QAE@FFF@Z			; glm::tvec3<short,2>::tvec3<short,2>
PUBLIC	??E?$tvec3@F$01@glm@@QAEAAU01@XZ		; glm::tvec3<short,2>::operator++
PUBLIC	??F?$tvec3@F$01@glm@@QAEAAU01@XZ		; glm::tvec3<short,2>::operator--
PUBLIC	??E?$tvec3@F$01@glm@@QAE?AU01@H@Z		; glm::tvec3<short,2>::operator++
PUBLIC	??F?$tvec3@F$01@glm@@QAE?AU01@H@Z		; glm::tvec3<short,2>::operator--
PUBLIC	?length@?$tvec3@H$01@glm@@SAHXZ			; glm::tvec3<int,2>::length
PUBLIC	??A?$tvec3@H$01@glm@@QAEAAHH@Z			; glm::tvec3<int,2>::operator[]
PUBLIC	??A?$tvec3@H$01@glm@@QBEABHH@Z			; glm::tvec3<int,2>::operator[]
PUBLIC	??0?$tvec3@H$01@glm@@QAE@XZ			; glm::tvec3<int,2>::tvec3<int,2>
PUBLIC	??0?$tvec3@H$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<int,2>::tvec3<int,2>
PUBLIC	??0?$tvec3@H$01@glm@@QAE@H@Z			; glm::tvec3<int,2>::tvec3<int,2>
PUBLIC	??0?$tvec3@H$01@glm@@QAE@HHH@Z			; glm::tvec3<int,2>::tvec3<int,2>
PUBLIC	??E?$tvec3@H$01@glm@@QAEAAU01@XZ		; glm::tvec3<int,2>::operator++
PUBLIC	??F?$tvec3@H$01@glm@@QAEAAU01@XZ		; glm::tvec3<int,2>::operator--
PUBLIC	??E?$tvec3@H$01@glm@@QAE?AU01@H@Z		; glm::tvec3<int,2>::operator++
PUBLIC	??F?$tvec3@H$01@glm@@QAE?AU01@H@Z		; glm::tvec3<int,2>::operator--
PUBLIC	?length@?$tvec3@_J$01@glm@@SAHXZ		; glm::tvec3<__int64,2>::length
PUBLIC	??A?$tvec3@_J$01@glm@@QAEAA_JH@Z		; glm::tvec3<__int64,2>::operator[]
PUBLIC	??A?$tvec3@_J$01@glm@@QBEAB_JH@Z		; glm::tvec3<__int64,2>::operator[]
PUBLIC	??0?$tvec3@_J$01@glm@@QAE@XZ			; glm::tvec3<__int64,2>::tvec3<__int64,2>
PUBLIC	??0?$tvec3@_J$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<__int64,2>::tvec3<__int64,2>
PUBLIC	??0?$tvec3@_J$01@glm@@QAE@_J@Z			; glm::tvec3<__int64,2>::tvec3<__int64,2>
PUBLIC	??0?$tvec3@_J$01@glm@@QAE@_J00@Z		; glm::tvec3<__int64,2>::tvec3<__int64,2>
PUBLIC	??E?$tvec3@_J$01@glm@@QAEAAU01@XZ		; glm::tvec3<__int64,2>::operator++
PUBLIC	??F?$tvec3@_J$01@glm@@QAEAAU01@XZ		; glm::tvec3<__int64,2>::operator--
PUBLIC	??E?$tvec3@_J$01@glm@@QAE?AU01@H@Z		; glm::tvec3<__int64,2>::operator++
PUBLIC	??F?$tvec3@_J$01@glm@@QAE?AU01@H@Z		; glm::tvec3<__int64,2>::operator--
PUBLIC	?length@?$tvec3@M$01@glm@@SAHXZ			; glm::tvec3<float,2>::length
PUBLIC	??A?$tvec3@M$01@glm@@QAEAAMH@Z			; glm::tvec3<float,2>::operator[]
PUBLIC	??A?$tvec3@M$01@glm@@QBEABMH@Z			; glm::tvec3<float,2>::operator[]
PUBLIC	??0?$tvec3@M$01@glm@@QAE@XZ			; glm::tvec3<float,2>::tvec3<float,2>
PUBLIC	??0?$tvec3@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<float,2>::tvec3<float,2>
PUBLIC	??0?$tvec3@M$01@glm@@QAE@M@Z			; glm::tvec3<float,2>::tvec3<float,2>
PUBLIC	??0?$tvec3@M$01@glm@@QAE@MMM@Z			; glm::tvec3<float,2>::tvec3<float,2>
PUBLIC	??E?$tvec3@M$01@glm@@QAEAAU01@XZ		; glm::tvec3<float,2>::operator++
PUBLIC	??F?$tvec3@M$01@glm@@QAEAAU01@XZ		; glm::tvec3<float,2>::operator--
PUBLIC	??E?$tvec3@M$01@glm@@QAE?AU01@H@Z		; glm::tvec3<float,2>::operator++
PUBLIC	??F?$tvec3@M$01@glm@@QAE?AU01@H@Z		; glm::tvec3<float,2>::operator--
PUBLIC	?length@?$tvec3@N$01@glm@@SAHXZ			; glm::tvec3<double,2>::length
PUBLIC	??A?$tvec3@N$01@glm@@QAEAANH@Z			; glm::tvec3<double,2>::operator[]
PUBLIC	??A?$tvec3@N$01@glm@@QBEABNH@Z			; glm::tvec3<double,2>::operator[]
PUBLIC	??0?$tvec3@N$01@glm@@QAE@XZ			; glm::tvec3<double,2>::tvec3<double,2>
PUBLIC	??0?$tvec3@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<double,2>::tvec3<double,2>
PUBLIC	??0?$tvec3@N$01@glm@@QAE@N@Z			; glm::tvec3<double,2>::tvec3<double,2>
PUBLIC	??0?$tvec3@N$01@glm@@QAE@NNN@Z			; glm::tvec3<double,2>::tvec3<double,2>
PUBLIC	??E?$tvec3@N$01@glm@@QAEAAU01@XZ		; glm::tvec3<double,2>::operator++
PUBLIC	??F?$tvec3@N$01@glm@@QAEAAU01@XZ		; glm::tvec3<double,2>::operator--
PUBLIC	??E?$tvec3@N$01@glm@@QAE?AU01@H@Z		; glm::tvec3<double,2>::operator++
PUBLIC	??F?$tvec3@N$01@glm@@QAE?AU01@H@Z		; glm::tvec3<double,2>::operator--
PUBLIC	?length@?$tvec3@E$00@glm@@SAHXZ			; glm::tvec3<unsigned char,1>::length
PUBLIC	??A?$tvec3@E$00@glm@@QAEAAEH@Z			; glm::tvec3<unsigned char,1>::operator[]
PUBLIC	??A?$tvec3@E$00@glm@@QBEABEH@Z			; glm::tvec3<unsigned char,1>::operator[]
PUBLIC	??0?$tvec3@E$00@glm@@QAE@XZ			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
PUBLIC	??0?$tvec3@E$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
PUBLIC	??0?$tvec3@E$00@glm@@QAE@E@Z			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
PUBLIC	??0?$tvec3@E$00@glm@@QAE@EEE@Z			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
PUBLIC	??E?$tvec3@E$00@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned char,1>::operator++
PUBLIC	??F?$tvec3@E$00@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned char,1>::operator--
PUBLIC	??E?$tvec3@E$00@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned char,1>::operator++
PUBLIC	??F?$tvec3@E$00@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned char,1>::operator--
PUBLIC	?length@?$tvec3@G$00@glm@@SAHXZ			; glm::tvec3<unsigned short,1>::length
PUBLIC	??A?$tvec3@G$00@glm@@QAEAAGH@Z			; glm::tvec3<unsigned short,1>::operator[]
PUBLIC	??A?$tvec3@G$00@glm@@QBEABGH@Z			; glm::tvec3<unsigned short,1>::operator[]
PUBLIC	??0?$tvec3@G$00@glm@@QAE@XZ			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
PUBLIC	??0?$tvec3@G$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
PUBLIC	??0?$tvec3@G$00@glm@@QAE@G@Z			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
PUBLIC	??0?$tvec3@G$00@glm@@QAE@GGG@Z			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
PUBLIC	??E?$tvec3@G$00@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned short,1>::operator++
PUBLIC	??F?$tvec3@G$00@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned short,1>::operator--
PUBLIC	??E?$tvec3@G$00@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned short,1>::operator++
PUBLIC	??F?$tvec3@G$00@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned short,1>::operator--
PUBLIC	?length@?$tvec3@I$00@glm@@SAHXZ			; glm::tvec3<unsigned int,1>::length
PUBLIC	??A?$tvec3@I$00@glm@@QAEAAIH@Z			; glm::tvec3<unsigned int,1>::operator[]
PUBLIC	??A?$tvec3@I$00@glm@@QBEABIH@Z			; glm::tvec3<unsigned int,1>::operator[]
PUBLIC	??0?$tvec3@I$00@glm@@QAE@XZ			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
PUBLIC	??0?$tvec3@I$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
PUBLIC	??0?$tvec3@I$00@glm@@QAE@I@Z			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
PUBLIC	??0?$tvec3@I$00@glm@@QAE@III@Z			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
PUBLIC	??E?$tvec3@I$00@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned int,1>::operator++
PUBLIC	??F?$tvec3@I$00@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned int,1>::operator--
PUBLIC	??E?$tvec3@I$00@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned int,1>::operator++
PUBLIC	??F?$tvec3@I$00@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned int,1>::operator--
PUBLIC	?length@?$tvec3@_K$00@glm@@SAHXZ		; glm::tvec3<unsigned __int64,1>::length
PUBLIC	??A?$tvec3@_K$00@glm@@QAEAA_KH@Z		; glm::tvec3<unsigned __int64,1>::operator[]
PUBLIC	??A?$tvec3@_K$00@glm@@QBEAB_KH@Z		; glm::tvec3<unsigned __int64,1>::operator[]
PUBLIC	??0?$tvec3@_K$00@glm@@QAE@XZ			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
PUBLIC	??0?$tvec3@_K$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
PUBLIC	??0?$tvec3@_K$00@glm@@QAE@_K@Z			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
PUBLIC	??0?$tvec3@_K$00@glm@@QAE@_K00@Z		; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
PUBLIC	??E?$tvec3@_K$00@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec3@_K$00@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned __int64,1>::operator--
PUBLIC	??E?$tvec3@_K$00@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec3@_K$00@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned __int64,1>::operator--
PUBLIC	?length@?$tvec3@C$00@glm@@SAHXZ			; glm::tvec3<signed char,1>::length
PUBLIC	??A?$tvec3@C$00@glm@@QAEAACH@Z			; glm::tvec3<signed char,1>::operator[]
PUBLIC	??A?$tvec3@C$00@glm@@QBEABCH@Z			; glm::tvec3<signed char,1>::operator[]
PUBLIC	??0?$tvec3@C$00@glm@@QAE@XZ			; glm::tvec3<signed char,1>::tvec3<signed char,1>
PUBLIC	??0?$tvec3@C$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<signed char,1>::tvec3<signed char,1>
PUBLIC	??0?$tvec3@C$00@glm@@QAE@C@Z			; glm::tvec3<signed char,1>::tvec3<signed char,1>
PUBLIC	??0?$tvec3@C$00@glm@@QAE@CCC@Z			; glm::tvec3<signed char,1>::tvec3<signed char,1>
PUBLIC	??E?$tvec3@C$00@glm@@QAEAAU01@XZ		; glm::tvec3<signed char,1>::operator++
PUBLIC	??F?$tvec3@C$00@glm@@QAEAAU01@XZ		; glm::tvec3<signed char,1>::operator--
PUBLIC	??E?$tvec3@C$00@glm@@QAE?AU01@H@Z		; glm::tvec3<signed char,1>::operator++
PUBLIC	??F?$tvec3@C$00@glm@@QAE?AU01@H@Z		; glm::tvec3<signed char,1>::operator--
PUBLIC	?length@?$tvec3@F$00@glm@@SAHXZ			; glm::tvec3<short,1>::length
PUBLIC	??A?$tvec3@F$00@glm@@QAEAAFH@Z			; glm::tvec3<short,1>::operator[]
PUBLIC	??A?$tvec3@F$00@glm@@QBEABFH@Z			; glm::tvec3<short,1>::operator[]
PUBLIC	??0?$tvec3@F$00@glm@@QAE@XZ			; glm::tvec3<short,1>::tvec3<short,1>
PUBLIC	??0?$tvec3@F$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<short,1>::tvec3<short,1>
PUBLIC	??0?$tvec3@F$00@glm@@QAE@F@Z			; glm::tvec3<short,1>::tvec3<short,1>
PUBLIC	??0?$tvec3@F$00@glm@@QAE@FFF@Z			; glm::tvec3<short,1>::tvec3<short,1>
PUBLIC	??E?$tvec3@F$00@glm@@QAEAAU01@XZ		; glm::tvec3<short,1>::operator++
PUBLIC	??F?$tvec3@F$00@glm@@QAEAAU01@XZ		; glm::tvec3<short,1>::operator--
PUBLIC	??E?$tvec3@F$00@glm@@QAE?AU01@H@Z		; glm::tvec3<short,1>::operator++
PUBLIC	??F?$tvec3@F$00@glm@@QAE?AU01@H@Z		; glm::tvec3<short,1>::operator--
PUBLIC	?length@?$tvec3@H$00@glm@@SAHXZ			; glm::tvec3<int,1>::length
PUBLIC	??A?$tvec3@H$00@glm@@QAEAAHH@Z			; glm::tvec3<int,1>::operator[]
PUBLIC	??A?$tvec3@H$00@glm@@QBEABHH@Z			; glm::tvec3<int,1>::operator[]
PUBLIC	??0?$tvec3@H$00@glm@@QAE@XZ			; glm::tvec3<int,1>::tvec3<int,1>
PUBLIC	??0?$tvec3@H$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<int,1>::tvec3<int,1>
PUBLIC	??0?$tvec3@H$00@glm@@QAE@H@Z			; glm::tvec3<int,1>::tvec3<int,1>
PUBLIC	??0?$tvec3@H$00@glm@@QAE@HHH@Z			; glm::tvec3<int,1>::tvec3<int,1>
PUBLIC	??E?$tvec3@H$00@glm@@QAEAAU01@XZ		; glm::tvec3<int,1>::operator++
PUBLIC	??F?$tvec3@H$00@glm@@QAEAAU01@XZ		; glm::tvec3<int,1>::operator--
PUBLIC	??E?$tvec3@H$00@glm@@QAE?AU01@H@Z		; glm::tvec3<int,1>::operator++
PUBLIC	??F?$tvec3@H$00@glm@@QAE?AU01@H@Z		; glm::tvec3<int,1>::operator--
PUBLIC	?length@?$tvec3@_J$00@glm@@SAHXZ		; glm::tvec3<__int64,1>::length
PUBLIC	??A?$tvec3@_J$00@glm@@QAEAA_JH@Z		; glm::tvec3<__int64,1>::operator[]
PUBLIC	??A?$tvec3@_J$00@glm@@QBEAB_JH@Z		; glm::tvec3<__int64,1>::operator[]
PUBLIC	??0?$tvec3@_J$00@glm@@QAE@XZ			; glm::tvec3<__int64,1>::tvec3<__int64,1>
PUBLIC	??0?$tvec3@_J$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<__int64,1>::tvec3<__int64,1>
PUBLIC	??0?$tvec3@_J$00@glm@@QAE@_J@Z			; glm::tvec3<__int64,1>::tvec3<__int64,1>
PUBLIC	??0?$tvec3@_J$00@glm@@QAE@_J00@Z		; glm::tvec3<__int64,1>::tvec3<__int64,1>
PUBLIC	??E?$tvec3@_J$00@glm@@QAEAAU01@XZ		; glm::tvec3<__int64,1>::operator++
PUBLIC	??F?$tvec3@_J$00@glm@@QAEAAU01@XZ		; glm::tvec3<__int64,1>::operator--
PUBLIC	??E?$tvec3@_J$00@glm@@QAE?AU01@H@Z		; glm::tvec3<__int64,1>::operator++
PUBLIC	??F?$tvec3@_J$00@glm@@QAE?AU01@H@Z		; glm::tvec3<__int64,1>::operator--
PUBLIC	?length@?$tvec3@M$00@glm@@SAHXZ			; glm::tvec3<float,1>::length
PUBLIC	??A?$tvec3@M$00@glm@@QAEAAMH@Z			; glm::tvec3<float,1>::operator[]
PUBLIC	??A?$tvec3@M$00@glm@@QBEABMH@Z			; glm::tvec3<float,1>::operator[]
PUBLIC	??0?$tvec3@M$00@glm@@QAE@XZ			; glm::tvec3<float,1>::tvec3<float,1>
PUBLIC	??0?$tvec3@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<float,1>::tvec3<float,1>
PUBLIC	??0?$tvec3@M$00@glm@@QAE@M@Z			; glm::tvec3<float,1>::tvec3<float,1>
PUBLIC	??0?$tvec3@M$00@glm@@QAE@MMM@Z			; glm::tvec3<float,1>::tvec3<float,1>
PUBLIC	??E?$tvec3@M$00@glm@@QAEAAU01@XZ		; glm::tvec3<float,1>::operator++
PUBLIC	??F?$tvec3@M$00@glm@@QAEAAU01@XZ		; glm::tvec3<float,1>::operator--
PUBLIC	??E?$tvec3@M$00@glm@@QAE?AU01@H@Z		; glm::tvec3<float,1>::operator++
PUBLIC	??F?$tvec3@M$00@glm@@QAE?AU01@H@Z		; glm::tvec3<float,1>::operator--
PUBLIC	?length@?$tvec3@N$00@glm@@SAHXZ			; glm::tvec3<double,1>::length
PUBLIC	??A?$tvec3@N$00@glm@@QAEAANH@Z			; glm::tvec3<double,1>::operator[]
PUBLIC	??A?$tvec3@N$00@glm@@QBEABNH@Z			; glm::tvec3<double,1>::operator[]
PUBLIC	??0?$tvec3@N$00@glm@@QAE@XZ			; glm::tvec3<double,1>::tvec3<double,1>
PUBLIC	??0?$tvec3@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<double,1>::tvec3<double,1>
PUBLIC	??0?$tvec3@N$00@glm@@QAE@N@Z			; glm::tvec3<double,1>::tvec3<double,1>
PUBLIC	??0?$tvec3@N$00@glm@@QAE@NNN@Z			; glm::tvec3<double,1>::tvec3<double,1>
PUBLIC	??E?$tvec3@N$00@glm@@QAEAAU01@XZ		; glm::tvec3<double,1>::operator++
PUBLIC	??F?$tvec3@N$00@glm@@QAEAAU01@XZ		; glm::tvec3<double,1>::operator--
PUBLIC	??E?$tvec3@N$00@glm@@QAE?AU01@H@Z		; glm::tvec3<double,1>::operator++
PUBLIC	??F?$tvec3@N$00@glm@@QAE?AU01@H@Z		; glm::tvec3<double,1>::operator--
PUBLIC	?length@?$tvec3@E$0A@@glm@@SAHXZ		; glm::tvec3<unsigned char,0>::length
PUBLIC	??A?$tvec3@E$0A@@glm@@QAEAAEH@Z			; glm::tvec3<unsigned char,0>::operator[]
PUBLIC	??A?$tvec3@E$0A@@glm@@QBEABEH@Z			; glm::tvec3<unsigned char,0>::operator[]
PUBLIC	??0?$tvec3@E$0A@@glm@@QAE@XZ			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
PUBLIC	??0?$tvec3@E$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
PUBLIC	??0?$tvec3@E$0A@@glm@@QAE@E@Z			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
PUBLIC	??0?$tvec3@E$0A@@glm@@QAE@EEE@Z			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
PUBLIC	??E?$tvec3@E$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned char,0>::operator++
PUBLIC	??F?$tvec3@E$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned char,0>::operator--
PUBLIC	??E?$tvec3@E$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned char,0>::operator++
PUBLIC	??F?$tvec3@E$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned char,0>::operator--
PUBLIC	?length@?$tvec3@G$0A@@glm@@SAHXZ		; glm::tvec3<unsigned short,0>::length
PUBLIC	??A?$tvec3@G$0A@@glm@@QAEAAGH@Z			; glm::tvec3<unsigned short,0>::operator[]
PUBLIC	??A?$tvec3@G$0A@@glm@@QBEABGH@Z			; glm::tvec3<unsigned short,0>::operator[]
PUBLIC	??0?$tvec3@G$0A@@glm@@QAE@XZ			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
PUBLIC	??0?$tvec3@G$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
PUBLIC	??0?$tvec3@G$0A@@glm@@QAE@G@Z			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
PUBLIC	??0?$tvec3@G$0A@@glm@@QAE@GGG@Z			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
PUBLIC	??E?$tvec3@G$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned short,0>::operator++
PUBLIC	??F?$tvec3@G$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned short,0>::operator--
PUBLIC	??E?$tvec3@G$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned short,0>::operator++
PUBLIC	??F?$tvec3@G$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned short,0>::operator--
PUBLIC	?length@?$tvec3@I$0A@@glm@@SAHXZ		; glm::tvec3<unsigned int,0>::length
PUBLIC	??A?$tvec3@I$0A@@glm@@QAEAAIH@Z			; glm::tvec3<unsigned int,0>::operator[]
PUBLIC	??A?$tvec3@I$0A@@glm@@QBEABIH@Z			; glm::tvec3<unsigned int,0>::operator[]
PUBLIC	??0?$tvec3@I$0A@@glm@@QAE@XZ			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	??0?$tvec3@I$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	??0?$tvec3@I$0A@@glm@@QAE@I@Z			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	??0?$tvec3@I$0A@@glm@@QAE@III@Z			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	??E?$tvec3@I$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned int,0>::operator++
PUBLIC	??F?$tvec3@I$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned int,0>::operator--
PUBLIC	??E?$tvec3@I$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned int,0>::operator++
PUBLIC	??F?$tvec3@I$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned int,0>::operator--
PUBLIC	?length@?$tvec3@_K$0A@@glm@@SAHXZ		; glm::tvec3<unsigned __int64,0>::length
PUBLIC	??A?$tvec3@_K$0A@@glm@@QAEAA_KH@Z		; glm::tvec3<unsigned __int64,0>::operator[]
PUBLIC	??A?$tvec3@_K$0A@@glm@@QBEAB_KH@Z		; glm::tvec3<unsigned __int64,0>::operator[]
PUBLIC	??0?$tvec3@_K$0A@@glm@@QAE@XZ			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
PUBLIC	??0?$tvec3@_K$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
PUBLIC	??0?$tvec3@_K$0A@@glm@@QAE@_K@Z			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
PUBLIC	??0?$tvec3@_K$0A@@glm@@QAE@_K00@Z		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
PUBLIC	??E?$tvec3@_K$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec3@_K$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<unsigned __int64,0>::operator--
PUBLIC	??E?$tvec3@_K$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec3@_K$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<unsigned __int64,0>::operator--
PUBLIC	?length@?$tvec3@C$0A@@glm@@SAHXZ		; glm::tvec3<signed char,0>::length
PUBLIC	??A?$tvec3@C$0A@@glm@@QAEAACH@Z			; glm::tvec3<signed char,0>::operator[]
PUBLIC	??A?$tvec3@C$0A@@glm@@QBEABCH@Z			; glm::tvec3<signed char,0>::operator[]
PUBLIC	??0?$tvec3@C$0A@@glm@@QAE@XZ			; glm::tvec3<signed char,0>::tvec3<signed char,0>
PUBLIC	??0?$tvec3@C$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<signed char,0>::tvec3<signed char,0>
PUBLIC	??0?$tvec3@C$0A@@glm@@QAE@C@Z			; glm::tvec3<signed char,0>::tvec3<signed char,0>
PUBLIC	??0?$tvec3@C$0A@@glm@@QAE@CCC@Z			; glm::tvec3<signed char,0>::tvec3<signed char,0>
PUBLIC	??E?$tvec3@C$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<signed char,0>::operator++
PUBLIC	??F?$tvec3@C$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<signed char,0>::operator--
PUBLIC	??E?$tvec3@C$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<signed char,0>::operator++
PUBLIC	??F?$tvec3@C$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<signed char,0>::operator--
PUBLIC	?length@?$tvec3@F$0A@@glm@@SAHXZ		; glm::tvec3<short,0>::length
PUBLIC	??A?$tvec3@F$0A@@glm@@QAEAAFH@Z			; glm::tvec3<short,0>::operator[]
PUBLIC	??A?$tvec3@F$0A@@glm@@QBEABFH@Z			; glm::tvec3<short,0>::operator[]
PUBLIC	??0?$tvec3@F$0A@@glm@@QAE@XZ			; glm::tvec3<short,0>::tvec3<short,0>
PUBLIC	??0?$tvec3@F$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<short,0>::tvec3<short,0>
PUBLIC	??0?$tvec3@F$0A@@glm@@QAE@F@Z			; glm::tvec3<short,0>::tvec3<short,0>
PUBLIC	??0?$tvec3@F$0A@@glm@@QAE@FFF@Z			; glm::tvec3<short,0>::tvec3<short,0>
PUBLIC	??E?$tvec3@F$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<short,0>::operator++
PUBLIC	??F?$tvec3@F$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<short,0>::operator--
PUBLIC	??E?$tvec3@F$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<short,0>::operator++
PUBLIC	??F?$tvec3@F$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<short,0>::operator--
PUBLIC	?length@?$tvec3@H$0A@@glm@@SAHXZ		; glm::tvec3<int,0>::length
PUBLIC	??A?$tvec3@H$0A@@glm@@QAEAAHH@Z			; glm::tvec3<int,0>::operator[]
PUBLIC	??A?$tvec3@H$0A@@glm@@QBEABHH@Z			; glm::tvec3<int,0>::operator[]
PUBLIC	??0?$tvec3@H$0A@@glm@@QAE@XZ			; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??0?$tvec3@H$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??0?$tvec3@H$0A@@glm@@QAE@H@Z			; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??0?$tvec3@H$0A@@glm@@QAE@HHH@Z			; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??E?$tvec3@H$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<int,0>::operator++
PUBLIC	??F?$tvec3@H$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<int,0>::operator--
PUBLIC	??E?$tvec3@H$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<int,0>::operator++
PUBLIC	??F?$tvec3@H$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<int,0>::operator--
PUBLIC	?length@?$tvec3@_J$0A@@glm@@SAHXZ		; glm::tvec3<__int64,0>::length
PUBLIC	??A?$tvec3@_J$0A@@glm@@QAEAA_JH@Z		; glm::tvec3<__int64,0>::operator[]
PUBLIC	??A?$tvec3@_J$0A@@glm@@QBEAB_JH@Z		; glm::tvec3<__int64,0>::operator[]
PUBLIC	??0?$tvec3@_J$0A@@glm@@QAE@XZ			; glm::tvec3<__int64,0>::tvec3<__int64,0>
PUBLIC	??0?$tvec3@_J$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<__int64,0>::tvec3<__int64,0>
PUBLIC	??0?$tvec3@_J$0A@@glm@@QAE@_J@Z			; glm::tvec3<__int64,0>::tvec3<__int64,0>
PUBLIC	??0?$tvec3@_J$0A@@glm@@QAE@_J00@Z		; glm::tvec3<__int64,0>::tvec3<__int64,0>
PUBLIC	??E?$tvec3@_J$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<__int64,0>::operator++
PUBLIC	??F?$tvec3@_J$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<__int64,0>::operator--
PUBLIC	??E?$tvec3@_J$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<__int64,0>::operator++
PUBLIC	??F?$tvec3@_J$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<__int64,0>::operator--
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QAEAAMH@Z			; glm::tvec3<float,0>::operator[]
PUBLIC	??A?$tvec3@M$0A@@glm@@QBEABMH@Z			; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QAE@XZ			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QAE@M@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QAE@MMM@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??E?$tvec3@M$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<float,0>::operator++
PUBLIC	??F?$tvec3@M$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<float,0>::operator--
PUBLIC	??E?$tvec3@M$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<float,0>::operator++
PUBLIC	??F?$tvec3@M$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<float,0>::operator--
PUBLIC	?length@?$tvec3@N$0A@@glm@@SAHXZ		; glm::tvec3<double,0>::length
PUBLIC	??A?$tvec3@N$0A@@glm@@QAEAANH@Z			; glm::tvec3<double,0>::operator[]
PUBLIC	??A?$tvec3@N$0A@@glm@@QBEABNH@Z			; glm::tvec3<double,0>::operator[]
PUBLIC	??0?$tvec3@N$0A@@glm@@QAE@XZ			; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??0?$tvec3@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??0?$tvec3@N$0A@@glm@@QAE@N@Z			; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??0?$tvec3@N$0A@@glm@@QAE@NNN@Z			; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??E?$tvec3@N$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<double,0>::operator++
PUBLIC	??F?$tvec3@N$0A@@glm@@QAEAAU01@XZ		; glm::tvec3<double,0>::operator--
PUBLIC	??E?$tvec3@N$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<double,0>::operator++
PUBLIC	??F?$tvec3@N$0A@@glm@@QAE?AU01@H@Z		; glm::tvec3<double,0>::operator--
PUBLIC	?length@?$tvec4@E$01@glm@@SAHXZ			; glm::tvec4<unsigned char,2>::length
PUBLIC	??A?$tvec4@E$01@glm@@QAEAAEH@Z			; glm::tvec4<unsigned char,2>::operator[]
PUBLIC	??A?$tvec4@E$01@glm@@QBEABEH@Z			; glm::tvec4<unsigned char,2>::operator[]
PUBLIC	??0?$tvec4@E$01@glm@@QAE@XZ			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
PUBLIC	??0?$tvec4@E$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
PUBLIC	??0?$tvec4@E$01@glm@@QAE@E@Z			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
PUBLIC	??0?$tvec4@E$01@glm@@QAE@EEEE@Z			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
PUBLIC	??E?$tvec4@E$01@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned char,2>::operator++
PUBLIC	??F?$tvec4@E$01@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned char,2>::operator--
PUBLIC	??E?$tvec4@E$01@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned char,2>::operator++
PUBLIC	??F?$tvec4@E$01@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned char,2>::operator--
PUBLIC	?length@?$tvec4@G$01@glm@@SAHXZ			; glm::tvec4<unsigned short,2>::length
PUBLIC	??A?$tvec4@G$01@glm@@QAEAAGH@Z			; glm::tvec4<unsigned short,2>::operator[]
PUBLIC	??A?$tvec4@G$01@glm@@QBEABGH@Z			; glm::tvec4<unsigned short,2>::operator[]
PUBLIC	??0?$tvec4@G$01@glm@@QAE@XZ			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
PUBLIC	??0?$tvec4@G$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
PUBLIC	??0?$tvec4@G$01@glm@@QAE@G@Z			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
PUBLIC	??0?$tvec4@G$01@glm@@QAE@GGGG@Z			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
PUBLIC	??E?$tvec4@G$01@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned short,2>::operator++
PUBLIC	??F?$tvec4@G$01@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned short,2>::operator--
PUBLIC	??E?$tvec4@G$01@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned short,2>::operator++
PUBLIC	??F?$tvec4@G$01@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned short,2>::operator--
PUBLIC	?length@?$tvec4@I$01@glm@@SAHXZ			; glm::tvec4<unsigned int,2>::length
PUBLIC	??A?$tvec4@I$01@glm@@QAEAAIH@Z			; glm::tvec4<unsigned int,2>::operator[]
PUBLIC	??A?$tvec4@I$01@glm@@QBEABIH@Z			; glm::tvec4<unsigned int,2>::operator[]
PUBLIC	??0?$tvec4@I$01@glm@@QAE@XZ			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
PUBLIC	??0?$tvec4@I$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
PUBLIC	??0?$tvec4@I$01@glm@@QAE@I@Z			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
PUBLIC	??0?$tvec4@I$01@glm@@QAE@IIII@Z			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
PUBLIC	??E?$tvec4@I$01@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned int,2>::operator++
PUBLIC	??F?$tvec4@I$01@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned int,2>::operator--
PUBLIC	??E?$tvec4@I$01@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned int,2>::operator++
PUBLIC	??F?$tvec4@I$01@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned int,2>::operator--
PUBLIC	?length@?$tvec4@_K$01@glm@@SAHXZ		; glm::tvec4<unsigned __int64,2>::length
PUBLIC	??A?$tvec4@_K$01@glm@@QAEAA_KH@Z		; glm::tvec4<unsigned __int64,2>::operator[]
PUBLIC	??A?$tvec4@_K$01@glm@@QBEAB_KH@Z		; glm::tvec4<unsigned __int64,2>::operator[]
PUBLIC	??0?$tvec4@_K$01@glm@@QAE@XZ			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
PUBLIC	??0?$tvec4@_K$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
PUBLIC	??0?$tvec4@_K$01@glm@@QAE@_K@Z			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
PUBLIC	??0?$tvec4@_K$01@glm@@QAE@_K000@Z		; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
PUBLIC	??E?$tvec4@_K$01@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec4@_K$01@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned __int64,2>::operator--
PUBLIC	??E?$tvec4@_K$01@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned __int64,2>::operator++
PUBLIC	??F?$tvec4@_K$01@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned __int64,2>::operator--
PUBLIC	?length@?$tvec4@C$01@glm@@SAHXZ			; glm::tvec4<signed char,2>::length
PUBLIC	??A?$tvec4@C$01@glm@@QAEAACH@Z			; glm::tvec4<signed char,2>::operator[]
PUBLIC	??A?$tvec4@C$01@glm@@QBEABCH@Z			; glm::tvec4<signed char,2>::operator[]
PUBLIC	??0?$tvec4@C$01@glm@@QAE@XZ			; glm::tvec4<signed char,2>::tvec4<signed char,2>
PUBLIC	??0?$tvec4@C$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<signed char,2>::tvec4<signed char,2>
PUBLIC	??0?$tvec4@C$01@glm@@QAE@C@Z			; glm::tvec4<signed char,2>::tvec4<signed char,2>
PUBLIC	??0?$tvec4@C$01@glm@@QAE@CCCC@Z			; glm::tvec4<signed char,2>::tvec4<signed char,2>
PUBLIC	??E?$tvec4@C$01@glm@@QAEAAU01@XZ		; glm::tvec4<signed char,2>::operator++
PUBLIC	??F?$tvec4@C$01@glm@@QAEAAU01@XZ		; glm::tvec4<signed char,2>::operator--
PUBLIC	??E?$tvec4@C$01@glm@@QAE?AU01@H@Z		; glm::tvec4<signed char,2>::operator++
PUBLIC	??F?$tvec4@C$01@glm@@QAE?AU01@H@Z		; glm::tvec4<signed char,2>::operator--
PUBLIC	?length@?$tvec4@F$01@glm@@SAHXZ			; glm::tvec4<short,2>::length
PUBLIC	??A?$tvec4@F$01@glm@@QAEAAFH@Z			; glm::tvec4<short,2>::operator[]
PUBLIC	??A?$tvec4@F$01@glm@@QBEABFH@Z			; glm::tvec4<short,2>::operator[]
PUBLIC	??0?$tvec4@F$01@glm@@QAE@XZ			; glm::tvec4<short,2>::tvec4<short,2>
PUBLIC	??0?$tvec4@F$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<short,2>::tvec4<short,2>
PUBLIC	??0?$tvec4@F$01@glm@@QAE@F@Z			; glm::tvec4<short,2>::tvec4<short,2>
PUBLIC	??0?$tvec4@F$01@glm@@QAE@FFFF@Z			; glm::tvec4<short,2>::tvec4<short,2>
PUBLIC	??E?$tvec4@F$01@glm@@QAEAAU01@XZ		; glm::tvec4<short,2>::operator++
PUBLIC	??F?$tvec4@F$01@glm@@QAEAAU01@XZ		; glm::tvec4<short,2>::operator--
PUBLIC	??E?$tvec4@F$01@glm@@QAE?AU01@H@Z		; glm::tvec4<short,2>::operator++
PUBLIC	??F?$tvec4@F$01@glm@@QAE?AU01@H@Z		; glm::tvec4<short,2>::operator--
PUBLIC	?length@?$tvec4@H$01@glm@@SAHXZ			; glm::tvec4<int,2>::length
PUBLIC	??A?$tvec4@H$01@glm@@QAEAAHH@Z			; glm::tvec4<int,2>::operator[]
PUBLIC	??A?$tvec4@H$01@glm@@QBEABHH@Z			; glm::tvec4<int,2>::operator[]
PUBLIC	??0?$tvec4@H$01@glm@@QAE@XZ			; glm::tvec4<int,2>::tvec4<int,2>
PUBLIC	??0?$tvec4@H$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<int,2>::tvec4<int,2>
PUBLIC	??0?$tvec4@H$01@glm@@QAE@H@Z			; glm::tvec4<int,2>::tvec4<int,2>
PUBLIC	??0?$tvec4@H$01@glm@@QAE@HHHH@Z			; glm::tvec4<int,2>::tvec4<int,2>
PUBLIC	??E?$tvec4@H$01@glm@@QAEAAU01@XZ		; glm::tvec4<int,2>::operator++
PUBLIC	??F?$tvec4@H$01@glm@@QAEAAU01@XZ		; glm::tvec4<int,2>::operator--
PUBLIC	??E?$tvec4@H$01@glm@@QAE?AU01@H@Z		; glm::tvec4<int,2>::operator++
PUBLIC	??F?$tvec4@H$01@glm@@QAE?AU01@H@Z		; glm::tvec4<int,2>::operator--
PUBLIC	?length@?$tvec4@_J$01@glm@@SAHXZ		; glm::tvec4<__int64,2>::length
PUBLIC	??A?$tvec4@_J$01@glm@@QAEAA_JH@Z		; glm::tvec4<__int64,2>::operator[]
PUBLIC	??A?$tvec4@_J$01@glm@@QBEAB_JH@Z		; glm::tvec4<__int64,2>::operator[]
PUBLIC	??0?$tvec4@_J$01@glm@@QAE@XZ			; glm::tvec4<__int64,2>::tvec4<__int64,2>
PUBLIC	??0?$tvec4@_J$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<__int64,2>::tvec4<__int64,2>
PUBLIC	??0?$tvec4@_J$01@glm@@QAE@_J@Z			; glm::tvec4<__int64,2>::tvec4<__int64,2>
PUBLIC	??0?$tvec4@_J$01@glm@@QAE@_J000@Z		; glm::tvec4<__int64,2>::tvec4<__int64,2>
PUBLIC	??E?$tvec4@_J$01@glm@@QAEAAU01@XZ		; glm::tvec4<__int64,2>::operator++
PUBLIC	??F?$tvec4@_J$01@glm@@QAEAAU01@XZ		; glm::tvec4<__int64,2>::operator--
PUBLIC	??E?$tvec4@_J$01@glm@@QAE?AU01@H@Z		; glm::tvec4<__int64,2>::operator++
PUBLIC	??F?$tvec4@_J$01@glm@@QAE?AU01@H@Z		; glm::tvec4<__int64,2>::operator--
PUBLIC	?length@?$tvec4@M$01@glm@@SAHXZ			; glm::tvec4<float,2>::length
PUBLIC	??A?$tvec4@M$01@glm@@QAEAAMH@Z			; glm::tvec4<float,2>::operator[]
PUBLIC	??A?$tvec4@M$01@glm@@QBEABMH@Z			; glm::tvec4<float,2>::operator[]
PUBLIC	??0?$tvec4@M$01@glm@@QAE@XZ			; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??0?$tvec4@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??0?$tvec4@M$01@glm@@QAE@M@Z			; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??0?$tvec4@M$01@glm@@QAE@MMMM@Z			; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??E?$tvec4@M$01@glm@@QAEAAU01@XZ		; glm::tvec4<float,2>::operator++
PUBLIC	??F?$tvec4@M$01@glm@@QAEAAU01@XZ		; glm::tvec4<float,2>::operator--
PUBLIC	??E?$tvec4@M$01@glm@@QAE?AU01@H@Z		; glm::tvec4<float,2>::operator++
PUBLIC	??F?$tvec4@M$01@glm@@QAE?AU01@H@Z		; glm::tvec4<float,2>::operator--
PUBLIC	?length@?$tvec4@N$01@glm@@SAHXZ			; glm::tvec4<double,2>::length
PUBLIC	??A?$tvec4@N$01@glm@@QAEAANH@Z			; glm::tvec4<double,2>::operator[]
PUBLIC	??A?$tvec4@N$01@glm@@QBEABNH@Z			; glm::tvec4<double,2>::operator[]
PUBLIC	??0?$tvec4@N$01@glm@@QAE@XZ			; glm::tvec4<double,2>::tvec4<double,2>
PUBLIC	??0?$tvec4@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<double,2>::tvec4<double,2>
PUBLIC	??0?$tvec4@N$01@glm@@QAE@N@Z			; glm::tvec4<double,2>::tvec4<double,2>
PUBLIC	??0?$tvec4@N$01@glm@@QAE@NNNN@Z			; glm::tvec4<double,2>::tvec4<double,2>
PUBLIC	??E?$tvec4@N$01@glm@@QAEAAU01@XZ		; glm::tvec4<double,2>::operator++
PUBLIC	??F?$tvec4@N$01@glm@@QAEAAU01@XZ		; glm::tvec4<double,2>::operator--
PUBLIC	??E?$tvec4@N$01@glm@@QAE?AU01@H@Z		; glm::tvec4<double,2>::operator++
PUBLIC	??F?$tvec4@N$01@glm@@QAE?AU01@H@Z		; glm::tvec4<double,2>::operator--
PUBLIC	?length@?$tvec4@E$00@glm@@SAHXZ			; glm::tvec4<unsigned char,1>::length
PUBLIC	??A?$tvec4@E$00@glm@@QAEAAEH@Z			; glm::tvec4<unsigned char,1>::operator[]
PUBLIC	??A?$tvec4@E$00@glm@@QBEABEH@Z			; glm::tvec4<unsigned char,1>::operator[]
PUBLIC	??0?$tvec4@E$00@glm@@QAE@XZ			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
PUBLIC	??0?$tvec4@E$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
PUBLIC	??0?$tvec4@E$00@glm@@QAE@E@Z			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
PUBLIC	??0?$tvec4@E$00@glm@@QAE@EEEE@Z			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
PUBLIC	??E?$tvec4@E$00@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned char,1>::operator++
PUBLIC	??F?$tvec4@E$00@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned char,1>::operator--
PUBLIC	??E?$tvec4@E$00@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned char,1>::operator++
PUBLIC	??F?$tvec4@E$00@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned char,1>::operator--
PUBLIC	?length@?$tvec4@G$00@glm@@SAHXZ			; glm::tvec4<unsigned short,1>::length
PUBLIC	??A?$tvec4@G$00@glm@@QAEAAGH@Z			; glm::tvec4<unsigned short,1>::operator[]
PUBLIC	??A?$tvec4@G$00@glm@@QBEABGH@Z			; glm::tvec4<unsigned short,1>::operator[]
PUBLIC	??0?$tvec4@G$00@glm@@QAE@XZ			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
PUBLIC	??0?$tvec4@G$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
PUBLIC	??0?$tvec4@G$00@glm@@QAE@G@Z			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
PUBLIC	??0?$tvec4@G$00@glm@@QAE@GGGG@Z			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
PUBLIC	??E?$tvec4@G$00@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned short,1>::operator++
PUBLIC	??F?$tvec4@G$00@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned short,1>::operator--
PUBLIC	??E?$tvec4@G$00@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned short,1>::operator++
PUBLIC	??F?$tvec4@G$00@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned short,1>::operator--
PUBLIC	?length@?$tvec4@I$00@glm@@SAHXZ			; glm::tvec4<unsigned int,1>::length
PUBLIC	??A?$tvec4@I$00@glm@@QAEAAIH@Z			; glm::tvec4<unsigned int,1>::operator[]
PUBLIC	??A?$tvec4@I$00@glm@@QBEABIH@Z			; glm::tvec4<unsigned int,1>::operator[]
PUBLIC	??0?$tvec4@I$00@glm@@QAE@XZ			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
PUBLIC	??0?$tvec4@I$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
PUBLIC	??0?$tvec4@I$00@glm@@QAE@I@Z			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
PUBLIC	??0?$tvec4@I$00@glm@@QAE@IIII@Z			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
PUBLIC	??E?$tvec4@I$00@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned int,1>::operator++
PUBLIC	??F?$tvec4@I$00@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned int,1>::operator--
PUBLIC	??E?$tvec4@I$00@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned int,1>::operator++
PUBLIC	??F?$tvec4@I$00@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned int,1>::operator--
PUBLIC	?length@?$tvec4@_K$00@glm@@SAHXZ		; glm::tvec4<unsigned __int64,1>::length
PUBLIC	??A?$tvec4@_K$00@glm@@QAEAA_KH@Z		; glm::tvec4<unsigned __int64,1>::operator[]
PUBLIC	??A?$tvec4@_K$00@glm@@QBEAB_KH@Z		; glm::tvec4<unsigned __int64,1>::operator[]
PUBLIC	??0?$tvec4@_K$00@glm@@QAE@XZ			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
PUBLIC	??0?$tvec4@_K$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
PUBLIC	??0?$tvec4@_K$00@glm@@QAE@_K@Z			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
PUBLIC	??0?$tvec4@_K$00@glm@@QAE@_K000@Z		; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
PUBLIC	??E?$tvec4@_K$00@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec4@_K$00@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned __int64,1>::operator--
PUBLIC	??E?$tvec4@_K$00@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned __int64,1>::operator++
PUBLIC	??F?$tvec4@_K$00@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned __int64,1>::operator--
PUBLIC	?length@?$tvec4@C$00@glm@@SAHXZ			; glm::tvec4<signed char,1>::length
PUBLIC	??A?$tvec4@C$00@glm@@QAEAACH@Z			; glm::tvec4<signed char,1>::operator[]
PUBLIC	??A?$tvec4@C$00@glm@@QBEABCH@Z			; glm::tvec4<signed char,1>::operator[]
PUBLIC	??0?$tvec4@C$00@glm@@QAE@XZ			; glm::tvec4<signed char,1>::tvec4<signed char,1>
PUBLIC	??0?$tvec4@C$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<signed char,1>::tvec4<signed char,1>
PUBLIC	??0?$tvec4@C$00@glm@@QAE@C@Z			; glm::tvec4<signed char,1>::tvec4<signed char,1>
PUBLIC	??0?$tvec4@C$00@glm@@QAE@CCCC@Z			; glm::tvec4<signed char,1>::tvec4<signed char,1>
PUBLIC	??E?$tvec4@C$00@glm@@QAEAAU01@XZ		; glm::tvec4<signed char,1>::operator++
PUBLIC	??F?$tvec4@C$00@glm@@QAEAAU01@XZ		; glm::tvec4<signed char,1>::operator--
PUBLIC	??E?$tvec4@C$00@glm@@QAE?AU01@H@Z		; glm::tvec4<signed char,1>::operator++
PUBLIC	??F?$tvec4@C$00@glm@@QAE?AU01@H@Z		; glm::tvec4<signed char,1>::operator--
PUBLIC	?length@?$tvec4@F$00@glm@@SAHXZ			; glm::tvec4<short,1>::length
PUBLIC	??A?$tvec4@F$00@glm@@QAEAAFH@Z			; glm::tvec4<short,1>::operator[]
PUBLIC	??A?$tvec4@F$00@glm@@QBEABFH@Z			; glm::tvec4<short,1>::operator[]
PUBLIC	??0?$tvec4@F$00@glm@@QAE@XZ			; glm::tvec4<short,1>::tvec4<short,1>
PUBLIC	??0?$tvec4@F$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<short,1>::tvec4<short,1>
PUBLIC	??0?$tvec4@F$00@glm@@QAE@F@Z			; glm::tvec4<short,1>::tvec4<short,1>
PUBLIC	??0?$tvec4@F$00@glm@@QAE@FFFF@Z			; glm::tvec4<short,1>::tvec4<short,1>
PUBLIC	??E?$tvec4@F$00@glm@@QAEAAU01@XZ		; glm::tvec4<short,1>::operator++
PUBLIC	??F?$tvec4@F$00@glm@@QAEAAU01@XZ		; glm::tvec4<short,1>::operator--
PUBLIC	??E?$tvec4@F$00@glm@@QAE?AU01@H@Z		; glm::tvec4<short,1>::operator++
PUBLIC	??F?$tvec4@F$00@glm@@QAE?AU01@H@Z		; glm::tvec4<short,1>::operator--
PUBLIC	?length@?$tvec4@H$00@glm@@SAHXZ			; glm::tvec4<int,1>::length
PUBLIC	??A?$tvec4@H$00@glm@@QAEAAHH@Z			; glm::tvec4<int,1>::operator[]
PUBLIC	??A?$tvec4@H$00@glm@@QBEABHH@Z			; glm::tvec4<int,1>::operator[]
PUBLIC	??0?$tvec4@H$00@glm@@QAE@XZ			; glm::tvec4<int,1>::tvec4<int,1>
PUBLIC	??0?$tvec4@H$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<int,1>::tvec4<int,1>
PUBLIC	??0?$tvec4@H$00@glm@@QAE@H@Z			; glm::tvec4<int,1>::tvec4<int,1>
PUBLIC	??0?$tvec4@H$00@glm@@QAE@HHHH@Z			; glm::tvec4<int,1>::tvec4<int,1>
PUBLIC	??E?$tvec4@H$00@glm@@QAEAAU01@XZ		; glm::tvec4<int,1>::operator++
PUBLIC	??F?$tvec4@H$00@glm@@QAEAAU01@XZ		; glm::tvec4<int,1>::operator--
PUBLIC	??E?$tvec4@H$00@glm@@QAE?AU01@H@Z		; glm::tvec4<int,1>::operator++
PUBLIC	??F?$tvec4@H$00@glm@@QAE?AU01@H@Z		; glm::tvec4<int,1>::operator--
PUBLIC	?length@?$tvec4@_J$00@glm@@SAHXZ		; glm::tvec4<__int64,1>::length
PUBLIC	??A?$tvec4@_J$00@glm@@QAEAA_JH@Z		; glm::tvec4<__int64,1>::operator[]
PUBLIC	??A?$tvec4@_J$00@glm@@QBEAB_JH@Z		; glm::tvec4<__int64,1>::operator[]
PUBLIC	??0?$tvec4@_J$00@glm@@QAE@XZ			; glm::tvec4<__int64,1>::tvec4<__int64,1>
PUBLIC	??0?$tvec4@_J$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<__int64,1>::tvec4<__int64,1>
PUBLIC	??0?$tvec4@_J$00@glm@@QAE@_J@Z			; glm::tvec4<__int64,1>::tvec4<__int64,1>
PUBLIC	??0?$tvec4@_J$00@glm@@QAE@_J000@Z		; glm::tvec4<__int64,1>::tvec4<__int64,1>
PUBLIC	??E?$tvec4@_J$00@glm@@QAEAAU01@XZ		; glm::tvec4<__int64,1>::operator++
PUBLIC	??F?$tvec4@_J$00@glm@@QAEAAU01@XZ		; glm::tvec4<__int64,1>::operator--
PUBLIC	??E?$tvec4@_J$00@glm@@QAE?AU01@H@Z		; glm::tvec4<__int64,1>::operator++
PUBLIC	??F?$tvec4@_J$00@glm@@QAE?AU01@H@Z		; glm::tvec4<__int64,1>::operator--
PUBLIC	?length@?$tvec4@M$00@glm@@SAHXZ			; glm::tvec4<float,1>::length
PUBLIC	??A?$tvec4@M$00@glm@@QAEAAMH@Z			; glm::tvec4<float,1>::operator[]
PUBLIC	??A?$tvec4@M$00@glm@@QBEABMH@Z			; glm::tvec4<float,1>::operator[]
PUBLIC	??0?$tvec4@M$00@glm@@QAE@XZ			; glm::tvec4<float,1>::tvec4<float,1>
PUBLIC	??0?$tvec4@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<float,1>::tvec4<float,1>
PUBLIC	??0?$tvec4@M$00@glm@@QAE@M@Z			; glm::tvec4<float,1>::tvec4<float,1>
PUBLIC	??0?$tvec4@M$00@glm@@QAE@MMMM@Z			; glm::tvec4<float,1>::tvec4<float,1>
PUBLIC	??E?$tvec4@M$00@glm@@QAEAAU01@XZ		; glm::tvec4<float,1>::operator++
PUBLIC	??F?$tvec4@M$00@glm@@QAEAAU01@XZ		; glm::tvec4<float,1>::operator--
PUBLIC	??E?$tvec4@M$00@glm@@QAE?AU01@H@Z		; glm::tvec4<float,1>::operator++
PUBLIC	??F?$tvec4@M$00@glm@@QAE?AU01@H@Z		; glm::tvec4<float,1>::operator--
PUBLIC	?length@?$tvec4@N$00@glm@@SAHXZ			; glm::tvec4<double,1>::length
PUBLIC	??A?$tvec4@N$00@glm@@QAEAANH@Z			; glm::tvec4<double,1>::operator[]
PUBLIC	??A?$tvec4@N$00@glm@@QBEABNH@Z			; glm::tvec4<double,1>::operator[]
PUBLIC	??0?$tvec4@N$00@glm@@QAE@XZ			; glm::tvec4<double,1>::tvec4<double,1>
PUBLIC	??0?$tvec4@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<double,1>::tvec4<double,1>
PUBLIC	??0?$tvec4@N$00@glm@@QAE@N@Z			; glm::tvec4<double,1>::tvec4<double,1>
PUBLIC	??0?$tvec4@N$00@glm@@QAE@NNNN@Z			; glm::tvec4<double,1>::tvec4<double,1>
PUBLIC	??E?$tvec4@N$00@glm@@QAEAAU01@XZ		; glm::tvec4<double,1>::operator++
PUBLIC	??F?$tvec4@N$00@glm@@QAEAAU01@XZ		; glm::tvec4<double,1>::operator--
PUBLIC	??E?$tvec4@N$00@glm@@QAE?AU01@H@Z		; glm::tvec4<double,1>::operator++
PUBLIC	??F?$tvec4@N$00@glm@@QAE?AU01@H@Z		; glm::tvec4<double,1>::operator--
PUBLIC	?length@?$tvec4@G$0A@@glm@@SAHXZ		; glm::tvec4<unsigned short,0>::length
PUBLIC	??A?$tvec4@G$0A@@glm@@QAEAAGH@Z			; glm::tvec4<unsigned short,0>::operator[]
PUBLIC	??A?$tvec4@G$0A@@glm@@QBEABGH@Z			; glm::tvec4<unsigned short,0>::operator[]
PUBLIC	??0?$tvec4@G$0A@@glm@@QAE@XZ			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
PUBLIC	??0?$tvec4@G$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
PUBLIC	??0?$tvec4@G$0A@@glm@@QAE@G@Z			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
PUBLIC	??0?$tvec4@G$0A@@glm@@QAE@GGGG@Z		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
PUBLIC	??E?$tvec4@G$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned short,0>::operator++
PUBLIC	??F?$tvec4@G$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned short,0>::operator--
PUBLIC	??E?$tvec4@G$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned short,0>::operator++
PUBLIC	??F?$tvec4@G$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned short,0>::operator--
PUBLIC	?length@?$tvec4@I$0A@@glm@@SAHXZ		; glm::tvec4<unsigned int,0>::length
PUBLIC	??A?$tvec4@I$0A@@glm@@QAEAAIH@Z			; glm::tvec4<unsigned int,0>::operator[]
PUBLIC	??A?$tvec4@I$0A@@glm@@QBEABIH@Z			; glm::tvec4<unsigned int,0>::operator[]
PUBLIC	??0?$tvec4@I$0A@@glm@@QAE@XZ			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??0?$tvec4@I$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??0?$tvec4@I$0A@@glm@@QAE@I@Z			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??0?$tvec4@I$0A@@glm@@QAE@IIII@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??E?$tvec4@I$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned int,0>::operator++
PUBLIC	??F?$tvec4@I$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned int,0>::operator--
PUBLIC	??E?$tvec4@I$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned int,0>::operator++
PUBLIC	??F?$tvec4@I$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned int,0>::operator--
PUBLIC	?length@?$tvec4@_K$0A@@glm@@SAHXZ		; glm::tvec4<unsigned __int64,0>::length
PUBLIC	??A?$tvec4@_K$0A@@glm@@QAEAA_KH@Z		; glm::tvec4<unsigned __int64,0>::operator[]
PUBLIC	??A?$tvec4@_K$0A@@glm@@QBEAB_KH@Z		; glm::tvec4<unsigned __int64,0>::operator[]
PUBLIC	??0?$tvec4@_K$0A@@glm@@QAE@XZ			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
PUBLIC	??0?$tvec4@_K$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
PUBLIC	??0?$tvec4@_K$0A@@glm@@QAE@_K@Z			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
PUBLIC	??0?$tvec4@_K$0A@@glm@@QAE@_K000@Z		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
PUBLIC	??E?$tvec4@_K$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec4@_K$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<unsigned __int64,0>::operator--
PUBLIC	??E?$tvec4@_K$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned __int64,0>::operator++
PUBLIC	??F?$tvec4@_K$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<unsigned __int64,0>::operator--
PUBLIC	?length@?$tvec4@F$0A@@glm@@SAHXZ		; glm::tvec4<short,0>::length
PUBLIC	??A?$tvec4@F$0A@@glm@@QAEAAFH@Z			; glm::tvec4<short,0>::operator[]
PUBLIC	??A?$tvec4@F$0A@@glm@@QBEABFH@Z			; glm::tvec4<short,0>::operator[]
PUBLIC	??0?$tvec4@F$0A@@glm@@QAE@XZ			; glm::tvec4<short,0>::tvec4<short,0>
PUBLIC	??0?$tvec4@F$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<short,0>::tvec4<short,0>
PUBLIC	??0?$tvec4@F$0A@@glm@@QAE@F@Z			; glm::tvec4<short,0>::tvec4<short,0>
PUBLIC	??0?$tvec4@F$0A@@glm@@QAE@FFFF@Z		; glm::tvec4<short,0>::tvec4<short,0>
PUBLIC	??E?$tvec4@F$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<short,0>::operator++
PUBLIC	??F?$tvec4@F$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<short,0>::operator--
PUBLIC	??E?$tvec4@F$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<short,0>::operator++
PUBLIC	??F?$tvec4@F$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<short,0>::operator--
PUBLIC	?length@?$tvec4@H$0A@@glm@@SAHXZ		; glm::tvec4<int,0>::length
PUBLIC	??A?$tvec4@H$0A@@glm@@QAEAAHH@Z			; glm::tvec4<int,0>::operator[]
PUBLIC	??A?$tvec4@H$0A@@glm@@QBEABHH@Z			; glm::tvec4<int,0>::operator[]
PUBLIC	??0?$tvec4@H$0A@@glm@@QAE@XZ			; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QAE@H@Z			; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QAE@HHHH@Z		; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??E?$tvec4@H$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<int,0>::operator++
PUBLIC	??F?$tvec4@H$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<int,0>::operator--
PUBLIC	??E?$tvec4@H$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<int,0>::operator++
PUBLIC	??F?$tvec4@H$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<int,0>::operator--
PUBLIC	?length@?$tvec4@_J$0A@@glm@@SAHXZ		; glm::tvec4<__int64,0>::length
PUBLIC	??A?$tvec4@_J$0A@@glm@@QAEAA_JH@Z		; glm::tvec4<__int64,0>::operator[]
PUBLIC	??A?$tvec4@_J$0A@@glm@@QBEAB_JH@Z		; glm::tvec4<__int64,0>::operator[]
PUBLIC	??0?$tvec4@_J$0A@@glm@@QAE@XZ			; glm::tvec4<__int64,0>::tvec4<__int64,0>
PUBLIC	??0?$tvec4@_J$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<__int64,0>::tvec4<__int64,0>
PUBLIC	??0?$tvec4@_J$0A@@glm@@QAE@_J@Z			; glm::tvec4<__int64,0>::tvec4<__int64,0>
PUBLIC	??0?$tvec4@_J$0A@@glm@@QAE@_J000@Z		; glm::tvec4<__int64,0>::tvec4<__int64,0>
PUBLIC	??E?$tvec4@_J$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<__int64,0>::operator++
PUBLIC	??F?$tvec4@_J$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<__int64,0>::operator--
PUBLIC	??E?$tvec4@_J$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<__int64,0>::operator++
PUBLIC	??F?$tvec4@_J$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<__int64,0>::operator--
PUBLIC	?length@?$tvec4@N$0A@@glm@@SAHXZ		; glm::tvec4<double,0>::length
PUBLIC	??A?$tvec4@N$0A@@glm@@QAEAANH@Z			; glm::tvec4<double,0>::operator[]
PUBLIC	??A?$tvec4@N$0A@@glm@@QBEABNH@Z			; glm::tvec4<double,0>::operator[]
PUBLIC	??0?$tvec4@N$0A@@glm@@QAE@XZ			; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??0?$tvec4@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??0?$tvec4@N$0A@@glm@@QAE@N@Z			; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??0?$tvec4@N$0A@@glm@@QAE@NNNN@Z		; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??E?$tvec4@N$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<double,0>::operator++
PUBLIC	??F?$tvec4@N$0A@@glm@@QAEAAU01@XZ		; glm::tvec4<double,0>::operator--
PUBLIC	??E?$tvec4@N$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<double,0>::operator++
PUBLIC	??F?$tvec4@N$0A@@glm@@QAE?AU01@H@Z		; glm::tvec4<double,0>::operator--
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@XZ			; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@M@Z			; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABM000@Z		; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@0@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ; glm::tmat2x2<float,2>::tmat2x2<float,2>
PUBLIC	?length@?$tmat2x2@M$01@glm@@SAHXZ		; glm::tmat2x2<float,2>::length
PUBLIC	??A?$tmat2x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z	; glm::tmat2x2<float,2>::operator[]
PUBLIC	??A?$tmat2x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z	; glm::tmat2x2<float,2>::operator[]
PUBLIC	??E?$tmat2x2@M$01@glm@@QAEAAU01@XZ		; glm::tmat2x2<float,2>::operator++
PUBLIC	??F?$tmat2x2@M$01@glm@@QAEAAU01@XZ		; glm::tmat2x2<float,2>::operator--
PUBLIC	??E?$tmat2x2@M$01@glm@@QAE?AU01@H@Z		; glm::tmat2x2<float,2>::operator++
PUBLIC	??F?$tmat2x2@M$01@glm@@QAE?AU01@H@Z		; glm::tmat2x2<float,2>::operator--
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@XZ			; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@N@Z			; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABN000@Z		; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@0@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ; glm::tmat2x2<double,2>::tmat2x2<double,2>
PUBLIC	?length@?$tmat2x2@N$01@glm@@SAHXZ		; glm::tmat2x2<double,2>::length
PUBLIC	??A?$tmat2x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z	; glm::tmat2x2<double,2>::operator[]
PUBLIC	??A?$tmat2x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z	; glm::tmat2x2<double,2>::operator[]
PUBLIC	??E?$tmat2x2@N$01@glm@@QAEAAU01@XZ		; glm::tmat2x2<double,2>::operator++
PUBLIC	??F?$tmat2x2@N$01@glm@@QAEAAU01@XZ		; glm::tmat2x2<double,2>::operator--
PUBLIC	??E?$tmat2x2@N$01@glm@@QAE?AU01@H@Z		; glm::tmat2x2<double,2>::operator++
PUBLIC	??F?$tmat2x2@N$01@glm@@QAE?AU01@H@Z		; glm::tmat2x2<double,2>::operator--
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@XZ			; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@M@Z			; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABM000@Z		; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@0@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ; glm::tmat2x2<float,1>::tmat2x2<float,1>
PUBLIC	?length@?$tmat2x2@M$00@glm@@SAHXZ		; glm::tmat2x2<float,1>::length
PUBLIC	??A?$tmat2x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z	; glm::tmat2x2<float,1>::operator[]
PUBLIC	??A?$tmat2x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z	; glm::tmat2x2<float,1>::operator[]
PUBLIC	??E?$tmat2x2@M$00@glm@@QAEAAU01@XZ		; glm::tmat2x2<float,1>::operator++
PUBLIC	??F?$tmat2x2@M$00@glm@@QAEAAU01@XZ		; glm::tmat2x2<float,1>::operator--
PUBLIC	??E?$tmat2x2@M$00@glm@@QAE?AU01@H@Z		; glm::tmat2x2<float,1>::operator++
PUBLIC	??F?$tmat2x2@M$00@glm@@QAE?AU01@H@Z		; glm::tmat2x2<float,1>::operator--
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@XZ			; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@N@Z			; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABN000@Z		; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@0@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ; glm::tmat2x2<double,1>::tmat2x2<double,1>
PUBLIC	?length@?$tmat2x2@N$00@glm@@SAHXZ		; glm::tmat2x2<double,1>::length
PUBLIC	??A?$tmat2x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z	; glm::tmat2x2<double,1>::operator[]
PUBLIC	??A?$tmat2x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z	; glm::tmat2x2<double,1>::operator[]
PUBLIC	??E?$tmat2x2@N$00@glm@@QAEAAU01@XZ		; glm::tmat2x2<double,1>::operator++
PUBLIC	??F?$tmat2x2@N$00@glm@@QAEAAU01@XZ		; glm::tmat2x2<double,1>::operator--
PUBLIC	??E?$tmat2x2@N$00@glm@@QAE?AU01@H@Z		; glm::tmat2x2<double,1>::operator++
PUBLIC	??F?$tmat2x2@N$00@glm@@QAE?AU01@H@Z		; glm::tmat2x2<double,1>::operator--
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@XZ			; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@M@Z			; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABM000@Z		; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@0@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	?length@?$tmat2x2@M$0A@@glm@@SAHXZ		; glm::tmat2x2<float,0>::length
PUBLIC	??A?$tmat2x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
PUBLIC	??A?$tmat2x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
PUBLIC	??E?$tmat2x2@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x2<float,0>::operator++
PUBLIC	??F?$tmat2x2@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x2<float,0>::operator--
PUBLIC	??E?$tmat2x2@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x2<float,0>::operator++
PUBLIC	??F?$tmat2x2@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x2<float,0>::operator--
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@XZ			; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@N@Z			; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABN000@Z		; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@0@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	?length@?$tmat2x2@N$0A@@glm@@SAHXZ		; glm::tmat2x2<double,0>::length
PUBLIC	??A?$tmat2x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z ; glm::tmat2x2<double,0>::operator[]
PUBLIC	??A?$tmat2x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z ; glm::tmat2x2<double,0>::operator[]
PUBLIC	??E?$tmat2x2@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x2<double,0>::operator++
PUBLIC	??F?$tmat2x2@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x2<double,0>::operator--
PUBLIC	??E?$tmat2x2@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x2<double,0>::operator++
PUBLIC	??F?$tmat2x2@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x2<double,0>::operator--
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@XZ			; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@M@Z			; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@MMMMMM@Z		; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@0@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ; glm::tmat2x3<float,2>::tmat2x3<float,2>
PUBLIC	?length@?$tmat2x3@M$01@glm@@SAHXZ		; glm::tmat2x3<float,2>::length
PUBLIC	??A?$tmat2x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z	; glm::tmat2x3<float,2>::operator[]
PUBLIC	??A?$tmat2x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z	; glm::tmat2x3<float,2>::operator[]
PUBLIC	??E?$tmat2x3@M$01@glm@@QAEAAU01@XZ		; glm::tmat2x3<float,2>::operator++
PUBLIC	??F?$tmat2x3@M$01@glm@@QAEAAU01@XZ		; glm::tmat2x3<float,2>::operator--
PUBLIC	??E?$tmat2x3@M$01@glm@@QAE?AU01@H@Z		; glm::tmat2x3<float,2>::operator++
PUBLIC	??F?$tmat2x3@M$01@glm@@QAE?AU01@H@Z		; glm::tmat2x3<float,2>::operator--
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@XZ			; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@N@Z			; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@NNNNNN@Z		; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@0@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ; glm::tmat2x3<double,2>::tmat2x3<double,2>
PUBLIC	?length@?$tmat2x3@N$01@glm@@SAHXZ		; glm::tmat2x3<double,2>::length
PUBLIC	??A?$tmat2x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z	; glm::tmat2x3<double,2>::operator[]
PUBLIC	??A?$tmat2x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z	; glm::tmat2x3<double,2>::operator[]
PUBLIC	??E?$tmat2x3@N$01@glm@@QAEAAU01@XZ		; glm::tmat2x3<double,2>::operator++
PUBLIC	??F?$tmat2x3@N$01@glm@@QAEAAU01@XZ		; glm::tmat2x3<double,2>::operator--
PUBLIC	??E?$tmat2x3@N$01@glm@@QAE?AU01@H@Z		; glm::tmat2x3<double,2>::operator++
PUBLIC	??F?$tmat2x3@N$01@glm@@QAE?AU01@H@Z		; glm::tmat2x3<double,2>::operator--
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@XZ			; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@M@Z			; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@MMMMMM@Z		; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@0@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ; glm::tmat2x3<float,1>::tmat2x3<float,1>
PUBLIC	?length@?$tmat2x3@M$00@glm@@SAHXZ		; glm::tmat2x3<float,1>::length
PUBLIC	??A?$tmat2x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z	; glm::tmat2x3<float,1>::operator[]
PUBLIC	??A?$tmat2x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z	; glm::tmat2x3<float,1>::operator[]
PUBLIC	??E?$tmat2x3@M$00@glm@@QAEAAU01@XZ		; glm::tmat2x3<float,1>::operator++
PUBLIC	??F?$tmat2x3@M$00@glm@@QAEAAU01@XZ		; glm::tmat2x3<float,1>::operator--
PUBLIC	??E?$tmat2x3@M$00@glm@@QAE?AU01@H@Z		; glm::tmat2x3<float,1>::operator++
PUBLIC	??F?$tmat2x3@M$00@glm@@QAE?AU01@H@Z		; glm::tmat2x3<float,1>::operator--
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@XZ			; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@N@Z			; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@NNNNNN@Z		; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@0@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ; glm::tmat2x3<double,1>::tmat2x3<double,1>
PUBLIC	?length@?$tmat2x3@N$00@glm@@SAHXZ		; glm::tmat2x3<double,1>::length
PUBLIC	??A?$tmat2x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z	; glm::tmat2x3<double,1>::operator[]
PUBLIC	??A?$tmat2x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z	; glm::tmat2x3<double,1>::operator[]
PUBLIC	??E?$tmat2x3@N$00@glm@@QAEAAU01@XZ		; glm::tmat2x3<double,1>::operator++
PUBLIC	??F?$tmat2x3@N$00@glm@@QAEAAU01@XZ		; glm::tmat2x3<double,1>::operator--
PUBLIC	??E?$tmat2x3@N$00@glm@@QAE?AU01@H@Z		; glm::tmat2x3<double,1>::operator++
PUBLIC	??F?$tmat2x3@N$00@glm@@QAE?AU01@H@Z		; glm::tmat2x3<double,1>::operator--
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@XZ			; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@M@Z			; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@MMMMMM@Z		; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@0@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	?length@?$tmat2x3@M$0A@@glm@@SAHXZ		; glm::tmat2x3<float,0>::length
PUBLIC	??A?$tmat2x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
PUBLIC	??A?$tmat2x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
PUBLIC	??E?$tmat2x3@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x3<float,0>::operator++
PUBLIC	??F?$tmat2x3@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x3<float,0>::operator--
PUBLIC	??E?$tmat2x3@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x3<float,0>::operator++
PUBLIC	??F?$tmat2x3@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x3<float,0>::operator--
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@XZ			; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@N@Z			; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@NNNNNN@Z		; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@0@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	?length@?$tmat2x3@N$0A@@glm@@SAHXZ		; glm::tmat2x3<double,0>::length
PUBLIC	??A?$tmat2x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z ; glm::tmat2x3<double,0>::operator[]
PUBLIC	??A?$tmat2x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z ; glm::tmat2x3<double,0>::operator[]
PUBLIC	??E?$tmat2x3@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x3<double,0>::operator++
PUBLIC	??F?$tmat2x3@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x3<double,0>::operator--
PUBLIC	??E?$tmat2x3@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x3<double,0>::operator++
PUBLIC	??F?$tmat2x3@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x3<double,0>::operator--
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@XZ			; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@M@Z			; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@MMMMMMMM@Z		; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@0@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ; glm::tmat2x4<float,2>::tmat2x4<float,2>
PUBLIC	?length@?$tmat2x4@M$01@glm@@SAHXZ		; glm::tmat2x4<float,2>::length
PUBLIC	??A?$tmat2x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z	; glm::tmat2x4<float,2>::operator[]
PUBLIC	??A?$tmat2x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z	; glm::tmat2x4<float,2>::operator[]
PUBLIC	??E?$tmat2x4@M$01@glm@@QAEAAU01@XZ		; glm::tmat2x4<float,2>::operator++
PUBLIC	??F?$tmat2x4@M$01@glm@@QAEAAU01@XZ		; glm::tmat2x4<float,2>::operator--
PUBLIC	??E?$tmat2x4@M$01@glm@@QAE?AU01@H@Z		; glm::tmat2x4<float,2>::operator++
PUBLIC	??F?$tmat2x4@M$01@glm@@QAE?AU01@H@Z		; glm::tmat2x4<float,2>::operator--
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@XZ			; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@N@Z			; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@NNNNNNNN@Z		; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@0@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ; glm::tmat2x4<double,2>::tmat2x4<double,2>
PUBLIC	?length@?$tmat2x4@N$01@glm@@SAHXZ		; glm::tmat2x4<double,2>::length
PUBLIC	??A?$tmat2x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z	; glm::tmat2x4<double,2>::operator[]
PUBLIC	??A?$tmat2x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z	; glm::tmat2x4<double,2>::operator[]
PUBLIC	??E?$tmat2x4@N$01@glm@@QAEAAU01@XZ		; glm::tmat2x4<double,2>::operator++
PUBLIC	??F?$tmat2x4@N$01@glm@@QAEAAU01@XZ		; glm::tmat2x4<double,2>::operator--
PUBLIC	??E?$tmat2x4@N$01@glm@@QAE?AU01@H@Z		; glm::tmat2x4<double,2>::operator++
PUBLIC	??F?$tmat2x4@N$01@glm@@QAE?AU01@H@Z		; glm::tmat2x4<double,2>::operator--
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@XZ			; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@M@Z			; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@MMMMMMMM@Z		; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@0@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ; glm::tmat2x4<float,1>::tmat2x4<float,1>
PUBLIC	?length@?$tmat2x4@M$00@glm@@SAHXZ		; glm::tmat2x4<float,1>::length
PUBLIC	??A?$tmat2x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z	; glm::tmat2x4<float,1>::operator[]
PUBLIC	??A?$tmat2x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z	; glm::tmat2x4<float,1>::operator[]
PUBLIC	??E?$tmat2x4@M$00@glm@@QAEAAU01@XZ		; glm::tmat2x4<float,1>::operator++
PUBLIC	??F?$tmat2x4@M$00@glm@@QAEAAU01@XZ		; glm::tmat2x4<float,1>::operator--
PUBLIC	??E?$tmat2x4@M$00@glm@@QAE?AU01@H@Z		; glm::tmat2x4<float,1>::operator++
PUBLIC	??F?$tmat2x4@M$00@glm@@QAE?AU01@H@Z		; glm::tmat2x4<float,1>::operator--
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@XZ			; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@N@Z			; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@NNNNNNNN@Z		; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@0@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ; glm::tmat2x4<double,1>::tmat2x4<double,1>
PUBLIC	?length@?$tmat2x4@N$00@glm@@SAHXZ		; glm::tmat2x4<double,1>::length
PUBLIC	??A?$tmat2x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z	; glm::tmat2x4<double,1>::operator[]
PUBLIC	??A?$tmat2x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z	; glm::tmat2x4<double,1>::operator[]
PUBLIC	??E?$tmat2x4@N$00@glm@@QAEAAU01@XZ		; glm::tmat2x4<double,1>::operator++
PUBLIC	??F?$tmat2x4@N$00@glm@@QAEAAU01@XZ		; glm::tmat2x4<double,1>::operator--
PUBLIC	??E?$tmat2x4@N$00@glm@@QAE?AU01@H@Z		; glm::tmat2x4<double,1>::operator++
PUBLIC	??F?$tmat2x4@N$00@glm@@QAE?AU01@H@Z		; glm::tmat2x4<double,1>::operator--
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@XZ			; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@M@Z			; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@MMMMMMMM@Z		; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@0@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	?length@?$tmat2x4@M$0A@@glm@@SAHXZ		; glm::tmat2x4<float,0>::length
PUBLIC	??A?$tmat2x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
PUBLIC	??A?$tmat2x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
PUBLIC	??E?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x4<float,0>::operator++
PUBLIC	??F?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x4<float,0>::operator--
PUBLIC	??E?$tmat2x4@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x4<float,0>::operator++
PUBLIC	??F?$tmat2x4@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x4<float,0>::operator--
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@XZ			; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@N@Z			; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@NNNNNNNN@Z		; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@0@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	?length@?$tmat2x4@N$0A@@glm@@SAHXZ		; glm::tmat2x4<double,0>::length
PUBLIC	??A?$tmat2x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z ; glm::tmat2x4<double,0>::operator[]
PUBLIC	??A?$tmat2x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z ; glm::tmat2x4<double,0>::operator[]
PUBLIC	??E?$tmat2x4@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x4<double,0>::operator++
PUBLIC	??F?$tmat2x4@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat2x4<double,0>::operator--
PUBLIC	??E?$tmat2x4@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x4<double,0>::operator++
PUBLIC	??F?$tmat2x4@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat2x4<double,0>::operator--
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@XZ			; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@M@Z			; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@MMMMMM@Z		; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@00@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ; glm::tmat3x2<float,2>::tmat3x2<float,2>
PUBLIC	?length@?$tmat3x2@M$01@glm@@SAHXZ		; glm::tmat3x2<float,2>::length
PUBLIC	??A?$tmat3x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z	; glm::tmat3x2<float,2>::operator[]
PUBLIC	??A?$tmat3x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z	; glm::tmat3x2<float,2>::operator[]
PUBLIC	??E?$tmat3x2@M$01@glm@@QAEAAU01@XZ		; glm::tmat3x2<float,2>::operator++
PUBLIC	??F?$tmat3x2@M$01@glm@@QAEAAU01@XZ		; glm::tmat3x2<float,2>::operator--
PUBLIC	??E?$tmat3x2@M$01@glm@@QAE?AU01@H@Z		; glm::tmat3x2<float,2>::operator++
PUBLIC	??F?$tmat3x2@M$01@glm@@QAE?AU01@H@Z		; glm::tmat3x2<float,2>::operator--
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@XZ			; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@N@Z			; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@NNNNNN@Z		; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@00@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ; glm::tmat3x2<double,2>::tmat3x2<double,2>
PUBLIC	?length@?$tmat3x2@N$01@glm@@SAHXZ		; glm::tmat3x2<double,2>::length
PUBLIC	??A?$tmat3x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z	; glm::tmat3x2<double,2>::operator[]
PUBLIC	??A?$tmat3x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z	; glm::tmat3x2<double,2>::operator[]
PUBLIC	??E?$tmat3x2@N$01@glm@@QAEAAU01@XZ		; glm::tmat3x2<double,2>::operator++
PUBLIC	??F?$tmat3x2@N$01@glm@@QAEAAU01@XZ		; glm::tmat3x2<double,2>::operator--
PUBLIC	??E?$tmat3x2@N$01@glm@@QAE?AU01@H@Z		; glm::tmat3x2<double,2>::operator++
PUBLIC	??F?$tmat3x2@N$01@glm@@QAE?AU01@H@Z		; glm::tmat3x2<double,2>::operator--
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@XZ			; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@M@Z			; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@MMMMMM@Z		; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@00@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ; glm::tmat3x2<float,1>::tmat3x2<float,1>
PUBLIC	?length@?$tmat3x2@M$00@glm@@SAHXZ		; glm::tmat3x2<float,1>::length
PUBLIC	??A?$tmat3x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z	; glm::tmat3x2<float,1>::operator[]
PUBLIC	??A?$tmat3x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z	; glm::tmat3x2<float,1>::operator[]
PUBLIC	??E?$tmat3x2@M$00@glm@@QAEAAU01@XZ		; glm::tmat3x2<float,1>::operator++
PUBLIC	??F?$tmat3x2@M$00@glm@@QAEAAU01@XZ		; glm::tmat3x2<float,1>::operator--
PUBLIC	??E?$tmat3x2@M$00@glm@@QAE?AU01@H@Z		; glm::tmat3x2<float,1>::operator++
PUBLIC	??F?$tmat3x2@M$00@glm@@QAE?AU01@H@Z		; glm::tmat3x2<float,1>::operator--
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@XZ			; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@N@Z			; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@NNNNNN@Z		; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@00@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ; glm::tmat3x2<double,1>::tmat3x2<double,1>
PUBLIC	?length@?$tmat3x2@N$00@glm@@SAHXZ		; glm::tmat3x2<double,1>::length
PUBLIC	??A?$tmat3x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z	; glm::tmat3x2<double,1>::operator[]
PUBLIC	??A?$tmat3x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z	; glm::tmat3x2<double,1>::operator[]
PUBLIC	??E?$tmat3x2@N$00@glm@@QAEAAU01@XZ		; glm::tmat3x2<double,1>::operator++
PUBLIC	??F?$tmat3x2@N$00@glm@@QAEAAU01@XZ		; glm::tmat3x2<double,1>::operator--
PUBLIC	??E?$tmat3x2@N$00@glm@@QAE?AU01@H@Z		; glm::tmat3x2<double,1>::operator++
PUBLIC	??F?$tmat3x2@N$00@glm@@QAE?AU01@H@Z		; glm::tmat3x2<double,1>::operator--
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@XZ			; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@M@Z			; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@MMMMMM@Z		; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@00@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	?length@?$tmat3x2@M$0A@@glm@@SAHXZ		; glm::tmat3x2<float,0>::length
PUBLIC	??A?$tmat3x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
PUBLIC	??A?$tmat3x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
PUBLIC	??E?$tmat3x2@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x2<float,0>::operator++
PUBLIC	??F?$tmat3x2@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x2<float,0>::operator--
PUBLIC	??E?$tmat3x2@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x2<float,0>::operator++
PUBLIC	??F?$tmat3x2@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x2<float,0>::operator--
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@XZ			; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@N@Z			; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@NNNNNN@Z		; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@00@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	?length@?$tmat3x2@N$0A@@glm@@SAHXZ		; glm::tmat3x2<double,0>::length
PUBLIC	??A?$tmat3x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z ; glm::tmat3x2<double,0>::operator[]
PUBLIC	??A?$tmat3x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z ; glm::tmat3x2<double,0>::operator[]
PUBLIC	??E?$tmat3x2@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x2<double,0>::operator++
PUBLIC	??F?$tmat3x2@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x2<double,0>::operator--
PUBLIC	??E?$tmat3x2@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x2<double,0>::operator++
PUBLIC	??F?$tmat3x2@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x2<double,0>::operator--
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@XZ			; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@M@Z			; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@MMMMMMMMM@Z		; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@00@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
PUBLIC	?length@?$tmat3x3@M$01@glm@@SAHXZ		; glm::tmat3x3<float,2>::length
PUBLIC	??A?$tmat3x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z	; glm::tmat3x3<float,2>::operator[]
PUBLIC	??A?$tmat3x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z	; glm::tmat3x3<float,2>::operator[]
PUBLIC	??E?$tmat3x3@M$01@glm@@QAEAAU01@XZ		; glm::tmat3x3<float,2>::operator++
PUBLIC	??F?$tmat3x3@M$01@glm@@QAEAAU01@XZ		; glm::tmat3x3<float,2>::operator--
PUBLIC	??E?$tmat3x3@M$01@glm@@QAE?AU01@H@Z		; glm::tmat3x3<float,2>::operator++
PUBLIC	??F?$tmat3x3@M$01@glm@@QAE?AU01@H@Z		; glm::tmat3x3<float,2>::operator--
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@XZ			; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@N@Z			; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@NNNNNNNNN@Z		; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@00@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ; glm::tmat3x3<double,2>::tmat3x3<double,2>
PUBLIC	?length@?$tmat3x3@N$01@glm@@SAHXZ		; glm::tmat3x3<double,2>::length
PUBLIC	??A?$tmat3x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z	; glm::tmat3x3<double,2>::operator[]
PUBLIC	??A?$tmat3x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z	; glm::tmat3x3<double,2>::operator[]
PUBLIC	??E?$tmat3x3@N$01@glm@@QAEAAU01@XZ		; glm::tmat3x3<double,2>::operator++
PUBLIC	??F?$tmat3x3@N$01@glm@@QAEAAU01@XZ		; glm::tmat3x3<double,2>::operator--
PUBLIC	??E?$tmat3x3@N$01@glm@@QAE?AU01@H@Z		; glm::tmat3x3<double,2>::operator++
PUBLIC	??F?$tmat3x3@N$01@glm@@QAE?AU01@H@Z		; glm::tmat3x3<double,2>::operator--
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@XZ			; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@M@Z			; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@MMMMMMMMM@Z		; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@00@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
PUBLIC	?length@?$tmat3x3@M$00@glm@@SAHXZ		; glm::tmat3x3<float,1>::length
PUBLIC	??A?$tmat3x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z	; glm::tmat3x3<float,1>::operator[]
PUBLIC	??A?$tmat3x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z	; glm::tmat3x3<float,1>::operator[]
PUBLIC	??E?$tmat3x3@M$00@glm@@QAEAAU01@XZ		; glm::tmat3x3<float,1>::operator++
PUBLIC	??F?$tmat3x3@M$00@glm@@QAEAAU01@XZ		; glm::tmat3x3<float,1>::operator--
PUBLIC	??E?$tmat3x3@M$00@glm@@QAE?AU01@H@Z		; glm::tmat3x3<float,1>::operator++
PUBLIC	??F?$tmat3x3@M$00@glm@@QAE?AU01@H@Z		; glm::tmat3x3<float,1>::operator--
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@XZ			; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@N@Z			; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@NNNNNNNNN@Z		; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@00@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ; glm::tmat3x3<double,1>::tmat3x3<double,1>
PUBLIC	?length@?$tmat3x3@N$00@glm@@SAHXZ		; glm::tmat3x3<double,1>::length
PUBLIC	??A?$tmat3x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z	; glm::tmat3x3<double,1>::operator[]
PUBLIC	??A?$tmat3x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z	; glm::tmat3x3<double,1>::operator[]
PUBLIC	??E?$tmat3x3@N$00@glm@@QAEAAU01@XZ		; glm::tmat3x3<double,1>::operator++
PUBLIC	??F?$tmat3x3@N$00@glm@@QAEAAU01@XZ		; glm::tmat3x3<double,1>::operator--
PUBLIC	??E?$tmat3x3@N$00@glm@@QAE?AU01@H@Z		; glm::tmat3x3<double,1>::operator++
PUBLIC	??F?$tmat3x3@N$00@glm@@QAE?AU01@H@Z		; glm::tmat3x3<double,1>::operator--
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@XZ			; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@M@Z			; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@MMMMMMMMM@Z		; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	?length@?$tmat3x3@M$0A@@glm@@SAHXZ		; glm::tmat3x3<float,0>::length
PUBLIC	??A?$tmat3x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
PUBLIC	??A?$tmat3x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
PUBLIC	??E?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x3<float,0>::operator++
PUBLIC	??F?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x3<float,0>::operator--
PUBLIC	??E?$tmat3x3@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x3<float,0>::operator++
PUBLIC	??F?$tmat3x3@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x3<float,0>::operator--
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@XZ			; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@N@Z			; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@NNNNNNNNN@Z		; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@00@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	?length@?$tmat3x3@N$0A@@glm@@SAHXZ		; glm::tmat3x3<double,0>::length
PUBLIC	??A?$tmat3x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
PUBLIC	??A?$tmat3x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
PUBLIC	??E?$tmat3x3@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x3<double,0>::operator++
PUBLIC	??F?$tmat3x3@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x3<double,0>::operator--
PUBLIC	??E?$tmat3x3@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x3<double,0>::operator++
PUBLIC	??F?$tmat3x3@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x3<double,0>::operator--
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@XZ			; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@M@Z			; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@MMMMMMMMMMMM@Z	; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@00@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ; glm::tmat3x4<float,2>::tmat3x4<float,2>
PUBLIC	?length@?$tmat3x4@M$01@glm@@SAHXZ		; glm::tmat3x4<float,2>::length
PUBLIC	??A?$tmat3x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z	; glm::tmat3x4<float,2>::operator[]
PUBLIC	??A?$tmat3x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z	; glm::tmat3x4<float,2>::operator[]
PUBLIC	??E?$tmat3x4@M$01@glm@@QAEAAU01@XZ		; glm::tmat3x4<float,2>::operator++
PUBLIC	??F?$tmat3x4@M$01@glm@@QAEAAU01@XZ		; glm::tmat3x4<float,2>::operator--
PUBLIC	??E?$tmat3x4@M$01@glm@@QAE?AU01@H@Z		; glm::tmat3x4<float,2>::operator++
PUBLIC	??F?$tmat3x4@M$01@glm@@QAE?AU01@H@Z		; glm::tmat3x4<float,2>::operator--
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@XZ			; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@N@Z			; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@NNNNNNNNNNNN@Z	; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@00@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ; glm::tmat3x4<double,2>::tmat3x4<double,2>
PUBLIC	?length@?$tmat3x4@N$01@glm@@SAHXZ		; glm::tmat3x4<double,2>::length
PUBLIC	??A?$tmat3x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z	; glm::tmat3x4<double,2>::operator[]
PUBLIC	??A?$tmat3x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z	; glm::tmat3x4<double,2>::operator[]
PUBLIC	??E?$tmat3x4@N$01@glm@@QAEAAU01@XZ		; glm::tmat3x4<double,2>::operator++
PUBLIC	??F?$tmat3x4@N$01@glm@@QAEAAU01@XZ		; glm::tmat3x4<double,2>::operator--
PUBLIC	??E?$tmat3x4@N$01@glm@@QAE?AU01@H@Z		; glm::tmat3x4<double,2>::operator++
PUBLIC	??F?$tmat3x4@N$01@glm@@QAE?AU01@H@Z		; glm::tmat3x4<double,2>::operator--
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@XZ			; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@M@Z			; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@MMMMMMMMMMMM@Z	; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@00@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ; glm::tmat3x4<float,1>::tmat3x4<float,1>
PUBLIC	?length@?$tmat3x4@M$00@glm@@SAHXZ		; glm::tmat3x4<float,1>::length
PUBLIC	??A?$tmat3x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z	; glm::tmat3x4<float,1>::operator[]
PUBLIC	??A?$tmat3x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z	; glm::tmat3x4<float,1>::operator[]
PUBLIC	??E?$tmat3x4@M$00@glm@@QAEAAU01@XZ		; glm::tmat3x4<float,1>::operator++
PUBLIC	??F?$tmat3x4@M$00@glm@@QAEAAU01@XZ		; glm::tmat3x4<float,1>::operator--
PUBLIC	??E?$tmat3x4@M$00@glm@@QAE?AU01@H@Z		; glm::tmat3x4<float,1>::operator++
PUBLIC	??F?$tmat3x4@M$00@glm@@QAE?AU01@H@Z		; glm::tmat3x4<float,1>::operator--
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@XZ			; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@N@Z			; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@NNNNNNNNNNNN@Z	; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@00@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ; glm::tmat3x4<double,1>::tmat3x4<double,1>
PUBLIC	?length@?$tmat3x4@N$00@glm@@SAHXZ		; glm::tmat3x4<double,1>::length
PUBLIC	??A?$tmat3x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z	; glm::tmat3x4<double,1>::operator[]
PUBLIC	??A?$tmat3x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z	; glm::tmat3x4<double,1>::operator[]
PUBLIC	??E?$tmat3x4@N$00@glm@@QAEAAU01@XZ		; glm::tmat3x4<double,1>::operator++
PUBLIC	??F?$tmat3x4@N$00@glm@@QAEAAU01@XZ		; glm::tmat3x4<double,1>::operator--
PUBLIC	??E?$tmat3x4@N$00@glm@@QAE?AU01@H@Z		; glm::tmat3x4<double,1>::operator++
PUBLIC	??F?$tmat3x4@N$00@glm@@QAE?AU01@H@Z		; glm::tmat3x4<double,1>::operator--
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@XZ			; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@M@Z			; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@MMMMMMMMMMMM@Z	; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@00@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	?length@?$tmat3x4@M$0A@@glm@@SAHXZ		; glm::tmat3x4<float,0>::length
PUBLIC	??A?$tmat3x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
PUBLIC	??A?$tmat3x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
PUBLIC	??E?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x4<float,0>::operator++
PUBLIC	??F?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x4<float,0>::operator--
PUBLIC	??E?$tmat3x4@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x4<float,0>::operator++
PUBLIC	??F?$tmat3x4@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x4<float,0>::operator--
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@XZ			; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@N@Z			; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@NNNNNNNNNNNN@Z	; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@00@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	?length@?$tmat3x4@N$0A@@glm@@SAHXZ		; glm::tmat3x4<double,0>::length
PUBLIC	??A?$tmat3x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z ; glm::tmat3x4<double,0>::operator[]
PUBLIC	??A?$tmat3x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z ; glm::tmat3x4<double,0>::operator[]
PUBLIC	??E?$tmat3x4@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x4<double,0>::operator++
PUBLIC	??F?$tmat3x4@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat3x4<double,0>::operator--
PUBLIC	??E?$tmat3x4@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x4<double,0>::operator++
PUBLIC	??F?$tmat3x4@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat3x4<double,0>::operator--
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@XZ			; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@M@Z			; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@MMMMMMMM@Z		; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@000@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tmat4x2<float,2>::tmat4x2<float,2>
PUBLIC	?length@?$tmat4x2@M$01@glm@@SAHXZ		; glm::tmat4x2<float,2>::length
PUBLIC	??A?$tmat4x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z	; glm::tmat4x2<float,2>::operator[]
PUBLIC	??A?$tmat4x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z	; glm::tmat4x2<float,2>::operator[]
PUBLIC	??E?$tmat4x2@M$01@glm@@QAEAAU01@XZ		; glm::tmat4x2<float,2>::operator++
PUBLIC	??F?$tmat4x2@M$01@glm@@QAEAAU01@XZ		; glm::tmat4x2<float,2>::operator--
PUBLIC	??E?$tmat4x2@M$01@glm@@QAE?AU01@H@Z		; glm::tmat4x2<float,2>::operator++
PUBLIC	??F?$tmat4x2@M$01@glm@@QAE?AU01@H@Z		; glm::tmat4x2<float,2>::operator--
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@XZ			; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@N@Z			; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@NNNNNNNN@Z		; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@000@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tmat4x2<double,2>::tmat4x2<double,2>
PUBLIC	?length@?$tmat4x2@N$01@glm@@SAHXZ		; glm::tmat4x2<double,2>::length
PUBLIC	??A?$tmat4x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z	; glm::tmat4x2<double,2>::operator[]
PUBLIC	??A?$tmat4x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z	; glm::tmat4x2<double,2>::operator[]
PUBLIC	??E?$tmat4x2@N$01@glm@@QAEAAU01@XZ		; glm::tmat4x2<double,2>::operator++
PUBLIC	??F?$tmat4x2@N$01@glm@@QAEAAU01@XZ		; glm::tmat4x2<double,2>::operator--
PUBLIC	??E?$tmat4x2@N$01@glm@@QAE?AU01@H@Z		; glm::tmat4x2<double,2>::operator++
PUBLIC	??F?$tmat4x2@N$01@glm@@QAE?AU01@H@Z		; glm::tmat4x2<double,2>::operator--
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@XZ			; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@M@Z			; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@MMMMMMMM@Z		; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@000@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tmat4x2<float,1>::tmat4x2<float,1>
PUBLIC	?length@?$tmat4x2@M$00@glm@@SAHXZ		; glm::tmat4x2<float,1>::length
PUBLIC	??A?$tmat4x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z	; glm::tmat4x2<float,1>::operator[]
PUBLIC	??A?$tmat4x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z	; glm::tmat4x2<float,1>::operator[]
PUBLIC	??E?$tmat4x2@M$00@glm@@QAEAAU01@XZ		; glm::tmat4x2<float,1>::operator++
PUBLIC	??F?$tmat4x2@M$00@glm@@QAEAAU01@XZ		; glm::tmat4x2<float,1>::operator--
PUBLIC	??E?$tmat4x2@M$00@glm@@QAE?AU01@H@Z		; glm::tmat4x2<float,1>::operator++
PUBLIC	??F?$tmat4x2@M$00@glm@@QAE?AU01@H@Z		; glm::tmat4x2<float,1>::operator--
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@XZ			; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@N@Z			; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@NNNNNNNN@Z		; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@000@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tmat4x2<double,1>::tmat4x2<double,1>
PUBLIC	?length@?$tmat4x2@N$00@glm@@SAHXZ		; glm::tmat4x2<double,1>::length
PUBLIC	??A?$tmat4x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z	; glm::tmat4x2<double,1>::operator[]
PUBLIC	??A?$tmat4x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z	; glm::tmat4x2<double,1>::operator[]
PUBLIC	??E?$tmat4x2@N$00@glm@@QAEAAU01@XZ		; glm::tmat4x2<double,1>::operator++
PUBLIC	??F?$tmat4x2@N$00@glm@@QAEAAU01@XZ		; glm::tmat4x2<double,1>::operator--
PUBLIC	??E?$tmat4x2@N$00@glm@@QAE?AU01@H@Z		; glm::tmat4x2<double,1>::operator++
PUBLIC	??F?$tmat4x2@N$00@glm@@QAE?AU01@H@Z		; glm::tmat4x2<double,1>::operator--
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@XZ			; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@M@Z			; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@MMMMMMMM@Z		; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@000@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	?length@?$tmat4x2@M$0A@@glm@@SAHXZ		; glm::tmat4x2<float,0>::length
PUBLIC	??A?$tmat4x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
PUBLIC	??A?$tmat4x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
PUBLIC	??E?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x2<float,0>::operator++
PUBLIC	??F?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x2<float,0>::operator--
PUBLIC	??E?$tmat4x2@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x2<float,0>::operator++
PUBLIC	??F?$tmat4x2@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x2<float,0>::operator--
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@XZ			; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@N@Z			; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@NNNNNNNN@Z		; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@000@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	?length@?$tmat4x2@N$0A@@glm@@SAHXZ		; glm::tmat4x2<double,0>::length
PUBLIC	??A?$tmat4x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z ; glm::tmat4x2<double,0>::operator[]
PUBLIC	??A?$tmat4x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z ; glm::tmat4x2<double,0>::operator[]
PUBLIC	??E?$tmat4x2@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x2<double,0>::operator++
PUBLIC	??F?$tmat4x2@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x2<double,0>::operator--
PUBLIC	??E?$tmat4x2@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x2<double,0>::operator++
PUBLIC	??F?$tmat4x2@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x2<double,0>::operator--
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@XZ			; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABM@Z		; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABM00000000000@Z	; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@000@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tmat4x3<float,2>::tmat4x3<float,2>
PUBLIC	?length@?$tmat4x3@M$01@glm@@SAHXZ		; glm::tmat4x3<float,2>::length
PUBLIC	??A?$tmat4x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z	; glm::tmat4x3<float,2>::operator[]
PUBLIC	??A?$tmat4x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z	; glm::tmat4x3<float,2>::operator[]
PUBLIC	??E?$tmat4x3@M$01@glm@@QAEAAU01@XZ		; glm::tmat4x3<float,2>::operator++
PUBLIC	??F?$tmat4x3@M$01@glm@@QAEAAU01@XZ		; glm::tmat4x3<float,2>::operator--
PUBLIC	??E?$tmat4x3@M$01@glm@@QAE?AU01@H@Z		; glm::tmat4x3<float,2>::operator++
PUBLIC	??F?$tmat4x3@M$01@glm@@QAE?AU01@H@Z		; glm::tmat4x3<float,2>::operator--
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@XZ			; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABN@Z		; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABN00000000000@Z	; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@000@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tmat4x3<double,2>::tmat4x3<double,2>
PUBLIC	?length@?$tmat4x3@N$01@glm@@SAHXZ		; glm::tmat4x3<double,2>::length
PUBLIC	??A?$tmat4x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z	; glm::tmat4x3<double,2>::operator[]
PUBLIC	??A?$tmat4x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z	; glm::tmat4x3<double,2>::operator[]
PUBLIC	??E?$tmat4x3@N$01@glm@@QAEAAU01@XZ		; glm::tmat4x3<double,2>::operator++
PUBLIC	??F?$tmat4x3@N$01@glm@@QAEAAU01@XZ		; glm::tmat4x3<double,2>::operator--
PUBLIC	??E?$tmat4x3@N$01@glm@@QAE?AU01@H@Z		; glm::tmat4x3<double,2>::operator++
PUBLIC	??F?$tmat4x3@N$01@glm@@QAE?AU01@H@Z		; glm::tmat4x3<double,2>::operator--
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@XZ			; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABM@Z		; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABM00000000000@Z	; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@000@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tmat4x3<float,1>::tmat4x3<float,1>
PUBLIC	?length@?$tmat4x3@M$00@glm@@SAHXZ		; glm::tmat4x3<float,1>::length
PUBLIC	??A?$tmat4x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z	; glm::tmat4x3<float,1>::operator[]
PUBLIC	??A?$tmat4x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z	; glm::tmat4x3<float,1>::operator[]
PUBLIC	??E?$tmat4x3@M$00@glm@@QAEAAU01@XZ		; glm::tmat4x3<float,1>::operator++
PUBLIC	??F?$tmat4x3@M$00@glm@@QAEAAU01@XZ		; glm::tmat4x3<float,1>::operator--
PUBLIC	??E?$tmat4x3@M$00@glm@@QAE?AU01@H@Z		; glm::tmat4x3<float,1>::operator++
PUBLIC	??F?$tmat4x3@M$00@glm@@QAE?AU01@H@Z		; glm::tmat4x3<float,1>::operator--
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@XZ			; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABN@Z		; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABN00000000000@Z	; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@000@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tmat4x3<double,1>::tmat4x3<double,1>
PUBLIC	?length@?$tmat4x3@N$00@glm@@SAHXZ		; glm::tmat4x3<double,1>::length
PUBLIC	??A?$tmat4x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z	; glm::tmat4x3<double,1>::operator[]
PUBLIC	??A?$tmat4x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z	; glm::tmat4x3<double,1>::operator[]
PUBLIC	??E?$tmat4x3@N$00@glm@@QAEAAU01@XZ		; glm::tmat4x3<double,1>::operator++
PUBLIC	??F?$tmat4x3@N$00@glm@@QAEAAU01@XZ		; glm::tmat4x3<double,1>::operator--
PUBLIC	??E?$tmat4x3@N$00@glm@@QAE?AU01@H@Z		; glm::tmat4x3<double,1>::operator++
PUBLIC	??F?$tmat4x3@N$00@glm@@QAE?AU01@H@Z		; glm::tmat4x3<double,1>::operator--
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@XZ			; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABM@Z		; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABM00000000000@Z	; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@000@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	?length@?$tmat4x3@M$0A@@glm@@SAHXZ		; glm::tmat4x3<float,0>::length
PUBLIC	??A?$tmat4x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
PUBLIC	??A?$tmat4x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
PUBLIC	??E?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x3<float,0>::operator++
PUBLIC	??F?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x3<float,0>::operator--
PUBLIC	??E?$tmat4x3@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x3<float,0>::operator++
PUBLIC	??F?$tmat4x3@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x3<float,0>::operator--
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@XZ			; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABN@Z		; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABN00000000000@Z	; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@000@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	?length@?$tmat4x3@N$0A@@glm@@SAHXZ		; glm::tmat4x3<double,0>::length
PUBLIC	??A?$tmat4x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z ; glm::tmat4x3<double,0>::operator[]
PUBLIC	??A?$tmat4x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z ; glm::tmat4x3<double,0>::operator[]
PUBLIC	??E?$tmat4x3@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x3<double,0>::operator++
PUBLIC	??F?$tmat4x3@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x3<double,0>::operator--
PUBLIC	??E?$tmat4x3@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x3<double,0>::operator++
PUBLIC	??F?$tmat4x3@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x3<double,0>::operator--
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@XZ			; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABM@Z		; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABM000000000000000@Z	; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@000@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	?length@?$tmat4x4@M$01@glm@@SAHXZ		; glm::tmat4x4<float,2>::length
PUBLIC	??A?$tmat4x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z	; glm::tmat4x4<float,2>::operator[]
PUBLIC	??A?$tmat4x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z	; glm::tmat4x4<float,2>::operator[]
PUBLIC	??E?$tmat4x4@M$01@glm@@QAEAAU01@XZ		; glm::tmat4x4<float,2>::operator++
PUBLIC	??F?$tmat4x4@M$01@glm@@QAEAAU01@XZ		; glm::tmat4x4<float,2>::operator--
PUBLIC	??E?$tmat4x4@M$01@glm@@QAE?AU01@H@Z		; glm::tmat4x4<float,2>::operator++
PUBLIC	??F?$tmat4x4@M$01@glm@@QAE?AU01@H@Z		; glm::tmat4x4<float,2>::operator--
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@XZ			; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABN@Z		; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABN000000000000000@Z	; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@000@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ; glm::tmat4x4<double,2>::tmat4x4<double,2>
PUBLIC	?length@?$tmat4x4@N$01@glm@@SAHXZ		; glm::tmat4x4<double,2>::length
PUBLIC	??A?$tmat4x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z	; glm::tmat4x4<double,2>::operator[]
PUBLIC	??A?$tmat4x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z	; glm::tmat4x4<double,2>::operator[]
PUBLIC	??E?$tmat4x4@N$01@glm@@QAEAAU01@XZ		; glm::tmat4x4<double,2>::operator++
PUBLIC	??F?$tmat4x4@N$01@glm@@QAEAAU01@XZ		; glm::tmat4x4<double,2>::operator--
PUBLIC	??E?$tmat4x4@N$01@glm@@QAE?AU01@H@Z		; glm::tmat4x4<double,2>::operator++
PUBLIC	??F?$tmat4x4@N$01@glm@@QAE?AU01@H@Z		; glm::tmat4x4<double,2>::operator--
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@XZ			; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABM@Z		; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABM000000000000000@Z	; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@000@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	?length@?$tmat4x4@M$00@glm@@SAHXZ		; glm::tmat4x4<float,1>::length
PUBLIC	??A?$tmat4x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z	; glm::tmat4x4<float,1>::operator[]
PUBLIC	??A?$tmat4x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z	; glm::tmat4x4<float,1>::operator[]
PUBLIC	??E?$tmat4x4@M$00@glm@@QAEAAU01@XZ		; glm::tmat4x4<float,1>::operator++
PUBLIC	??F?$tmat4x4@M$00@glm@@QAEAAU01@XZ		; glm::tmat4x4<float,1>::operator--
PUBLIC	??E?$tmat4x4@M$00@glm@@QAE?AU01@H@Z		; glm::tmat4x4<float,1>::operator++
PUBLIC	??F?$tmat4x4@M$00@glm@@QAE?AU01@H@Z		; glm::tmat4x4<float,1>::operator--
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@XZ			; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABN@Z		; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABN000000000000000@Z	; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@000@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ; glm::tmat4x4<double,1>::tmat4x4<double,1>
PUBLIC	?length@?$tmat4x4@N$00@glm@@SAHXZ		; glm::tmat4x4<double,1>::length
PUBLIC	??A?$tmat4x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z	; glm::tmat4x4<double,1>::operator[]
PUBLIC	??A?$tmat4x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z	; glm::tmat4x4<double,1>::operator[]
PUBLIC	??E?$tmat4x4@N$00@glm@@QAEAAU01@XZ		; glm::tmat4x4<double,1>::operator++
PUBLIC	??F?$tmat4x4@N$00@glm@@QAEAAU01@XZ		; glm::tmat4x4<double,1>::operator--
PUBLIC	??E?$tmat4x4@N$00@glm@@QAE?AU01@H@Z		; glm::tmat4x4<double,1>::operator++
PUBLIC	??F?$tmat4x4@N$00@glm@@QAE?AU01@H@Z		; glm::tmat4x4<double,1>::operator--
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@XZ			; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABM@Z		; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABM000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	?length@?$tmat4x4@M$0A@@glm@@SAHXZ		; glm::tmat4x4<float,0>::length
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??E?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x4<float,0>::operator++
PUBLIC	??F?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x4<float,0>::operator--
PUBLIC	??E?$tmat4x4@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x4<float,0>::operator++
PUBLIC	??F?$tmat4x4@M$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x4<float,0>::operator--
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@XZ			; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABN@Z		; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABN000000000000000@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@000@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	?length@?$tmat4x4@N$0A@@glm@@SAHXZ		; glm::tmat4x4<double,0>::length
PUBLIC	??A?$tmat4x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
PUBLIC	??A?$tmat4x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
PUBLIC	??E?$tmat4x4@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x4<double,0>::operator++
PUBLIC	??F?$tmat4x4@N$0A@@glm@@QAEAAU01@XZ		; glm::tmat4x4<double,0>::operator--
PUBLIC	??E?$tmat4x4@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x4<double,0>::operator++
PUBLIC	??F?$tmat4x4@N$0A@@glm@@QAE?AU01@H@Z		; glm::tmat4x4<double,0>::operator--
PUBLIC	?length@?$tquat@M$01@glm@@SAHXZ			; glm::tquat<float,2>::length
PUBLIC	??A?$tquat@M$01@glm@@QAEAAMH@Z			; glm::tquat<float,2>::operator[]
PUBLIC	??A?$tquat@M$01@glm@@QBEABMH@Z			; glm::tquat<float,2>::operator[]
PUBLIC	??0?$tquat@M$01@glm@@QAE@XZ			; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QAE@W4ctor@1@@Z		; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QAE@ABMABU?$tvec3@M$01@1@@Z ; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QAE@ABM000@Z		; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??B?$tquat@M$01@glm@@QAE?AU?$tmat3x3@M$01@1@XZ	; glm::tquat<float,2>::operator glm::tmat3x3<float,2>
PUBLIC	??B?$tquat@M$01@glm@@QAE?AU?$tmat4x4@M$01@1@XZ	; glm::tquat<float,2>::operator glm::tmat4x4<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QAE@ABU?$tvec3@M$01@1@0@Z	; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QAE@ABU?$tvec3@M$01@1@@Z	; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z	; glm::tquat<float,2>::tquat<float,2>
PUBLIC	??0?$tquat@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z	; glm::tquat<float,2>::tquat<float,2>
PUBLIC	?length@?$tquat@N$01@glm@@SAHXZ			; glm::tquat<double,2>::length
PUBLIC	??A?$tquat@N$01@glm@@QAEAANH@Z			; glm::tquat<double,2>::operator[]
PUBLIC	??A?$tquat@N$01@glm@@QBEABNH@Z			; glm::tquat<double,2>::operator[]
PUBLIC	??0?$tquat@N$01@glm@@QAE@XZ			; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QAE@W4ctor@1@@Z		; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QAE@ABNABU?$tvec3@N$01@1@@Z ; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QAE@ABN000@Z		; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??B?$tquat@N$01@glm@@QAE?AU?$tmat3x3@N$01@1@XZ	; glm::tquat<double,2>::operator glm::tmat3x3<double,2>
PUBLIC	??B?$tquat@N$01@glm@@QAE?AU?$tmat4x4@N$01@1@XZ	; glm::tquat<double,2>::operator glm::tmat4x4<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QAE@ABU?$tvec3@N$01@1@0@Z	; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QAE@ABU?$tvec3@N$01@1@@Z	; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z	; glm::tquat<double,2>::tquat<double,2>
PUBLIC	??0?$tquat@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z	; glm::tquat<double,2>::tquat<double,2>
PUBLIC	?length@?$tquat@M$00@glm@@SAHXZ			; glm::tquat<float,1>::length
PUBLIC	??A?$tquat@M$00@glm@@QAEAAMH@Z			; glm::tquat<float,1>::operator[]
PUBLIC	??A?$tquat@M$00@glm@@QBEABMH@Z			; glm::tquat<float,1>::operator[]
PUBLIC	??0?$tquat@M$00@glm@@QAE@XZ			; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QAE@W4ctor@1@@Z		; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QAE@ABMABU?$tvec3@M$00@1@@Z ; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QAE@ABM000@Z		; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??B?$tquat@M$00@glm@@QAE?AU?$tmat3x3@M$00@1@XZ	; glm::tquat<float,1>::operator glm::tmat3x3<float,1>
PUBLIC	??B?$tquat@M$00@glm@@QAE?AU?$tmat4x4@M$00@1@XZ	; glm::tquat<float,1>::operator glm::tmat4x4<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QAE@ABU?$tvec3@M$00@1@0@Z	; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QAE@ABU?$tvec3@M$00@1@@Z	; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z	; glm::tquat<float,1>::tquat<float,1>
PUBLIC	??0?$tquat@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z	; glm::tquat<float,1>::tquat<float,1>
PUBLIC	?length@?$tquat@N$00@glm@@SAHXZ			; glm::tquat<double,1>::length
PUBLIC	??A?$tquat@N$00@glm@@QAEAANH@Z			; glm::tquat<double,1>::operator[]
PUBLIC	??A?$tquat@N$00@glm@@QBEABNH@Z			; glm::tquat<double,1>::operator[]
PUBLIC	??0?$tquat@N$00@glm@@QAE@XZ			; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QAE@W4ctor@1@@Z		; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QAE@ABNABU?$tvec3@N$00@1@@Z ; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QAE@ABN000@Z		; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??B?$tquat@N$00@glm@@QAE?AU?$tmat3x3@N$00@1@XZ	; glm::tquat<double,1>::operator glm::tmat3x3<double,1>
PUBLIC	??B?$tquat@N$00@glm@@QAE?AU?$tmat4x4@N$00@1@XZ	; glm::tquat<double,1>::operator glm::tmat4x4<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QAE@ABU?$tvec3@N$00@1@0@Z	; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QAE@ABU?$tvec3@N$00@1@@Z	; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z	; glm::tquat<double,1>::tquat<double,1>
PUBLIC	??0?$tquat@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z	; glm::tquat<double,1>::tquat<double,1>
PUBLIC	?length@?$tquat@M$0A@@glm@@SAHXZ		; glm::tquat<float,0>::length
PUBLIC	??A?$tquat@M$0A@@glm@@QAEAAMH@Z			; glm::tquat<float,0>::operator[]
PUBLIC	??A?$tquat@M$0A@@glm@@QBEABMH@Z			; glm::tquat<float,0>::operator[]
PUBLIC	??0?$tquat@M$0A@@glm@@QAE@XZ			; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QAE@ABMABU?$tvec3@M$0A@@1@@Z ; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QAE@ABM000@Z		; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??B?$tquat@M$0A@@glm@@QAE?AU?$tmat3x3@M$0A@@1@XZ ; glm::tquat<float,0>::operator glm::tmat3x3<float,0>
PUBLIC	??B?$tquat@M$0A@@glm@@QAE?AU?$tmat4x4@M$0A@@1@XZ ; glm::tquat<float,0>::operator glm::tmat4x4<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@0@Z ; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@@Z	; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tquat<float,0>::tquat<float,0>
PUBLIC	?length@?$tquat@N$0A@@glm@@SAHXZ		; glm::tquat<double,0>::length
PUBLIC	??A?$tquat@N$0A@@glm@@QAEAANH@Z			; glm::tquat<double,0>::operator[]
PUBLIC	??A?$tquat@N$0A@@glm@@QBEABNH@Z			; glm::tquat<double,0>::operator[]
PUBLIC	??0?$tquat@N$0A@@glm@@QAE@XZ			; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QAE@W4ctor@1@@Z		; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QAE@ABNABU?$tvec3@N$0A@@1@@Z ; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QAE@ABN000@Z		; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??B?$tquat@N$0A@@glm@@QAE?AU?$tmat3x3@N$0A@@1@XZ ; glm::tquat<double,0>::operator glm::tmat3x3<double,0>
PUBLIC	??B?$tquat@N$0A@@glm@@QAE?AU?$tmat4x4@N$0A@@1@XZ ; glm::tquat<double,0>::operator glm::tmat4x4<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@0@Z ; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@@Z	; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ; glm::tquat<double,0>::tquat<double,0>
PUBLIC	?length@?$tdualquat@M$01@glm@@SAHXZ		; glm::tdualquat<float,2>::length
PUBLIC	??A?$tdualquat@M$01@glm@@QAEAAU?$tquat@M$01@1@H@Z ; glm::tdualquat<float,2>::operator[]
PUBLIC	??A?$tdualquat@M$01@glm@@QBEABU?$tquat@M$01@1@H@Z ; glm::tdualquat<float,2>::operator[]
PUBLIC	??0?$tdualquat@M$01@glm@@QAE@XZ			; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QAE@W4ctor@1@@Z	; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@@Z ; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@ABU?$tvec3@M$01@1@@Z ; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@0@Z ; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	??0?$tdualquat@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ; glm::tdualquat<float,2>::tdualquat<float,2>
PUBLIC	?length@?$tdualquat@N$01@glm@@SAHXZ		; glm::tdualquat<double,2>::length
PUBLIC	??A?$tdualquat@N$01@glm@@QAEAAU?$tquat@N$01@1@H@Z ; glm::tdualquat<double,2>::operator[]
PUBLIC	??A?$tdualquat@N$01@glm@@QBEABU?$tquat@N$01@1@H@Z ; glm::tdualquat<double,2>::operator[]
PUBLIC	??0?$tdualquat@N$01@glm@@QAE@XZ			; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QAE@W4ctor@1@@Z	; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@@Z ; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@ABU?$tvec3@N$01@1@@Z ; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@0@Z ; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	??0?$tdualquat@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ; glm::tdualquat<double,2>::tdualquat<double,2>
PUBLIC	?length@?$tdualquat@M$00@glm@@SAHXZ		; glm::tdualquat<float,1>::length
PUBLIC	??A?$tdualquat@M$00@glm@@QAEAAU?$tquat@M$00@1@H@Z ; glm::tdualquat<float,1>::operator[]
PUBLIC	??A?$tdualquat@M$00@glm@@QBEABU?$tquat@M$00@1@H@Z ; glm::tdualquat<float,1>::operator[]
PUBLIC	??0?$tdualquat@M$00@glm@@QAE@XZ			; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QAE@W4ctor@1@@Z	; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@@Z ; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@ABU?$tvec3@M$00@1@@Z ; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@0@Z ; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	??0?$tdualquat@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ; glm::tdualquat<float,1>::tdualquat<float,1>
PUBLIC	?length@?$tdualquat@N$00@glm@@SAHXZ		; glm::tdualquat<double,1>::length
PUBLIC	??A?$tdualquat@N$00@glm@@QAEAAU?$tquat@N$00@1@H@Z ; glm::tdualquat<double,1>::operator[]
PUBLIC	??A?$tdualquat@N$00@glm@@QBEABU?$tquat@N$00@1@H@Z ; glm::tdualquat<double,1>::operator[]
PUBLIC	??0?$tdualquat@N$00@glm@@QAE@XZ			; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QAE@W4ctor@1@@Z	; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@@Z ; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@ABU?$tvec3@N$00@1@@Z ; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@0@Z ; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	??0?$tdualquat@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ; glm::tdualquat<double,1>::tdualquat<double,1>
PUBLIC	?length@?$tdualquat@M$0A@@glm@@SAHXZ		; glm::tdualquat<float,0>::length
PUBLIC	??A?$tdualquat@M$0A@@glm@@QAEAAU?$tquat@M$0A@@1@H@Z ; glm::tdualquat<float,0>::operator[]
PUBLIC	??A?$tdualquat@M$0A@@glm@@QBEABU?$tquat@M$0A@@1@H@Z ; glm::tdualquat<float,0>::operator[]
PUBLIC	??0?$tdualquat@M$0A@@glm@@QAE@XZ		; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QAE@W4ctor@1@@Z	; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@ABU?$tvec3@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@0@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	?length@?$tdualquat@N$0A@@glm@@SAHXZ		; glm::tdualquat<double,0>::length
PUBLIC	??A?$tdualquat@N$0A@@glm@@QAEAAU?$tquat@N$0A@@1@H@Z ; glm::tdualquat<double,0>::operator[]
PUBLIC	??A?$tdualquat@N$0A@@glm@@QBEABU?$tquat@N$0A@@1@H@Z ; glm::tdualquat<double,0>::operator[]
PUBLIC	??0?$tdualquat@N$0A@@glm@@QAE@XZ		; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QAE@W4ctor@1@@Z	; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@ABU?$tvec3@N$0A@@1@@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@0@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat3x3@M$01@0@@Z ; glm::quat_cast<float,2>
PUBLIC	??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@ABU?$tquat@M$01@0@@Z ; glm::mat3_cast<float,2>
PUBLIC	??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat3x3@M$00@0@@Z ; glm::quat_cast<float,1>
PUBLIC	??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@ABU?$tquat@M$00@0@@Z ; glm::mat3_cast<float,1>
PUBLIC	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat3x3@M$0A@@0@@Z ; glm::quat_cast<float,0>
PUBLIC	??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@ABU?$tquat@M$0A@@0@@Z ; glm::mat3_cast<float,0>
PUBLIC	??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat3x3@N$01@0@@Z ; glm::quat_cast<double,2>
PUBLIC	??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@ABU?$tquat@N$01@0@@Z ; glm::mat3_cast<double,2>
PUBLIC	??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat3x3@N$00@0@@Z ; glm::quat_cast<double,1>
PUBLIC	??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@ABU?$tquat@N$00@0@@Z ; glm::mat3_cast<double,1>
PUBLIC	??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat3x3@N$0A@@0@@Z ; glm::quat_cast<double,0>
PUBLIC	??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@ABU?$tquat@N$0A@@0@@Z ; glm::mat3_cast<double,0>
PUBLIC	??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat3x4@M$01@0@@Z ; glm::dualquat_cast<float,2>
PUBLIC	??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat3x4@M$00@0@@Z ; glm::dualquat_cast<float,1>
PUBLIC	??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat3x4@M$0A@@0@@Z ; glm::dualquat_cast<float,0>
PUBLIC	??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@ABU?$tmat3x4@N$01@0@@Z ; glm::dualquat_cast<double,2>
PUBLIC	??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@ABU?$tmat3x4@N$00@0@@Z ; glm::dualquat_cast<double,1>
PUBLIC	??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@ABU?$tmat3x4@N$0A@@0@@Z ; glm::dualquat_cast<double,0>
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@bf000000
PUBLIC	__real@bfe0000000000000
PUBLIC	__xmm@0000000000000000000000003f800000
PUBLIC	__xmm@00000000000000003f80000000000000
PUBLIC	__xmm@00000000000000003ff0000000000000
PUBLIC	__xmm@00000000000000010000000000000001
PUBLIC	__xmm@000000003f8000000000000000000000
PUBLIC	__xmm@00000001000000010000000100000001
PUBLIC	__xmm@3f800000000000000000000000000000
PUBLIC	__xmm@3f8000003f8000003f8000003f800000
PUBLIC	__xmm@3ff00000000000000000000000000000
PUBLIC	__xmm@3ff00000000000003ff0000000000000
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___libm_sse2_cosf:PROC
EXTRN	___libm_sse2_sinf:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@3ff00000000000003ff0000000000000
CONST	SEGMENT
__xmm@3ff00000000000003ff0000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 0f0H
	DB	'?', 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, '?'
CONST	ENDS
;	COMDAT __xmm@3ff00000000000000000000000000000
CONST	SEGMENT
__xmm@3ff00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003f8000003f8000003f800000
CONST	SEGMENT
__xmm@3f8000003f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f800000000000000000000000000000
CONST	SEGMENT
__xmm@3f800000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@00000001000000010000000100000001
CONST	SEGMENT
__xmm@00000001000000010000000100000001 DB 01H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 01H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@000000003f8000000000000000000000
CONST	SEGMENT
__xmm@000000003f8000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 080H, '?', 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000000000000010000000000000001
CONST	SEGMENT
__xmm@00000000000000010000000000000001 DB 01H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000000000000003ff0000000000000
CONST	SEGMENT
__xmm@00000000000000003ff0000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 0f0H
	DB	'?', 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000000000000003f80000000000000
CONST	SEGMENT
__xmm@00000000000000003f80000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 080H
	DB	'?', 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@0000000000000000000000003f800000
CONST	SEGMENT
__xmm@0000000000000000000000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@N$0A@$0A@@detail@glm@@SANABU?$tquat@N$0A@@3@0@Z
_TEXT	SEGMENT
tv159 = -8						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utquat@glm@@N$0A@$0A@@detail@glm@@SANABU?$tquat@N$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,double,0,0>::call, COMDAT

; 16   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm3, QWORD PTR [ecx]
	movsd	xmm2, QWORD PTR [ecx+8]
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	xmm1, QWORD PTR [ecx+24]
	mulsd	xmm1, QWORD PTR [eax+24]
	mulsd	xmm3, QWORD PTR [eax]
	mulsd	xmm2, QWORD PTR [eax+8]
	mulsd	xmm0, QWORD PTR [eax+16]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	addsd	xmm2, xmm3
	addsd	xmm1, xmm0
	addsd	xmm1, xmm2
	movsd	QWORD PTR tv159[ebp], xmm1
	fld	QWORD PTR tv159[ebp]

; 19   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utquat@glm@@N$0A@$0A@@detail@glm@@SANABU?$tquat@N$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@N$00$0A@@detail@glm@@SANABU?$tquat@N$00@3@0@Z
_TEXT	SEGMENT
tv159 = -8						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utquat@glm@@N$00$0A@@detail@glm@@SANABU?$tquat@N$00@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,double,1,0>::call, COMDAT

; 16   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm3, QWORD PTR [ecx]
	movsd	xmm2, QWORD PTR [ecx+8]
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	xmm1, QWORD PTR [ecx+24]
	mulsd	xmm1, QWORD PTR [eax+24]
	mulsd	xmm3, QWORD PTR [eax]
	mulsd	xmm2, QWORD PTR [eax+8]
	mulsd	xmm0, QWORD PTR [eax+16]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	addsd	xmm2, xmm3
	addsd	xmm1, xmm0
	addsd	xmm1, xmm2
	movsd	QWORD PTR tv159[ebp], xmm1
	fld	QWORD PTR tv159[ebp]

; 19   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utquat@glm@@N$00$0A@@detail@glm@@SANABU?$tquat@N$00@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,double,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@N$01$0A@@detail@glm@@SANABU?$tquat@N$01@3@0@Z
_TEXT	SEGMENT
tv159 = -8						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utquat@glm@@N$01$0A@@detail@glm@@SANABU?$tquat@N$01@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,double,2,0>::call, COMDAT

; 16   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm3, QWORD PTR [ecx]
	movsd	xmm2, QWORD PTR [ecx+8]
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	xmm1, QWORD PTR [ecx+24]
	mulsd	xmm1, QWORD PTR [eax+24]
	mulsd	xmm3, QWORD PTR [eax]
	mulsd	xmm2, QWORD PTR [eax+8]
	mulsd	xmm0, QWORD PTR [eax+16]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	addsd	xmm2, xmm3
	addsd	xmm1, xmm0
	addsd	xmm1, xmm2
	movsd	QWORD PTR tv159[ebp], xmm1
	fld	QWORD PTR tv159[ebp]

; 19   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utquat@glm@@N$01$0A@@detail@glm@@SANABU?$tquat@N$01@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,double,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMABU?$tquat@M$0A@@3@0@Z
_TEXT	SEGMENT
tv159 = 8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMABU?$tquat@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,float,0,0>::call, COMDAT

; 16   : 		{

	push	ebp
	mov	ebp, esp

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movss	xmm3, DWORD PTR [ecx]
	movss	xmm2, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [ecx+12]
	mulss	xmm1, DWORD PTR [eax+12]
	mulss	xmm3, DWORD PTR [eax]
	mulss	xmm2, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [eax+8]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	addss	xmm2, xmm3
	addss	xmm1, xmm0
	addss	xmm1, xmm2
	movss	DWORD PTR tv159[ebp], xmm1
	fld	DWORD PTR tv159[ebp]

; 19   : 		}

	pop	ebp
	ret	0
?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMABU?$tquat@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@M$00$0A@@detail@glm@@SAMABU?$tquat@M$00@3@0@Z
_TEXT	SEGMENT
tv159 = 8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utquat@glm@@M$00$0A@@detail@glm@@SAMABU?$tquat@M$00@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,float,1,0>::call, COMDAT

; 16   : 		{

	push	ebp
	mov	ebp, esp

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movss	xmm3, DWORD PTR [ecx]
	movss	xmm2, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [ecx+12]
	mulss	xmm1, DWORD PTR [eax+12]
	mulss	xmm3, DWORD PTR [eax]
	mulss	xmm2, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [eax+8]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	addss	xmm2, xmm3
	addss	xmm1, xmm0
	addss	xmm1, xmm2
	movss	DWORD PTR tv159[ebp], xmm1
	fld	DWORD PTR tv159[ebp]

; 19   : 		}

	pop	ebp
	ret	0
?call@?$compute_dot@Utquat@glm@@M$00$0A@@detail@glm@@SAMABU?$tquat@M$00@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,float,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@M$01$0A@@detail@glm@@SAMABU?$tquat@M$01@3@0@Z
_TEXT	SEGMENT
tv159 = 8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utquat@glm@@M$01$0A@@detail@glm@@SAMABU?$tquat@M$01@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,float,2,0>::call, COMDAT

; 16   : 		{

	push	ebp
	mov	ebp, esp

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movss	xmm3, DWORD PTR [ecx]
	movss	xmm2, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [ecx+12]
	mulss	xmm1, DWORD PTR [eax+12]
	mulss	xmm3, DWORD PTR [eax]
	mulss	xmm2, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [eax+8]

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	addss	xmm2, xmm3
	addss	xmm1, xmm0
	addss	xmm1, xmm2
	movss	DWORD PTR tv159[ebp], xmm1
	fld	DWORD PTR tv159[ebp]

; 19   : 		}

	pop	ebp
	ret	0
?call@?$compute_dot@Utquat@glm@@M$01$0A@@detail@glm@@SAMABU?$tquat@M$01@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,float,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@N$0A@Utquat@glm@@@glm@@YANABU?$tquat@N$0A@@0@0@Z
_TEXT	SEGMENT
tv159 = -8						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??$dot@N$0A@Utquat@glm@@@glm@@YANABU?$tquat@N$0A@@0@0@Z PROC ; glm::dot<double,0,glm::tquat>, COMDAT

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm3, QWORD PTR [ecx]
	movsd	xmm2, QWORD PTR [ecx+8]
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	xmm1, QWORD PTR [ecx+24]
	mulsd	xmm1, QWORD PTR [eax+24]
	mulsd	xmm3, QWORD PTR [eax]
	mulsd	xmm2, QWORD PTR [eax+8]
	mulsd	xmm0, QWORD PTR [eax+16]
	addsd	xmm2, xmm3
	addsd	xmm1, xmm0
	addsd	xmm1, xmm2
	movsd	QWORD PTR tv159[ebp], xmm1
	fld	QWORD PTR tv159[ebp]

; 175  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dot@N$0A@Utquat@glm@@@glm@@YANABU?$tquat@N$0A@@0@0@Z ENDP ; glm::dot<double,0,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@N$00Utquat@glm@@@glm@@YANABU?$tquat@N$00@0@0@Z
_TEXT	SEGMENT
tv159 = -8						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??$dot@N$00Utquat@glm@@@glm@@YANABU?$tquat@N$00@0@0@Z PROC ; glm::dot<double,1,glm::tquat>, COMDAT

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm3, QWORD PTR [ecx]
	movsd	xmm2, QWORD PTR [ecx+8]
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	xmm1, QWORD PTR [ecx+24]
	mulsd	xmm1, QWORD PTR [eax+24]
	mulsd	xmm3, QWORD PTR [eax]
	mulsd	xmm2, QWORD PTR [eax+8]
	mulsd	xmm0, QWORD PTR [eax+16]
	addsd	xmm2, xmm3
	addsd	xmm1, xmm0
	addsd	xmm1, xmm2
	movsd	QWORD PTR tv159[ebp], xmm1
	fld	QWORD PTR tv159[ebp]

; 175  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dot@N$00Utquat@glm@@@glm@@YANABU?$tquat@N$00@0@0@Z ENDP ; glm::dot<double,1,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@N$01Utquat@glm@@@glm@@YANABU?$tquat@N$01@0@0@Z
_TEXT	SEGMENT
tv159 = -8						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??$dot@N$01Utquat@glm@@@glm@@YANABU?$tquat@N$01@0@0@Z PROC ; glm::dot<double,2,glm::tquat>, COMDAT

; 172  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm3, QWORD PTR [ecx]
	movsd	xmm2, QWORD PTR [ecx+8]
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	xmm1, QWORD PTR [ecx+24]
	mulsd	xmm1, QWORD PTR [eax+24]
	mulsd	xmm3, QWORD PTR [eax]
	mulsd	xmm2, QWORD PTR [eax+8]
	mulsd	xmm0, QWORD PTR [eax+16]
	addsd	xmm2, xmm3
	addsd	xmm1, xmm0
	addsd	xmm1, xmm2
	movsd	QWORD PTR tv159[ebp], xmm1
	fld	QWORD PTR tv159[ebp]

; 175  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dot@N$01Utquat@glm@@@glm@@YANABU?$tquat@N$01@0@0@Z ENDP ; glm::dot<double,2,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utquat@glm@@@glm@@YAMABU?$tquat@M$0A@@0@0@Z
_TEXT	SEGMENT
tv159 = 8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??$dot@M$0A@Utquat@glm@@@glm@@YAMABU?$tquat@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tquat>, COMDAT

; 172  : 	{

	push	ebp
	mov	ebp, esp

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movss	xmm3, DWORD PTR [ecx]
	movss	xmm2, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [ecx+12]
	mulss	xmm1, DWORD PTR [eax+12]
	mulss	xmm3, DWORD PTR [eax]
	mulss	xmm2, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [eax+8]
	addss	xmm2, xmm3
	addss	xmm1, xmm0
	addss	xmm1, xmm2
	movss	DWORD PTR tv159[ebp], xmm1
	fld	DWORD PTR tv159[ebp]

; 175  : 	}

	pop	ebp
	ret	0
??$dot@M$0A@Utquat@glm@@@glm@@YAMABU?$tquat@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$00Utquat@glm@@@glm@@YAMABU?$tquat@M$00@0@0@Z
_TEXT	SEGMENT
tv159 = 8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??$dot@M$00Utquat@glm@@@glm@@YAMABU?$tquat@M$00@0@0@Z PROC ; glm::dot<float,1,glm::tquat>, COMDAT

; 172  : 	{

	push	ebp
	mov	ebp, esp

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movss	xmm3, DWORD PTR [ecx]
	movss	xmm2, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [ecx+12]
	mulss	xmm1, DWORD PTR [eax+12]
	mulss	xmm3, DWORD PTR [eax]
	mulss	xmm2, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [eax+8]
	addss	xmm2, xmm3
	addss	xmm1, xmm0
	addss	xmm1, xmm2
	movss	DWORD PTR tv159[ebp], xmm1
	fld	DWORD PTR tv159[ebp]

; 175  : 	}

	pop	ebp
	ret	0
??$dot@M$00Utquat@glm@@@glm@@YAMABU?$tquat@M$00@0@0@Z ENDP ; glm::dot<float,1,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$01Utquat@glm@@@glm@@YAMABU?$tquat@M$01@0@0@Z
_TEXT	SEGMENT
tv159 = 8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??$dot@M$01Utquat@glm@@@glm@@YAMABU?$tquat@M$01@0@0@Z PROC ; glm::dot<float,2,glm::tquat>, COMDAT

; 172  : 	{

	push	ebp
	mov	ebp, esp

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movss	xmm3, DWORD PTR [ecx]
	movss	xmm2, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	movss	xmm1, DWORD PTR [ecx+12]
	mulss	xmm1, DWORD PTR [eax+12]
	mulss	xmm3, DWORD PTR [eax]
	mulss	xmm2, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [eax+8]
	addss	xmm2, xmm3
	addss	xmm1, xmm0
	addss	xmm1, xmm2
	movss	DWORD PTR tv159[ebp], xmm1
	fld	DWORD PTR tv159[ebp]

; 175  : 	}

	pop	ebp
	ret	0
??$dot@M$01Utquat@glm@@@glm@@YAMABU?$tquat@M$01@0@0@Z ENDP ; glm::dot<float,2,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$length@N$0A@@glm@@YANABU?$tquat@N$0A@@0@@Z
_TEXT	SEGMENT
tv132 = -8						; size = 8
_q$ = 8							; size = 4
??$length@N$0A@@glm@@YANABU?$tquat@N$0A@@0@@Z PROC	; glm::length<double,0>, COMDAT

; 374  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 375  : 		return glm::sqrt(dot(q, q));

	mov	eax, DWORD PTR _q$[ebp]
	movsd	xmm3, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]
	mulsd	xmm0, xmm0
	mulsd	xmm3, xmm3
	mulsd	xmm2, xmm2
	mulsd	xmm1, xmm1
	addsd	xmm2, xmm3
	addsd	xmm0, xmm1
	addsd	xmm0, xmm2
	sqrtsd	xmm0, xmm0
	movsd	QWORD PTR tv132[ebp], xmm0
	fld	QWORD PTR tv132[ebp]

; 376  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$length@N$0A@@glm@@YANABU?$tquat@N$0A@@0@@Z ENDP	; glm::length<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@N$0A@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@ABU43@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?call@?$compute_cross@N$0A@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@ABU43@0@Z PROC ; glm::detail::compute_cross<double,0,0>::call, COMDAT

; 77   : 		{

	push	ebp
	mov	ebp, esp

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+8]
	mulsd	xmm1, QWORD PTR [edx+8]
	mulsd	xmm0, QWORD PTR [edx+16]
	movsd	xmm3, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [edx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm2, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR [edx+16]
	mulsd	xmm3, QWORD PTR [edx+8]
	subsd	xmm1, xmm0
	subsd	xmm2, xmm3
	movsd	QWORD PTR [ecx+8], xmm1
	movsd	QWORD PTR [ecx+16], xmm2

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	pop	ebp
	ret	0
?call@?$compute_cross@N$0A@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@ABU43@0@Z ENDP ; glm::detail::compute_cross<double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZABU43@@Z
_TEXT	SEGMENT
_c$ = -24						; size = 8
_b$ = -16						; size = 8
_a$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_Func$ = 12						; size = 4
_v$ = 16						; size = 4
?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZABU43@@Z PROC ; glm::detail::functor1<double,double,0,glm::tvec3>::call, COMDAT

; 39   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	esi, DWORD PTR _v$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [esi]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movsd	xmm0, QWORD PTR [esi+8]
	fstp	QWORD PTR _a$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movsd	xmm0, QWORD PTR [esi+16]
	fstp	QWORD PTR _b$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	movsd	xmm0, QWORD PTR _a$[ebp]
	fstp	QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax+16], xmm0
	pop	esi

; 41   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZABU43@@Z ENDP ; glm::detail::functor1<double,double,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$length@N$00@glm@@YANABU?$tquat@N$00@0@@Z
_TEXT	SEGMENT
tv132 = -8						; size = 8
_q$ = 8							; size = 4
??$length@N$00@glm@@YANABU?$tquat@N$00@0@@Z PROC	; glm::length<double,1>, COMDAT

; 374  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 375  : 		return glm::sqrt(dot(q, q));

	mov	eax, DWORD PTR _q$[ebp]
	movsd	xmm3, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]
	mulsd	xmm0, xmm0
	mulsd	xmm3, xmm3
	mulsd	xmm2, xmm2
	mulsd	xmm1, xmm1
	addsd	xmm2, xmm3
	addsd	xmm0, xmm1
	addsd	xmm0, xmm2
	sqrtsd	xmm0, xmm0
	movsd	QWORD PTR tv132[ebp], xmm0
	fld	QWORD PTR tv132[ebp]

; 376  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$length@N$00@glm@@YANABU?$tquat@N$00@0@@Z ENDP	; glm::length<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@N$00$0A@@detail@glm@@SA?AU?$tvec3@N$00@3@ABU43@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?call@?$compute_cross@N$00$0A@@detail@glm@@SA?AU?$tvec3@N$00@3@ABU43@0@Z PROC ; glm::detail::compute_cross<double,1,0>::call, COMDAT

; 77   : 		{

	push	ebp
	mov	ebp, esp

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+8]
	mulsd	xmm1, QWORD PTR [edx+8]
	mulsd	xmm0, QWORD PTR [edx+16]
	movsd	xmm3, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [edx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm2, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR [edx+16]
	mulsd	xmm3, QWORD PTR [edx+8]
	subsd	xmm1, xmm0
	subsd	xmm2, xmm3
	movsd	QWORD PTR [ecx+8], xmm1
	movsd	QWORD PTR [ecx+16], xmm2

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	pop	ebp
	ret	0
?call@?$compute_cross@N$00$0A@@detail@glm@@SA?AU?$tvec3@N$00@3@ABU43@0@Z ENDP ; glm::detail::compute_cross<double,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@NN$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$00@3@P6ANN@ZABU43@@Z
_TEXT	SEGMENT
_c$ = -24						; size = 8
_b$ = -16						; size = 8
_a$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_Func$ = 12						; size = 4
_v$ = 16						; size = 4
?call@?$functor1@NN$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$00@3@P6ANN@ZABU43@@Z PROC ; glm::detail::functor1<double,double,1,glm::tvec3>::call, COMDAT

; 39   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	esi, DWORD PTR _v$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [esi]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movsd	xmm0, QWORD PTR [esi+8]
	fstp	QWORD PTR _a$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movsd	xmm0, QWORD PTR [esi+16]
	fstp	QWORD PTR _b$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	movsd	xmm0, QWORD PTR _a$[ebp]
	fstp	QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax+16], xmm0
	pop	esi

; 41   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$functor1@NN$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$00@3@P6ANN@ZABU43@@Z ENDP ; glm::detail::functor1<double,double,1,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$length@N$01@glm@@YANABU?$tquat@N$01@0@@Z
_TEXT	SEGMENT
tv132 = -8						; size = 8
_q$ = 8							; size = 4
??$length@N$01@glm@@YANABU?$tquat@N$01@0@@Z PROC	; glm::length<double,2>, COMDAT

; 374  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 375  : 		return glm::sqrt(dot(q, q));

	mov	eax, DWORD PTR _q$[ebp]
	movsd	xmm3, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]
	mulsd	xmm0, xmm0
	mulsd	xmm3, xmm3
	mulsd	xmm2, xmm2
	mulsd	xmm1, xmm1
	addsd	xmm2, xmm3
	addsd	xmm0, xmm1
	addsd	xmm0, xmm2
	sqrtsd	xmm0, xmm0
	movsd	QWORD PTR tv132[ebp], xmm0
	fld	QWORD PTR tv132[ebp]

; 376  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$length@N$01@glm@@YANABU?$tquat@N$01@0@@Z ENDP	; glm::length<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@N$01$0A@@detail@glm@@SA?AU?$tvec3@N$01@3@ABU43@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?call@?$compute_cross@N$01$0A@@detail@glm@@SA?AU?$tvec3@N$01@3@ABU43@0@Z PROC ; glm::detail::compute_cross<double,2,0>::call, COMDAT

; 77   : 		{

	push	ebp
	mov	ebp, esp

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+8]
	mulsd	xmm1, QWORD PTR [edx+8]
	mulsd	xmm0, QWORD PTR [edx+16]
	movsd	xmm3, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [edx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm2, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR [edx+16]
	mulsd	xmm3, QWORD PTR [edx+8]
	subsd	xmm1, xmm0
	subsd	xmm2, xmm3
	movsd	QWORD PTR [ecx+8], xmm1
	movsd	QWORD PTR [ecx+16], xmm2

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	pop	ebp
	ret	0
?call@?$compute_cross@N$01$0A@@detail@glm@@SA?AU?$tvec3@N$01@3@ABU43@0@Z ENDP ; glm::detail::compute_cross<double,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@NN$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$01@3@P6ANN@ZABU43@@Z
_TEXT	SEGMENT
_c$ = -24						; size = 8
_b$ = -16						; size = 8
_a$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_Func$ = 12						; size = 4
_v$ = 16						; size = 4
?call@?$functor1@NN$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$01@3@P6ANN@ZABU43@@Z PROC ; glm::detail::functor1<double,double,2,glm::tvec3>::call, COMDAT

; 39   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	esi, DWORD PTR _v$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [esi]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movsd	xmm0, QWORD PTR [esi+8]
	fstp	QWORD PTR _a$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movsd	xmm0, QWORD PTR [esi+16]
	fstp	QWORD PTR _b$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	movsd	xmm0, QWORD PTR _a$[ebp]
	fstp	QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax+16], xmm0
	pop	esi

; 41   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$functor1@NN$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$01@3@P6ANN@ZABU43@@Z ENDP ; glm::detail::functor1<double,double,2,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$length@M$0A@@glm@@YAMABU?$tquat@M$0A@@0@@Z
_TEXT	SEGMENT
tv135 = 8						; size = 4
_q$ = 8							; size = 4
??$length@M$0A@@glm@@YAMABU?$tquat@M$0A@@0@@Z PROC	; glm::length<float,0>, COMDAT

; 374  : 	{

	push	ebp
	mov	ebp, esp

; 375  : 		return glm::sqrt(dot(q, q));

	mov	eax, DWORD PTR _q$[ebp]
	movss	xmm3, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [eax+4]
	movss	xmm1, DWORD PTR [eax+8]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, xmm0
	mulss	xmm3, xmm3
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	addss	xmm2, xmm3
	addss	xmm0, xmm1
	addss	xmm0, xmm2
	sqrtss	xmm0, xmm0
	movss	DWORD PTR tv135[ebp], xmm0
	fld	DWORD PTR tv135[ebp]

; 376  : 	}

	pop	ebp
	ret	0
??$length@M$0A@@glm@@YAMABU?$tquat@M$0A@@0@@Z ENDP	; glm::length<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@ABU43@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@ABU43@0@Z PROC ; glm::detail::compute_cross<float,0,0>::call, COMDAT

; 77   : 		{

	push	ebp
	mov	ebp, esp

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm1, DWORD PTR [eax+8]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [edx+8]
	movss	xmm3, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [edx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [eax+8]
	mulss	xmm2, DWORD PTR [eax+4]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [edx+8]
	mulss	xmm3, DWORD PTR [edx+4]
	subss	xmm1, xmm0
	subss	xmm2, xmm3
	movss	DWORD PTR [ecx+4], xmm1
	movss	DWORD PTR [ecx+8], xmm2

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	pop	ebp
	ret	0
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@ABU43@0@Z ENDP ; glm::detail::compute_cross<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZABU43@@Z
_TEXT	SEGMENT
_b$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_c$ = 12						; size = 4
_Func$ = 12						; size = 4
_a$ = 16						; size = 4
_v$ = 16						; size = 4
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZABU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec3>::call, COMDAT

; 39   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	esi, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [esi]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movss	xmm0, DWORD PTR [esi+4]
	fstp	DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movss	xmm0, DWORD PTR [esi+8]
	fstp	DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 4
	movss	xmm0, DWORD PTR _a$[ebp]
	fstp	DWORD PTR _c$[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	pop	esi

; 41   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZABU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$length@M$00@glm@@YAMABU?$tquat@M$00@0@@Z
_TEXT	SEGMENT
tv135 = 8						; size = 4
_q$ = 8							; size = 4
??$length@M$00@glm@@YAMABU?$tquat@M$00@0@@Z PROC	; glm::length<float,1>, COMDAT

; 374  : 	{

	push	ebp
	mov	ebp, esp

; 375  : 		return glm::sqrt(dot(q, q));

	mov	eax, DWORD PTR _q$[ebp]
	movss	xmm3, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [eax+4]
	movss	xmm1, DWORD PTR [eax+8]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, xmm0
	mulss	xmm3, xmm3
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	addss	xmm2, xmm3
	addss	xmm0, xmm1
	addss	xmm0, xmm2
	sqrtss	xmm0, xmm0
	movss	DWORD PTR tv135[ebp], xmm0
	fld	DWORD PTR tv135[ebp]

; 376  : 	}

	pop	ebp
	ret	0
??$length@M$00@glm@@YAMABU?$tquat@M$00@0@@Z ENDP	; glm::length<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@M$00$0A@@detail@glm@@SA?AU?$tvec3@M$00@3@ABU43@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?call@?$compute_cross@M$00$0A@@detail@glm@@SA?AU?$tvec3@M$00@3@ABU43@0@Z PROC ; glm::detail::compute_cross<float,1,0>::call, COMDAT

; 77   : 		{

	push	ebp
	mov	ebp, esp

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm1, DWORD PTR [eax+8]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [edx+8]
	movss	xmm3, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [edx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [eax+8]
	mulss	xmm2, DWORD PTR [eax+4]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [edx+8]
	mulss	xmm3, DWORD PTR [edx+4]
	subss	xmm1, xmm0
	subss	xmm2, xmm3
	movss	DWORD PTR [ecx+4], xmm1
	movss	DWORD PTR [ecx+8], xmm2

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	pop	ebp
	ret	0
?call@?$compute_cross@M$00$0A@@detail@glm@@SA?AU?$tvec3@M$00@3@ABU43@0@Z ENDP ; glm::detail::compute_cross<float,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$00@3@P6AMM@ZABU43@@Z
_TEXT	SEGMENT
_b$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_c$ = 12						; size = 4
_Func$ = 12						; size = 4
_a$ = 16						; size = 4
_v$ = 16						; size = 4
?call@?$functor1@MM$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$00@3@P6AMM@ZABU43@@Z PROC ; glm::detail::functor1<float,float,1,glm::tvec3>::call, COMDAT

; 39   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	esi, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [esi]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movss	xmm0, DWORD PTR [esi+4]
	fstp	DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movss	xmm0, DWORD PTR [esi+8]
	fstp	DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 4
	movss	xmm0, DWORD PTR _a$[ebp]
	fstp	DWORD PTR _c$[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	pop	esi

; 41   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$functor1@MM$00Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$00@3@P6AMM@ZABU43@@Z ENDP ; glm::detail::functor1<float,float,1,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$length@M$01@glm@@YAMABU?$tquat@M$01@0@@Z
_TEXT	SEGMENT
tv135 = 8						; size = 4
_q$ = 8							; size = 4
??$length@M$01@glm@@YAMABU?$tquat@M$01@0@@Z PROC	; glm::length<float,2>, COMDAT

; 374  : 	{

	push	ebp
	mov	ebp, esp

; 375  : 		return glm::sqrt(dot(q, q));

	mov	eax, DWORD PTR _q$[ebp]
	movss	xmm3, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [eax+4]
	movss	xmm1, DWORD PTR [eax+8]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, xmm0
	mulss	xmm3, xmm3
	mulss	xmm2, xmm2
	mulss	xmm1, xmm1
	addss	xmm2, xmm3
	addss	xmm0, xmm1
	addss	xmm0, xmm2
	sqrtss	xmm0, xmm0
	movss	DWORD PTR tv135[ebp], xmm0
	fld	DWORD PTR tv135[ebp]

; 376  : 	}

	pop	ebp
	ret	0
??$length@M$01@glm@@YAMABU?$tquat@M$01@0@@Z ENDP	; glm::length<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@M$01$0A@@detail@glm@@SA?AU?$tvec3@M$01@3@ABU43@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?call@?$compute_cross@M$01$0A@@detail@glm@@SA?AU?$tvec3@M$01@3@ABU43@0@Z PROC ; glm::detail::compute_cross<float,2,0>::call, COMDAT

; 77   : 		{

	push	ebp
	mov	ebp, esp

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm1, DWORD PTR [eax+8]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [edx+8]
	movss	xmm3, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [edx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [eax+8]
	mulss	xmm2, DWORD PTR [eax+4]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [edx+8]
	mulss	xmm3, DWORD PTR [edx+4]
	subss	xmm1, xmm0
	subss	xmm2, xmm3
	movss	DWORD PTR [ecx+4], xmm1
	movss	DWORD PTR [ecx+8], xmm2

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	pop	ebp
	ret	0
?call@?$compute_cross@M$01$0A@@detail@glm@@SA?AU?$tvec3@M$01@3@ABU43@0@Z ENDP ; glm::detail::compute_cross<float,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$01@3@P6AMM@ZABU43@@Z
_TEXT	SEGMENT
_b$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_c$ = 12						; size = 4
_Func$ = 12						; size = 4
_a$ = 16						; size = 4
_v$ = 16						; size = 4
?call@?$functor1@MM$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$01@3@P6AMM@ZABU43@@Z PROC ; glm::detail::functor1<float,float,2,glm::tvec3>::call, COMDAT

; 39   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	esi, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [esi]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movss	xmm0, DWORD PTR [esi+4]
	fstp	DWORD PTR _a$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	movss	xmm0, DWORD PTR [esi+8]
	fstp	DWORD PTR _b$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _Func$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 4
	movss	xmm0, DWORD PTR _a$[ebp]
	fstp	DWORD PTR _c$[ebp]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	pop	esi

; 41   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$functor1@MM$01Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$01@3@P6AMM@ZABU43@@Z ENDP ; glm::detail::functor1<float,float,2,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@0@Z PROC	; glm::operator*<float,2>, COMDAT

; 664  : 	{

	push	ebp
	mov	ebp, esp

; 665  : 		return tvec3<T, P>(

	mov	edx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [eax+8], xmm0

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	pop	ebp
	ret	0
??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@0@Z ENDP	; glm::operator*<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@0@Z PROC	; glm::operator*<float,1>, COMDAT

; 664  : 	{

	push	ebp
	mov	ebp, esp

; 665  : 		return tvec3<T, P>(

	mov	edx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [eax+8], xmm0

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	pop	ebp
	ret	0
??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@0@Z ENDP	; glm::operator*<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 664  : 	{

	push	ebp
	mov	ebp, esp

; 665  : 		return tvec3<T, P>(

	mov	edx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [eax+8], xmm0

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	pop	ebp
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@0@Z PROC	; glm::operator*<double,2>, COMDAT

; 664  : 	{

	push	ebp
	mov	ebp, esp

; 665  : 		return tvec3<T, P>(

	mov	edx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm0, QWORD PTR [edx]
	mulsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR [edx+8]
	mulsd	xmm0, QWORD PTR [ecx+8]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR [edx+16]
	mulsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [eax+16], xmm0

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	pop	ebp
	ret	0
??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@0@Z ENDP	; glm::operator*<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@0@Z PROC	; glm::operator*<double,1>, COMDAT

; 664  : 	{

	push	ebp
	mov	ebp, esp

; 665  : 		return tvec3<T, P>(

	mov	edx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm0, QWORD PTR [edx]
	mulsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR [edx+8]
	mulsd	xmm0, QWORD PTR [ecx+8]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR [edx+16]
	mulsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [eax+16], xmm0

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	pop	ebp
	ret	0
??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@0@Z ENDP	; glm::operator*<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@0@Z PROC	; glm::operator*<double,0>, COMDAT

; 664  : 	{

	push	ebp
	mov	ebp, esp

; 665  : 		return tvec3<T, P>(

	mov	edx, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm0, QWORD PTR [edx]
	mulsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR [edx+8]
	mulsd	xmm0, QWORD PTR [ecx+8]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR [edx+16]
	mulsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [eax+16], xmm0

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	pop	ebp
	ret	0
??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@0@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@ABU?$tmat2x4@N$0A@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@ABU?$tmat2x4@N$0A@@0@@Z PROC ; glm::dualquat_cast<double,0>, COMDAT

; 295  : 	{

	push	ebp
	mov	ebp, esp

; 296  : 		return tdualquat<T, P>(

	mov	eax, DWORD PTR _x$[ebp]
	movsd	xmm6, QWORD PTR [eax+32]
	movsd	xmm4, QWORD PTR [eax+40]
	movsd	xmm7, QWORD PTR [eax+48]
	movsd	xmm5, QWORD PTR [eax+56]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm3, QWORD PTR [eax+16]
	movsd	xmm1, QWORD PTR [eax+24]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	unpcklpd xmm2, xmm0
	unpcklpd xmm6, xmm4
	unpcklpd xmm3, xmm1
	unpcklpd xmm7, xmm5
	movups	XMMWORD PTR [eax], xmm2
	movups	XMMWORD PTR [eax+32], xmm6
	movups	XMMWORD PTR [eax+16], xmm3
	movups	XMMWORD PTR [eax+48], xmm7

; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));
; 299  : 	}

	pop	ebp
	ret	0
??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@ABU?$tmat2x4@N$0A@@0@@Z ENDP ; glm::dualquat_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@ABU?$tmat3x4@N$0A@@0@@Z
_TEXT	SEGMENT
_real$6$ = -32						; size = 16
_real$3$ = -16						; size = 8
_real$1$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@ABU?$tmat3x4@N$0A@@0@@Z PROC ; glm::dualquat_cast<double,0>, COMDAT

; 303  : 	{

	push	ebp
	mov	ebp, esp

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	mov	eax, DWORD PTR _x$[ebp]
	sub	esp, 32					; 00000020H
	movsd	xmm0, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+40]
	movaps	xmm3, xmm0
	movsd	xmm2, QWORD PTR [eax+80]
	addsd	xmm3, xmm1
	addsd	xmm3, xmm2

; 307  : 		if(trace > static_cast<T>(0))

	comisd	xmm3, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN2@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addsd	xmm3, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;

	movsd	xmm7, QWORD PTR [eax+72]

; 313  : 			real.y = (x[0].z - x[2].x) * invr;

	movsd	xmm4, QWORD PTR [eax+16]
	subsd	xmm7, QWORD PTR [eax+48]
	sqrtsd	xmm1, xmm3
	subsd	xmm4, QWORD PTR [eax+64]
	divsd	xmm0, xmm1
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR _real$1$[ebp], xmm1

; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movsd	xmm1, QWORD PTR [eax+32]
	subsd	xmm1, QWORD PTR [eax+8]
	mulsd	xmm1, xmm0

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN123@dualquat_c
$LN2@dualquat_c:
	comisd	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comisd	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm7, xmm7

; 319  : 			T const invr = static_cast<T>(0.5) / r;
; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;

	movsd	xmm4, QWORD PTR [eax+32]
	addsd	xmm4, QWORD PTR [eax+8]
	subsd	xmm0, xmm1

; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movsd	xmm1, QWORD PTR [eax+64]
	addsd	xmm1, QWORD PTR [eax+16]
	subsd	xmm0, xmm2

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movsd	xmm2, QWORD PTR [eax+72]
	subsd	xmm2, QWORD PTR [eax+48]
	sqrtsd	xmm7, xmm0
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	divsd	xmm0, xmm7
	mulsd	xmm7, QWORD PTR __real@3fe0000000000000
	mulsd	xmm2, xmm0
	mulsd	xmm1, xmm0
	movsd	QWORD PTR _real$1$[ebp], xmm2

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN124@dualquat_c
$LN4@dualquat_c:
	comisd	xmm1, xmm2
	jbe	SHORT $LN6@dualquat_c

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	addsd	xmm1, QWORD PTR __real@3ff0000000000000
	xorps	xmm4, xmm4

; 328  : 			T const invr = static_cast<T>(0.5) / r;
; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movsd	xmm7, QWORD PTR [eax+32]
	addsd	xmm7, QWORD PTR [eax+8]
	subsd	xmm1, xmm0
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	subsd	xmm1, xmm2

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;
; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movsd	xmm2, QWORD PTR [eax+16]
	subsd	xmm2, QWORD PTR [eax+64]
	sqrtsd	xmm4, xmm1
	movsd	xmm1, QWORD PTR [eax+72]
	divsd	xmm0, xmm4
	addsd	xmm1, QWORD PTR [eax+48]
	mulsd	xmm4, QWORD PTR __real@3fe0000000000000
	mulsd	xmm2, xmm0
	mulsd	xmm7, xmm0
	mulsd	xmm1, xmm0
	movsd	QWORD PTR _real$1$[ebp], xmm2

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN125@dualquat_c
$LN6@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addsd	xmm2, QWORD PTR __real@3ff0000000000000

; 337  : 			T const invr = static_cast<T>(0.5) / r;
; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	movsd	xmm7, QWORD PTR [eax+64]

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	movsd	xmm4, QWORD PTR [eax+72]
	addsd	xmm7, QWORD PTR [eax+16]
	addsd	xmm4, QWORD PTR [eax+48]
	subsd	xmm2, xmm0
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	subsd	xmm2, xmm1
	xorps	xmm1, xmm1
	sqrtsd	xmm1, xmm2

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movsd	xmm2, QWORD PTR [eax+32]
	divsd	xmm0, xmm1
	subsd	xmm2, QWORD PTR [eax+8]
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm2, xmm0
	movsd	QWORD PTR _real$1$[ebp], xmm2
$LN123@dualquat_c:

; 337  : 			T const invr = static_cast<T>(0.5) / r;
; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulsd	xmm7, xmm0
$LN124@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulsd	xmm4, xmm0
$LN125@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movsd	xmm2, QWORD PTR [eax+24]
	movsd	xmm3, QWORD PTR [eax+56]
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR _real$1$[ebp]
	movaps	xmm5, xmm3
	movsd	xmm6, QWORD PTR [eax+88]
	mulsd	xmm5, xmm1

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	QWORD PTR _real$3$[ebp], xmm4
	movups	XMMWORD PTR _real$6$[ebp], xmm1
	addsd	xmm5, xmm0
	movaps	xmm0, xmm6
	mulsd	xmm0, xmm4
	movaps	xmm4, xmm3
	mulsd	xmm4, QWORD PTR _real$1$[ebp]
	subsd	xmm5, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm4, QWORD PTR __real@3fe0000000000000
	mulsd	xmm0, xmm1
	mulsd	xmm5, QWORD PTR __real@3fe0000000000000
	subsd	xmm4, xmm0
	movaps	xmm0, xmm6
	mulsd	xmm0, xmm7
	mulsd	xmm0, xmm1
	movaps	xmm1, xmm2
	mulsd	xmm1, QWORD PTR _real$3$[ebp]
	mulsd	xmm2, xmm7
	addsd	xmm4, xmm0
	movaps	xmm0, xmm3
	mulsd	xmm3, QWORD PTR _real$3$[ebp]
	mulsd	xmm0, xmm7
	unpcklpd xmm5, xmm4
	addsd	xmm2, xmm3
	movups	XMMWORD PTR [eax+32], xmm5
	subsd	xmm1, xmm0
	movaps	xmm0, xmm6
	mulsd	xmm0, QWORD PTR _real$1$[ebp]
	mulsd	xmm2, QWORD PTR __real@3fe0000000000000
	addsd	xmm1, xmm0
	movups	xmm0, XMMWORD PTR _real$6$[ebp]
	mulsd	xmm6, xmm0
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm6, QWORD PTR __real@bfe0000000000000
	subsd	xmm6, xmm2
	movsd	xmm2, QWORD PTR _real$3$[ebp]
	unpcklpd xmm7, xmm2
	movsd	xmm2, QWORD PTR _real$1$[ebp]
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [eax], xmm7
	unpcklpd xmm1, xmm6
	movups	XMMWORD PTR [eax+16], xmm0
	movups	XMMWORD PTR [eax+48], xmm1

; 350  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@ABU?$tmat3x4@N$0A@@0@@Z ENDP ; glm::dualquat_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@ABU?$tmat2x4@N$00@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@ABU?$tmat2x4@N$00@0@@Z PROC ; glm::dualquat_cast<double,1>, COMDAT

; 295  : 	{

	push	ebp
	mov	ebp, esp

; 296  : 		return tdualquat<T, P>(

	mov	eax, DWORD PTR _x$[ebp]
	movsd	xmm6, QWORD PTR [eax+32]
	movsd	xmm4, QWORD PTR [eax+40]
	movsd	xmm7, QWORD PTR [eax+48]
	movsd	xmm5, QWORD PTR [eax+56]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm3, QWORD PTR [eax+16]
	movsd	xmm1, QWORD PTR [eax+24]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	unpcklpd xmm2, xmm0
	unpcklpd xmm6, xmm4
	unpcklpd xmm3, xmm1
	unpcklpd xmm7, xmm5
	movups	XMMWORD PTR [eax], xmm2
	movups	XMMWORD PTR [eax+32], xmm6
	movups	XMMWORD PTR [eax+16], xmm3
	movups	XMMWORD PTR [eax+48], xmm7

; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));
; 299  : 	}

	pop	ebp
	ret	0
??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@ABU?$tmat2x4@N$00@0@@Z ENDP ; glm::dualquat_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@ABU?$tmat3x4@N$00@0@@Z
_TEXT	SEGMENT
_real$6$ = -32						; size = 16
_real$3$ = -16						; size = 8
_real$1$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@ABU?$tmat3x4@N$00@0@@Z PROC ; glm::dualquat_cast<double,1>, COMDAT

; 303  : 	{

	push	ebp
	mov	ebp, esp

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	mov	eax, DWORD PTR _x$[ebp]
	sub	esp, 32					; 00000020H
	movsd	xmm0, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+40]
	movaps	xmm3, xmm0
	movsd	xmm2, QWORD PTR [eax+80]
	addsd	xmm3, xmm1
	addsd	xmm3, xmm2

; 307  : 		if(trace > static_cast<T>(0))

	comisd	xmm3, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN2@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addsd	xmm3, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;

	movsd	xmm7, QWORD PTR [eax+72]

; 313  : 			real.y = (x[0].z - x[2].x) * invr;

	movsd	xmm4, QWORD PTR [eax+16]
	subsd	xmm7, QWORD PTR [eax+48]
	sqrtsd	xmm1, xmm3
	subsd	xmm4, QWORD PTR [eax+64]
	divsd	xmm0, xmm1
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR _real$1$[ebp], xmm1

; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movsd	xmm1, QWORD PTR [eax+32]
	subsd	xmm1, QWORD PTR [eax+8]
	mulsd	xmm1, xmm0

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN123@dualquat_c
$LN2@dualquat_c:
	comisd	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comisd	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm7, xmm7

; 319  : 			T const invr = static_cast<T>(0.5) / r;
; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;

	movsd	xmm4, QWORD PTR [eax+32]
	addsd	xmm4, QWORD PTR [eax+8]
	subsd	xmm0, xmm1

; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movsd	xmm1, QWORD PTR [eax+64]
	addsd	xmm1, QWORD PTR [eax+16]
	subsd	xmm0, xmm2

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movsd	xmm2, QWORD PTR [eax+72]
	subsd	xmm2, QWORD PTR [eax+48]
	sqrtsd	xmm7, xmm0
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	divsd	xmm0, xmm7
	mulsd	xmm7, QWORD PTR __real@3fe0000000000000
	mulsd	xmm2, xmm0
	mulsd	xmm1, xmm0
	movsd	QWORD PTR _real$1$[ebp], xmm2

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN124@dualquat_c
$LN4@dualquat_c:
	comisd	xmm1, xmm2
	jbe	SHORT $LN6@dualquat_c

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	addsd	xmm1, QWORD PTR __real@3ff0000000000000
	xorps	xmm4, xmm4

; 328  : 			T const invr = static_cast<T>(0.5) / r;
; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movsd	xmm7, QWORD PTR [eax+32]
	addsd	xmm7, QWORD PTR [eax+8]
	subsd	xmm1, xmm0
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	subsd	xmm1, xmm2

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;
; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movsd	xmm2, QWORD PTR [eax+16]
	subsd	xmm2, QWORD PTR [eax+64]
	sqrtsd	xmm4, xmm1
	movsd	xmm1, QWORD PTR [eax+72]
	divsd	xmm0, xmm4
	addsd	xmm1, QWORD PTR [eax+48]
	mulsd	xmm4, QWORD PTR __real@3fe0000000000000
	mulsd	xmm2, xmm0
	mulsd	xmm7, xmm0
	mulsd	xmm1, xmm0
	movsd	QWORD PTR _real$1$[ebp], xmm2

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN125@dualquat_c
$LN6@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addsd	xmm2, QWORD PTR __real@3ff0000000000000

; 337  : 			T const invr = static_cast<T>(0.5) / r;
; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	movsd	xmm7, QWORD PTR [eax+64]

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	movsd	xmm4, QWORD PTR [eax+72]
	addsd	xmm7, QWORD PTR [eax+16]
	addsd	xmm4, QWORD PTR [eax+48]
	subsd	xmm2, xmm0
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	subsd	xmm2, xmm1
	xorps	xmm1, xmm1
	sqrtsd	xmm1, xmm2

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movsd	xmm2, QWORD PTR [eax+32]
	divsd	xmm0, xmm1
	subsd	xmm2, QWORD PTR [eax+8]
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm2, xmm0
	movsd	QWORD PTR _real$1$[ebp], xmm2
$LN123@dualquat_c:

; 337  : 			T const invr = static_cast<T>(0.5) / r;
; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulsd	xmm7, xmm0
$LN124@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulsd	xmm4, xmm0
$LN125@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movsd	xmm2, QWORD PTR [eax+24]
	movsd	xmm3, QWORD PTR [eax+56]
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR _real$1$[ebp]
	movaps	xmm5, xmm3
	movsd	xmm6, QWORD PTR [eax+88]
	mulsd	xmm5, xmm1

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	QWORD PTR _real$3$[ebp], xmm4
	movups	XMMWORD PTR _real$6$[ebp], xmm1
	addsd	xmm5, xmm0
	movaps	xmm0, xmm6
	mulsd	xmm0, xmm4
	movaps	xmm4, xmm3
	mulsd	xmm4, QWORD PTR _real$1$[ebp]
	subsd	xmm5, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm4, QWORD PTR __real@3fe0000000000000
	mulsd	xmm0, xmm1
	mulsd	xmm5, QWORD PTR __real@3fe0000000000000
	subsd	xmm4, xmm0
	movaps	xmm0, xmm6
	mulsd	xmm0, xmm7
	mulsd	xmm0, xmm1
	movaps	xmm1, xmm2
	mulsd	xmm1, QWORD PTR _real$3$[ebp]
	mulsd	xmm2, xmm7
	addsd	xmm4, xmm0
	movaps	xmm0, xmm3
	mulsd	xmm3, QWORD PTR _real$3$[ebp]
	mulsd	xmm0, xmm7
	unpcklpd xmm5, xmm4
	addsd	xmm2, xmm3
	movups	XMMWORD PTR [eax+32], xmm5
	subsd	xmm1, xmm0
	movaps	xmm0, xmm6
	mulsd	xmm0, QWORD PTR _real$1$[ebp]
	mulsd	xmm2, QWORD PTR __real@3fe0000000000000
	addsd	xmm1, xmm0
	movups	xmm0, XMMWORD PTR _real$6$[ebp]
	mulsd	xmm6, xmm0
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm6, QWORD PTR __real@bfe0000000000000
	subsd	xmm6, xmm2
	movsd	xmm2, QWORD PTR _real$3$[ebp]
	unpcklpd xmm7, xmm2
	movsd	xmm2, QWORD PTR _real$1$[ebp]
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [eax], xmm7
	unpcklpd xmm1, xmm6
	movups	XMMWORD PTR [eax+16], xmm0
	movups	XMMWORD PTR [eax+48], xmm1

; 350  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@ABU?$tmat3x4@N$00@0@@Z ENDP ; glm::dualquat_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@ABU?$tmat2x4@N$01@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@ABU?$tmat2x4@N$01@0@@Z PROC ; glm::dualquat_cast<double,2>, COMDAT

; 295  : 	{

	push	ebp
	mov	ebp, esp

; 296  : 		return tdualquat<T, P>(

	mov	eax, DWORD PTR _x$[ebp]
	movsd	xmm6, QWORD PTR [eax+32]
	movsd	xmm4, QWORD PTR [eax+40]
	movsd	xmm7, QWORD PTR [eax+48]
	movsd	xmm5, QWORD PTR [eax+56]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm3, QWORD PTR [eax+16]
	movsd	xmm1, QWORD PTR [eax+24]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	unpcklpd xmm2, xmm0
	unpcklpd xmm6, xmm4
	unpcklpd xmm3, xmm1
	unpcklpd xmm7, xmm5
	movups	XMMWORD PTR [eax], xmm2
	movups	XMMWORD PTR [eax+32], xmm6
	movups	XMMWORD PTR [eax+16], xmm3
	movups	XMMWORD PTR [eax+48], xmm7

; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));
; 299  : 	}

	pop	ebp
	ret	0
??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@ABU?$tmat2x4@N$01@0@@Z ENDP ; glm::dualquat_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@ABU?$tmat3x4@N$01@0@@Z
_TEXT	SEGMENT
_real$6$ = -32						; size = 16
_real$3$ = -16						; size = 8
_real$1$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@ABU?$tmat3x4@N$01@0@@Z PROC ; glm::dualquat_cast<double,2>, COMDAT

; 303  : 	{

	push	ebp
	mov	ebp, esp

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	mov	eax, DWORD PTR _x$[ebp]
	sub	esp, 32					; 00000020H
	movsd	xmm0, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+40]
	movaps	xmm3, xmm0
	movsd	xmm2, QWORD PTR [eax+80]
	addsd	xmm3, xmm1
	addsd	xmm3, xmm2

; 307  : 		if(trace > static_cast<T>(0))

	comisd	xmm3, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN2@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addsd	xmm3, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;

	movsd	xmm7, QWORD PTR [eax+72]

; 313  : 			real.y = (x[0].z - x[2].x) * invr;

	movsd	xmm4, QWORD PTR [eax+16]
	subsd	xmm7, QWORD PTR [eax+48]
	sqrtsd	xmm1, xmm3
	subsd	xmm4, QWORD PTR [eax+64]
	divsd	xmm0, xmm1
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR _real$1$[ebp], xmm1

; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movsd	xmm1, QWORD PTR [eax+32]
	subsd	xmm1, QWORD PTR [eax+8]
	mulsd	xmm1, xmm0

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN123@dualquat_c
$LN2@dualquat_c:
	comisd	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comisd	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm7, xmm7

; 319  : 			T const invr = static_cast<T>(0.5) / r;
; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;

	movsd	xmm4, QWORD PTR [eax+32]
	addsd	xmm4, QWORD PTR [eax+8]
	subsd	xmm0, xmm1

; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movsd	xmm1, QWORD PTR [eax+64]
	addsd	xmm1, QWORD PTR [eax+16]
	subsd	xmm0, xmm2

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movsd	xmm2, QWORD PTR [eax+72]
	subsd	xmm2, QWORD PTR [eax+48]
	sqrtsd	xmm7, xmm0
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	divsd	xmm0, xmm7
	mulsd	xmm7, QWORD PTR __real@3fe0000000000000
	mulsd	xmm2, xmm0
	mulsd	xmm1, xmm0
	movsd	QWORD PTR _real$1$[ebp], xmm2

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN124@dualquat_c
$LN4@dualquat_c:
	comisd	xmm1, xmm2
	jbe	SHORT $LN6@dualquat_c

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	addsd	xmm1, QWORD PTR __real@3ff0000000000000
	xorps	xmm4, xmm4

; 328  : 			T const invr = static_cast<T>(0.5) / r;
; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movsd	xmm7, QWORD PTR [eax+32]
	addsd	xmm7, QWORD PTR [eax+8]
	subsd	xmm1, xmm0
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	subsd	xmm1, xmm2

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;
; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movsd	xmm2, QWORD PTR [eax+16]
	subsd	xmm2, QWORD PTR [eax+64]
	sqrtsd	xmm4, xmm1
	movsd	xmm1, QWORD PTR [eax+72]
	divsd	xmm0, xmm4
	addsd	xmm1, QWORD PTR [eax+48]
	mulsd	xmm4, QWORD PTR __real@3fe0000000000000
	mulsd	xmm2, xmm0
	mulsd	xmm7, xmm0
	mulsd	xmm1, xmm0
	movsd	QWORD PTR _real$1$[ebp], xmm2

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN125@dualquat_c
$LN6@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addsd	xmm2, QWORD PTR __real@3ff0000000000000

; 337  : 			T const invr = static_cast<T>(0.5) / r;
; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	movsd	xmm7, QWORD PTR [eax+64]

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	movsd	xmm4, QWORD PTR [eax+72]
	addsd	xmm7, QWORD PTR [eax+16]
	addsd	xmm4, QWORD PTR [eax+48]
	subsd	xmm2, xmm0
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	subsd	xmm2, xmm1
	xorps	xmm1, xmm1
	sqrtsd	xmm1, xmm2

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movsd	xmm2, QWORD PTR [eax+32]
	divsd	xmm0, xmm1
	subsd	xmm2, QWORD PTR [eax+8]
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm2, xmm0
	movsd	QWORD PTR _real$1$[ebp], xmm2
$LN123@dualquat_c:

; 337  : 			T const invr = static_cast<T>(0.5) / r;
; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulsd	xmm7, xmm0
$LN124@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulsd	xmm4, xmm0
$LN125@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movsd	xmm2, QWORD PTR [eax+24]
	movsd	xmm3, QWORD PTR [eax+56]
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR _real$1$[ebp]
	movaps	xmm5, xmm3
	movsd	xmm6, QWORD PTR [eax+88]
	mulsd	xmm5, xmm1

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	QWORD PTR _real$3$[ebp], xmm4
	movups	XMMWORD PTR _real$6$[ebp], xmm1
	addsd	xmm5, xmm0
	movaps	xmm0, xmm6
	mulsd	xmm0, xmm4
	movaps	xmm4, xmm3
	mulsd	xmm4, QWORD PTR _real$1$[ebp]
	subsd	xmm5, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm4, QWORD PTR __real@3fe0000000000000
	mulsd	xmm0, xmm1
	mulsd	xmm5, QWORD PTR __real@3fe0000000000000
	subsd	xmm4, xmm0
	movaps	xmm0, xmm6
	mulsd	xmm0, xmm7
	mulsd	xmm0, xmm1
	movaps	xmm1, xmm2
	mulsd	xmm1, QWORD PTR _real$3$[ebp]
	mulsd	xmm2, xmm7
	addsd	xmm4, xmm0
	movaps	xmm0, xmm3
	mulsd	xmm3, QWORD PTR _real$3$[ebp]
	mulsd	xmm0, xmm7
	unpcklpd xmm5, xmm4
	addsd	xmm2, xmm3
	movups	XMMWORD PTR [eax+32], xmm5
	subsd	xmm1, xmm0
	movaps	xmm0, xmm6
	mulsd	xmm0, QWORD PTR _real$1$[ebp]
	mulsd	xmm2, QWORD PTR __real@3fe0000000000000
	addsd	xmm1, xmm0
	movups	xmm0, XMMWORD PTR _real$6$[ebp]
	mulsd	xmm6, xmm0
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm6, QWORD PTR __real@bfe0000000000000
	subsd	xmm6, xmm2
	movsd	xmm2, QWORD PTR _real$3$[ebp]
	unpcklpd xmm7, xmm2
	movsd	xmm2, QWORD PTR _real$1$[ebp]
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [eax], xmm7
	unpcklpd xmm1, xmm6
	movups	XMMWORD PTR [eax+16], xmm0
	movups	XMMWORD PTR [eax+48], xmm1

; 350  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@ABU?$tmat3x4@N$01@0@@Z ENDP ; glm::dualquat_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat2x4@M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
$T2 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat2x4@M$0A@@0@@Z PROC ; glm::dualquat_cast<float,0>, COMDAT

; 295  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 296  : 		return tdualquat<T, P>(

	mov	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [eax+16], xmm0

; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));
; 299  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat2x4@M$0A@@0@@Z ENDP ; glm::dualquat_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat3x4@M$0A@@0@@Z
_TEXT	SEGMENT
_dual$ = -32						; size = 16
_real$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_real$1$ = 12						; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat3x4@M$0A@@0@@Z PROC ; glm::dualquat_cast<float,0>, COMDAT

; 303  : 	{

	push	ebp
	mov	ebp, esp

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	mov	eax, DWORD PTR _x$[ebp]
	sub	esp, 32					; 00000020H
	movss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR [eax+20]
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR [eax+40]
	addss	xmm3, xmm1
	addss	xmm3, xmm2

; 307  : 		if(trace > static_cast<T>(0))

	comiss	xmm3, DWORD PTR __real@00000000
	jbe	SHORT $LN2@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm0, DWORD PTR __real@3f000000

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;
; 313  : 			real.y = (x[0].z - x[2].x) * invr;
; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movss	xmm7, DWORD PTR [eax+16]
	subss	xmm7, DWORD PTR [eax+4]
	movss	xmm5, DWORD PTR [eax+36]
	sqrtss	xmm1, xmm3
	movss	xmm6, DWORD PTR [eax+8]
	divss	xmm0, xmm1
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm5, DWORD PTR [eax+24]
	subss	xmm6, DWORD PTR [eax+32]
	mulss	xmm7, xmm0

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN143@dualquat_c
$LN2@dualquat_c:
	comiss	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comiss	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addss	xmm0, DWORD PTR __real@3f800000
	xorps	xmm5, xmm5

; 319  : 			T const invr = static_cast<T>(0.5) / r;
; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;
; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movss	xmm7, DWORD PTR [eax+32]
	addss	xmm7, DWORD PTR [eax+8]
	movss	xmm6, DWORD PTR [eax+16]
	addss	xmm6, DWORD PTR [eax+4]
	subss	xmm0, xmm1

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movss	xmm1, DWORD PTR [eax+36]
	subss	xmm1, DWORD PTR [eax+24]
	subss	xmm0, xmm2
	sqrtss	xmm5, xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, xmm5
	mulss	xmm5, DWORD PTR __real@3f000000
	mulss	xmm7, xmm0
	mulss	xmm1, xmm0

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN144@dualquat_c
$LN4@dualquat_c:
	comiss	xmm1, xmm2
	jbe	SHORT $LN6@dualquat_c

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	addss	xmm1, DWORD PTR __real@3f800000
	xorps	xmm6, xmm6

; 328  : 			T const invr = static_cast<T>(0.5) / r;
; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movss	xmm5, DWORD PTR [eax+16]

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;

	movss	xmm7, DWORD PTR [eax+36]
	addss	xmm5, DWORD PTR [eax+4]
	addss	xmm7, DWORD PTR [eax+24]
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	subss	xmm1, xmm2
	sqrtss	xmm6, xmm1

; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movss	xmm1, DWORD PTR [eax+8]
	divss	xmm0, xmm6
	subss	xmm1, DWORD PTR [eax+32]
	mulss	xmm6, DWORD PTR __real@3f000000
	mulss	xmm5, xmm0
	mulss	xmm7, xmm0
	mulss	xmm1, xmm0

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN145@dualquat_c
$LN6@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm7, xmm7

; 337  : 			T const invr = static_cast<T>(0.5) / r;
; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	movss	xmm5, DWORD PTR [eax+32]

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	movss	xmm6, DWORD PTR [eax+36]
	addss	xmm5, DWORD PTR [eax+8]
	addss	xmm6, DWORD PTR [eax+24]
	subss	xmm2, xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	subss	xmm2, xmm1

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movss	xmm1, DWORD PTR [eax+16]
	subss	xmm1, DWORD PTR [eax+4]
	sqrtss	xmm7, xmm2
	divss	xmm0, xmm7
	mulss	xmm7, DWORD PTR __real@3f000000
	mulss	xmm1, xmm0
$LN143@dualquat_c:

; 337  : 			T const invr = static_cast<T>(0.5) / r;
; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulss	xmm5, xmm0
$LN144@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulss	xmm6, xmm0
$LN145@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movss	xmm4, DWORD PTR [eax+28]
	movss	xmm3, DWORD PTR [eax+12]
	movss	xmm2, DWORD PTR [eax+44]
	movaps	xmm0, xmm3
	movss	DWORD PTR _real$1$[ebp], xmm1
	mulss	xmm0, DWORD PTR _real$1$[ebp]

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR _real$[ebp+12], xmm1
	movaps	xmm1, xmm4
	mulss	xmm1, xmm7
	movss	DWORD PTR _real$[ebp+8], xmm7
	movss	DWORD PTR _real$[ebp+4], xmm6
	addss	xmm1, xmm0
	movss	DWORD PTR _real$[ebp], xmm5
	movaps	xmm0, xmm2
	mulss	xmm0, xmm6
	subss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, xmm7
	mulss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _dual$[ebp], xmm1
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR _real$1$[ebp]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm5
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm1, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, xmm5
	mulss	xmm4, xmm6
	movss	DWORD PTR _dual$[ebp+4], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, xmm6
	mulss	xmm3, xmm5
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR _real$1$[ebp]
	mulss	xmm2, xmm7
	addss	xmm3, xmm4
	addss	xmm1, xmm0
	movups	xmm0, XMMWORD PTR _real$[ebp]
	mulss	xmm2, DWORD PTR __real@bf000000
	mulss	xmm3, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm2, xmm3
	movups	XMMWORD PTR [eax], xmm0
	movss	DWORD PTR _dual$[ebp+8], xmm1
	movss	DWORD PTR _dual$[ebp+12], xmm2
	movups	xmm0, XMMWORD PTR _dual$[ebp]
	movups	XMMWORD PTR [eax+16], xmm0

; 350  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat3x4@M$0A@@0@@Z ENDP ; glm::dualquat_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat2x4@M$00@0@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
$T2 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat2x4@M$00@0@@Z PROC ; glm::dualquat_cast<float,1>, COMDAT

; 295  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 296  : 		return tdualquat<T, P>(

	mov	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [eax+16], xmm0

; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));
; 299  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat2x4@M$00@0@@Z ENDP ; glm::dualquat_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat3x4@M$00@0@@Z
_TEXT	SEGMENT
_dual$ = -32						; size = 16
_real$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_real$1$ = 12						; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat3x4@M$00@0@@Z PROC ; glm::dualquat_cast<float,1>, COMDAT

; 303  : 	{

	push	ebp
	mov	ebp, esp

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	mov	eax, DWORD PTR _x$[ebp]
	sub	esp, 32					; 00000020H
	movss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR [eax+20]
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR [eax+40]
	addss	xmm3, xmm1
	addss	xmm3, xmm2

; 307  : 		if(trace > static_cast<T>(0))

	comiss	xmm3, DWORD PTR __real@00000000
	jbe	SHORT $LN2@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm0, DWORD PTR __real@3f000000

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;
; 313  : 			real.y = (x[0].z - x[2].x) * invr;
; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movss	xmm7, DWORD PTR [eax+16]
	subss	xmm7, DWORD PTR [eax+4]
	movss	xmm5, DWORD PTR [eax+36]
	sqrtss	xmm1, xmm3
	movss	xmm6, DWORD PTR [eax+8]
	divss	xmm0, xmm1
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm5, DWORD PTR [eax+24]
	subss	xmm6, DWORD PTR [eax+32]
	mulss	xmm7, xmm0

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN143@dualquat_c
$LN2@dualquat_c:
	comiss	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comiss	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addss	xmm0, DWORD PTR __real@3f800000
	xorps	xmm5, xmm5

; 319  : 			T const invr = static_cast<T>(0.5) / r;
; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;
; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movss	xmm7, DWORD PTR [eax+32]
	addss	xmm7, DWORD PTR [eax+8]
	movss	xmm6, DWORD PTR [eax+16]
	addss	xmm6, DWORD PTR [eax+4]
	subss	xmm0, xmm1

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movss	xmm1, DWORD PTR [eax+36]
	subss	xmm1, DWORD PTR [eax+24]
	subss	xmm0, xmm2
	sqrtss	xmm5, xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, xmm5
	mulss	xmm5, DWORD PTR __real@3f000000
	mulss	xmm7, xmm0
	mulss	xmm1, xmm0

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN144@dualquat_c
$LN4@dualquat_c:
	comiss	xmm1, xmm2
	jbe	SHORT $LN6@dualquat_c

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	addss	xmm1, DWORD PTR __real@3f800000
	xorps	xmm6, xmm6

; 328  : 			T const invr = static_cast<T>(0.5) / r;
; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movss	xmm5, DWORD PTR [eax+16]

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;

	movss	xmm7, DWORD PTR [eax+36]
	addss	xmm5, DWORD PTR [eax+4]
	addss	xmm7, DWORD PTR [eax+24]
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	subss	xmm1, xmm2
	sqrtss	xmm6, xmm1

; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movss	xmm1, DWORD PTR [eax+8]
	divss	xmm0, xmm6
	subss	xmm1, DWORD PTR [eax+32]
	mulss	xmm6, DWORD PTR __real@3f000000
	mulss	xmm5, xmm0
	mulss	xmm7, xmm0
	mulss	xmm1, xmm0

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN145@dualquat_c
$LN6@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm7, xmm7

; 337  : 			T const invr = static_cast<T>(0.5) / r;
; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	movss	xmm5, DWORD PTR [eax+32]

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	movss	xmm6, DWORD PTR [eax+36]
	addss	xmm5, DWORD PTR [eax+8]
	addss	xmm6, DWORD PTR [eax+24]
	subss	xmm2, xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	subss	xmm2, xmm1

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movss	xmm1, DWORD PTR [eax+16]
	subss	xmm1, DWORD PTR [eax+4]
	sqrtss	xmm7, xmm2
	divss	xmm0, xmm7
	mulss	xmm7, DWORD PTR __real@3f000000
	mulss	xmm1, xmm0
$LN143@dualquat_c:

; 337  : 			T const invr = static_cast<T>(0.5) / r;
; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulss	xmm5, xmm0
$LN144@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulss	xmm6, xmm0
$LN145@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movss	xmm4, DWORD PTR [eax+28]
	movss	xmm3, DWORD PTR [eax+12]
	movss	xmm2, DWORD PTR [eax+44]
	movaps	xmm0, xmm3
	movss	DWORD PTR _real$1$[ebp], xmm1
	mulss	xmm0, DWORD PTR _real$1$[ebp]

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR _real$[ebp+12], xmm1
	movaps	xmm1, xmm4
	mulss	xmm1, xmm7
	movss	DWORD PTR _real$[ebp+8], xmm7
	movss	DWORD PTR _real$[ebp+4], xmm6
	addss	xmm1, xmm0
	movss	DWORD PTR _real$[ebp], xmm5
	movaps	xmm0, xmm2
	mulss	xmm0, xmm6
	subss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, xmm7
	mulss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _dual$[ebp], xmm1
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR _real$1$[ebp]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm5
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm1, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, xmm5
	mulss	xmm4, xmm6
	movss	DWORD PTR _dual$[ebp+4], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, xmm6
	mulss	xmm3, xmm5
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR _real$1$[ebp]
	mulss	xmm2, xmm7
	addss	xmm3, xmm4
	addss	xmm1, xmm0
	movups	xmm0, XMMWORD PTR _real$[ebp]
	mulss	xmm2, DWORD PTR __real@bf000000
	mulss	xmm3, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm2, xmm3
	movups	XMMWORD PTR [eax], xmm0
	movss	DWORD PTR _dual$[ebp+8], xmm1
	movss	DWORD PTR _dual$[ebp+12], xmm2
	movups	xmm0, XMMWORD PTR _dual$[ebp]
	movups	XMMWORD PTR [eax+16], xmm0

; 350  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat3x4@M$00@0@@Z ENDP ; glm::dualquat_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat2x4@M$01@0@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
$T2 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat2x4@M$01@0@@Z PROC ; glm::dualquat_cast<float,2>, COMDAT

; 295  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 296  : 		return tdualquat<T, P>(

	mov	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [eax+16], xmm0

; 297  : 			tquat<T, P>( x[0].w, x[0].x, x[0].y, x[0].z ),
; 298  : 			tquat<T, P>( x[1].w, x[1].x, x[1].y, x[1].z ));
; 299  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat2x4@M$01@0@@Z ENDP ; glm::dualquat_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat3x4@M$01@0@@Z
_TEXT	SEGMENT
_dual$ = -32						; size = 16
_real$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_real$1$ = 12						; size = 4
_x$ = 12						; size = 4
??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat3x4@M$01@0@@Z PROC ; glm::dualquat_cast<float,2>, COMDAT

; 303  : 	{

	push	ebp
	mov	ebp, esp

; 304  : 		tquat<T, P> real(uninitialize);
; 305  : 		
; 306  : 		T const trace = x[0].x + x[1].y + x[2].z;

	mov	eax, DWORD PTR _x$[ebp]
	sub	esp, 32					; 00000020H
	movss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR [eax+20]
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR [eax+40]
	addss	xmm3, xmm1
	addss	xmm3, xmm2

; 307  : 		if(trace > static_cast<T>(0))

	comiss	xmm3, DWORD PTR __real@00000000
	jbe	SHORT $LN2@dualquat_c

; 308  : 		{
; 309  : 			T const r = sqrt(T(1) + trace);

	addss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1

; 310  : 			T const invr = static_cast<T>(0.5) / r;

	movss	xmm0, DWORD PTR __real@3f000000

; 311  : 			real.w = static_cast<T>(0.5) * r;
; 312  : 			real.x = (x[2].y - x[1].z) * invr;
; 313  : 			real.y = (x[0].z - x[2].x) * invr;
; 314  : 			real.z = (x[1].x - x[0].y) * invr;

	movss	xmm7, DWORD PTR [eax+16]
	subss	xmm7, DWORD PTR [eax+4]
	movss	xmm5, DWORD PTR [eax+36]
	sqrtss	xmm1, xmm3
	movss	xmm6, DWORD PTR [eax+8]
	divss	xmm0, xmm1
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm5, DWORD PTR [eax+24]
	subss	xmm6, DWORD PTR [eax+32]
	mulss	xmm7, xmm0

; 315  : 		}
; 316  : 		else if(x[0].x > x[1].y && x[0].x > x[2].z)

	jmp	$LN143@dualquat_c
$LN2@dualquat_c:
	comiss	xmm0, xmm1
	jbe	SHORT $LN4@dualquat_c
	comiss	xmm0, xmm2
	jbe	SHORT $LN4@dualquat_c

; 317  : 		{
; 318  : 			T const r = sqrt(T(1) + x[0].x - x[1].y - x[2].z);

	addss	xmm0, DWORD PTR __real@3f800000
	xorps	xmm5, xmm5

; 319  : 			T const invr = static_cast<T>(0.5) / r;
; 320  : 			real.x = static_cast<T>(0.5)*r;
; 321  : 			real.y = (x[1].x + x[0].y) * invr;
; 322  : 			real.z = (x[0].z + x[2].x) * invr;

	movss	xmm7, DWORD PTR [eax+32]
	addss	xmm7, DWORD PTR [eax+8]
	movss	xmm6, DWORD PTR [eax+16]
	addss	xmm6, DWORD PTR [eax+4]
	subss	xmm0, xmm1

; 323  : 			real.w = (x[2].y - x[1].z) * invr;

	movss	xmm1, DWORD PTR [eax+36]
	subss	xmm1, DWORD PTR [eax+24]
	subss	xmm0, xmm2
	sqrtss	xmm5, xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, xmm5
	mulss	xmm5, DWORD PTR __real@3f000000
	mulss	xmm7, xmm0
	mulss	xmm1, xmm0

; 324  : 		}
; 325  : 		else if(x[1].y > x[2].z)

	jmp	$LN144@dualquat_c
$LN4@dualquat_c:
	comiss	xmm1, xmm2
	jbe	SHORT $LN6@dualquat_c

; 326  : 		{
; 327  : 			T const r = sqrt(T(1) + x[1].y - x[0].x - x[2].z);

	addss	xmm1, DWORD PTR __real@3f800000
	xorps	xmm6, xmm6

; 328  : 			T const invr = static_cast<T>(0.5) / r;
; 329  : 			real.x = (x[1].x + x[0].y) * invr;

	movss	xmm5, DWORD PTR [eax+16]

; 330  : 			real.y = static_cast<T>(0.5) * r;
; 331  : 			real.z = (x[2].y + x[1].z) * invr;

	movss	xmm7, DWORD PTR [eax+36]
	addss	xmm5, DWORD PTR [eax+4]
	addss	xmm7, DWORD PTR [eax+24]
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	subss	xmm1, xmm2
	sqrtss	xmm6, xmm1

; 332  : 			real.w = (x[0].z - x[2].x) * invr;

	movss	xmm1, DWORD PTR [eax+8]
	divss	xmm0, xmm6
	subss	xmm1, DWORD PTR [eax+32]
	mulss	xmm6, DWORD PTR __real@3f000000
	mulss	xmm5, xmm0
	mulss	xmm7, xmm0
	mulss	xmm1, xmm0

; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN145@dualquat_c
$LN6@dualquat_c:

; 335  : 		{
; 336  : 			T const r = sqrt(T(1) + x[2].z - x[0].x - x[1].y);

	addss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm7, xmm7

; 337  : 			T const invr = static_cast<T>(0.5) / r;
; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	movss	xmm5, DWORD PTR [eax+32]

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	movss	xmm6, DWORD PTR [eax+36]
	addss	xmm5, DWORD PTR [eax+8]
	addss	xmm6, DWORD PTR [eax+24]
	subss	xmm2, xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	subss	xmm2, xmm1

; 340  : 			real.z = static_cast<T>(0.5) * r;
; 341  : 			real.w = (x[1].x - x[0].y) * invr;

	movss	xmm1, DWORD PTR [eax+16]
	subss	xmm1, DWORD PTR [eax+4]
	sqrtss	xmm7, xmm2
	divss	xmm0, xmm7
	mulss	xmm7, DWORD PTR __real@3f000000
	mulss	xmm1, xmm0
$LN143@dualquat_c:

; 337  : 			T const invr = static_cast<T>(0.5) / r;
; 338  : 			real.x = (x[0].z + x[2].x) * invr;

	mulss	xmm5, xmm0
$LN144@dualquat_c:

; 339  : 			real.y = (x[2].y + x[1].z) * invr;

	mulss	xmm6, xmm0
$LN145@dualquat_c:

; 342  : 		}
; 343  : 		
; 344  : 		tquat<T, P> dual(uninitialize);
; 345  : 		dual.x =  static_cast<T>(0.5) * ( x[0].w * real.w + x[1].w * real.z - x[2].w * real.y);

	movss	xmm4, DWORD PTR [eax+28]
	movss	xmm3, DWORD PTR [eax+12]
	movss	xmm2, DWORD PTR [eax+44]
	movaps	xmm0, xmm3
	movss	DWORD PTR _real$1$[ebp], xmm1
	mulss	xmm0, DWORD PTR _real$1$[ebp]

; 346  : 		dual.y =  static_cast<T>(0.5) * (-x[0].w * real.z + x[1].w * real.w + x[2].w * real.x);
; 347  : 		dual.z =  static_cast<T>(0.5) * ( x[0].w * real.y - x[1].w * real.x + x[2].w * real.w);
; 348  : 		dual.w = -static_cast<T>(0.5) * ( x[0].w * real.x + x[1].w * real.y + x[2].w * real.z);
; 349  : 		return tdualquat<T, P>(real, dual);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR _real$[ebp+12], xmm1
	movaps	xmm1, xmm4
	mulss	xmm1, xmm7
	movss	DWORD PTR _real$[ebp+8], xmm7
	movss	DWORD PTR _real$[ebp+4], xmm6
	addss	xmm1, xmm0
	movss	DWORD PTR _real$[ebp], xmm5
	movaps	xmm0, xmm2
	mulss	xmm0, xmm6
	subss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, xmm7
	mulss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _dual$[ebp], xmm1
	movaps	xmm1, xmm4
	mulss	xmm1, DWORD PTR _real$1$[ebp]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm5
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm1, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, xmm5
	mulss	xmm4, xmm6
	movss	DWORD PTR _dual$[ebp+4], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, xmm6
	mulss	xmm3, xmm5
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR _real$1$[ebp]
	mulss	xmm2, xmm7
	addss	xmm3, xmm4
	addss	xmm1, xmm0
	movups	xmm0, XMMWORD PTR _real$[ebp]
	mulss	xmm2, DWORD PTR __real@bf000000
	mulss	xmm3, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm2, xmm3
	movups	XMMWORD PTR [eax], xmm0
	movss	DWORD PTR _dual$[ebp+8], xmm1
	movss	DWORD PTR _dual$[ebp+12], xmm2
	movups	xmm0, XMMWORD PTR _dual$[ebp]
	movups	XMMWORD PTR [eax+16], xmm0

; 350  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat3x4@M$01@0@@Z ENDP ; glm::dualquat_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@N$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@ABU?$tquat@N$0A@@0@@Z
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat4_cast@N$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@ABU?$tquat@N$0A@@0@@Z PROC ; glm::mat4_cast<double,0>, COMDAT

; 616  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	push	DWORD PTR _q$[ebp]
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@ABU?$tquat@N$0A@@0@@Z ; glm::mat3_cast<double,0>

; 618  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [esi], xmm3
	add	esp, 8
	xor	ecx, ebp
	movups	XMMWORD PTR [esi+16], xmm3
	movups	XMMWORD PTR [esi+32], xmm3
	movups	XMMWORD PTR [esi+48], xmm3
	movups	XMMWORD PTR [esi+64], xmm3
	movups	XMMWORD PTR [esi+80], xmm3
	movups	XMMWORD PTR [esi+96], xmm3
	movups	XMMWORD PTR [esi+112], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [esi], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+16], xmm2
	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [esi+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+48], xmm2
	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm2, QWORD PTR [eax+64]
	mov	eax, esi
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [esi+64], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+96], xmm0
	movups	XMMWORD PTR [esi+80], xmm2
	movups	XMMWORD PTR [esi+112], xmm1
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$mat4_cast@N$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@ABU?$tquat@N$0A@@0@@Z ENDP ; glm::mat4_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@ABU?$tquat@N$0A@@0@@Z
_TEXT	SEGMENT
_qyz$1$ = -32						; size = 8
_qxx$1$ = -24						; size = 8
_qxz$1$ = -16						; size = 8
_qyy$1$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@ABU?$tquat@N$0A@@0@@Z PROC ; glm::mat3_cast<double,0>, COMDAT

; 588  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 589  : 		tmat3x3<T, P> Result(T(1));

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	xorps	xmm1, xmm1
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000

; 590  : 		T qxx(q.x * q.x);

	mov	eax, DWORD PTR _q$[ebp]
	movups	XMMWORD PTR [ecx], xmm1
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+24], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movq	QWORD PTR [ecx+64], xmm1
	movsd	xmm2, QWORD PTR [eax]

; 591  : 		T qyy(q.y * q.y);

	movsd	xmm1, QWORD PTR [eax+8]
	movaps	xmm0, xmm2
	mulsd	xmm0, xmm2

; 592  : 		T qzz(q.z * q.z);
; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);

	movaps	xmm4, xmm1
	mulsd	xmm4, xmm2
	movsd	QWORD PTR _qxx$1$[ebp], xmm0
	movaps	xmm0, xmm1
	mulsd	xmm0, xmm1
	movsd	QWORD PTR _qyy$1$[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movaps	xmm3, xmm0
	movaps	xmm7, xmm0
	mulsd	xmm3, xmm2
	mulsd	xmm7, xmm0
	movsd	QWORD PTR _qxz$1$[ebp], xmm3

; 595  : 		T qyz(q.y * q.z);

	movaps	xmm3, xmm0
	mulsd	xmm3, xmm1
	movsd	QWORD PTR _qyz$1$[ebp], xmm3

; 596  : 		T qwx(q.w * q.x);

	movsd	xmm3, QWORD PTR [eax+24]
	movaps	xmm6, xmm3

; 597  : 		T qwy(q.w * q.y);

	movaps	xmm5, xmm3

; 598  : 		T qwz(q.w * q.z);

	mulsd	xmm3, xmm0

; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);

	movsd	xmm0, QWORD PTR _qyy$1$[ebp]
	mulsd	xmm6, xmm2
	movsd	xmm2, QWORD PTR __real@4000000000000000
	mulsd	xmm0, xmm2
	mulsd	xmm5, xmm1
	mulsd	xmm7, xmm2
	movaps	xmm1, xmm0
	movsd	QWORD PTR _qyy$1$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	addsd	xmm1, xmm7
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx], xmm0

; 601  : 		Result[0][1] = T(2) * (qxy + qwz);

	movaps	xmm0, xmm3
	addsd	xmm0, xmm4

; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);

	subsd	xmm4, xmm3

; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);

	movsd	xmm3, QWORD PTR _qxx$1$[ebp]
	mulsd	xmm3, xmm2
	mulsd	xmm0, xmm2
	mulsd	xmm4, xmm2
	movaps	xmm1, xmm3
	addsd	xmm1, xmm7
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _qxz$1$[ebp]
	subsd	xmm0, xmm5
	movsd	QWORD PTR [ecx+24], xmm4
	movsd	xmm4, QWORD PTR __real@3ff0000000000000

; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);

	addsd	xmm5, QWORD PTR _qxz$1$[ebp]
	mulsd	xmm0, xmm2
	mulsd	xmm5, xmm2
	movsd	QWORD PTR [ecx+16], xmm0
	movaps	xmm0, xmm4
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _qyz$1$[ebp]
	movsd	QWORD PTR [ecx+48], xmm5
	movsd	QWORD PTR [ecx+32], xmm0
	movaps	xmm0, xmm6
	addsd	xmm0, xmm1

; 609  : 		Result[2][1] = T(2) * (qyz - qwx);

	subsd	xmm1, xmm6
	mulsd	xmm0, xmm2
	mulsd	xmm1, xmm2
	movsd	QWORD PTR [ecx+40], xmm0

; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);

	addsd	xmm3, QWORD PTR _qyy$1$[ebp]
	movsd	QWORD PTR [ecx+56], xmm1

; 611  : 		return Result;

	mov	eax, ecx
	subsd	xmm4, xmm3
	movsd	QWORD PTR [ecx+64], xmm4

; 612  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@ABU?$tquat@N$0A@@0@@Z ENDP ; glm::mat3_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$normalize@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU10@@Z PROC ; glm::normalize<double,0>, COMDAT

; 380  : 	{

	push	ebp
	mov	ebp, esp

; 381  : 		T len = length(q);

	mov	ecx, DWORD PTR _q$[ebp]

; 382  : 		if(len <= T(0)) // Problem
; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm2, QWORD PTR [ecx+8]
	movsd	xmm0, QWORD PTR [ecx+24]
	movsd	xmm3, QWORD PTR [ecx]
	movsd	xmm1, QWORD PTR [ecx+16]
	mulsd	xmm2, xmm2
	mulsd	xmm0, xmm0
	mulsd	xmm3, xmm3
	mulsd	xmm1, xmm1
	addsd	xmm2, xmm3
	addsd	xmm0, xmm1
	addsd	xmm0, xmm2
	xorps	xmm2, xmm2
	sqrtsd	xmm2, xmm0
	xorps	xmm0, xmm0
	comisd	xmm0, xmm2
	jb	SHORT $LN2@normalize
	movups	XMMWORD PTR [eax], xmm0
	movsd	QWORD PTR [eax+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [eax+24], xmm0

; 386  : 	}

	pop	ebp
	ret	0
$LN2@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm2

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [ecx]
	unpcklpd xmm1, xmm1
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [eax+16], xmm0

; 386  : 	}

	pop	ebp
	ret	0
??$normalize@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU10@@Z ENDP ; glm::normalize<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANABU?$tvec3@N$0A@@3@0@Z
_TEXT	SEGMENT
_tmp$ = -24						; size = 24
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANABU?$tvec3@N$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,double,0,0>::call, COMDAT

; 57   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm0, QWORD PTR [ecx]
	mulsd	xmm0, QWORD PTR [eax]
	fld	QWORD PTR [ecx+8]
	fmul	QWORD PTR [eax+8]
	movsd	QWORD PTR _tmp$[ebp], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm0, QWORD PTR [eax+16]

; 59   : 			return tmp.x + tmp.y + tmp.z;

	fadd	QWORD PTR _tmp$[ebp]
	movsd	QWORD PTR _tmp$[ebp+16], xmm0
	fadd	QWORD PTR _tmp$[ebp+16]

; 60   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANABU?$tvec3@N$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@N$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
??$cross@N$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@0@Z PROC	; glm::cross<double,0>, COMDAT

; 180  : 	{

	push	ebp
	mov	ebp, esp

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+8]
	mulsd	xmm1, QWORD PTR [edx+8]
	mulsd	xmm0, QWORD PTR [edx+16]
	movsd	xmm3, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [edx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm2, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR [edx+16]
	mulsd	xmm3, QWORD PTR [edx+8]
	subsd	xmm1, xmm0
	subsd	xmm2, xmm3
	movsd	QWORD PTR [ecx+8], xmm1
	movsd	QWORD PTR [ecx+16], xmm2

; 182  : 	}

	pop	ebp
	ret	0
??$cross@N$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@0@Z ENDP	; glm::cross<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@@Z
_TEXT	SEGMENT
_c$ = -24						; size = 8
_b$ = -16						; size = 8
_a$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$sin@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@@Z PROC ; glm::sin<double,0,glm::tvec3>, COMDAT

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	mov	esi, DWORD PTR _v$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [esi]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	movsd	xmm0, QWORD PTR [esi+8]
	fstp	QWORD PTR _a$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	movsd	xmm0, QWORD PTR [esi+16]
	fstp	QWORD PTR _b$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	movsd	xmm0, QWORD PTR _a$[ebp]
	fstp	QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax+16], xmm0
	pop	esi

; 47   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$sin@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@@Z ENDP ; glm::sin<double,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@@Z
_TEXT	SEGMENT
_c$ = -24						; size = 8
_b$ = -16						; size = 8
_a$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$cos@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@@Z PROC ; glm::cos<double,0,glm::tvec3>, COMDAT

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	mov	esi, DWORD PTR _v$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [esi]
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	movsd	xmm0, QWORD PTR [esi+8]
	fstp	QWORD PTR _a$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	movsd	xmm0, QWORD PTR [esi+16]
	fstp	QWORD PTR _b$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	movsd	xmm0, QWORD PTR _a$[ebp]
	fstp	QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax+16], xmm0
	pop	esi

; 56   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$cos@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@@Z ENDP ; glm::cos<double,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@N@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_scalar$ = 16						; size = 8
??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@N@Z PROC	; glm::operator*<double,0>, COMDAT

; 628  : 	{

	push	ebp
	mov	ebp, esp

; 629  : 		return tvec3<T, P>(

	mov	ecx, DWORD PTR _v$[ebp]
	movsd	xmm1, QWORD PTR _scalar$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	unpcklpd xmm1, xmm1
	movups	xmm0, XMMWORD PTR [ecx]
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+16], xmm0

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	pop	ebp
	ret	0
??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@ABU10@N@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat3x3@N$0A@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat3x3@N$0A@@0@@Z PROC ; glm::quat_cast<double,0>, COMDAT

; 622  : 	{

	push	ebp
	mov	ebp, esp

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	mov	eax, DWORD PTR _m$[ebp]

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];
; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];
; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];
; 627  : 
; 628  : 		int biggestIndex = 0;

	xor	edx, edx
	movsd	xmm0, QWORD PTR [eax+64]
	movsd	xmm1, QWORD PTR [eax]
	movaps	xmm3, xmm0
	movsd	xmm2, QWORD PTR [eax+32]
	subsd	xmm3, xmm1
	movaps	xmm5, xmm1
	movaps	xmm4, xmm2
	subsd	xmm5, xmm2
	subsd	xmm4, xmm1
	subsd	xmm3, xmm2
	addsd	xmm2, xmm1
	subsd	xmm5, xmm0
	subsd	xmm4, xmm0
	addsd	xmm2, xmm0

; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm5, xmm2
	jbe	SHORT $LN4@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm2, xmm5

; 633  : 			biggestIndex = 1;

	mov	edx, 1
$LN4@quat_cast:

; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm4, xmm2
	jbe	SHORT $LN5@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;

	movaps	xmm2, xmm4

; 638  : 			biggestIndex = 2;

	mov	edx, 2
$LN5@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm3, xmm2
	jbe	SHORT $LN6@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;

	movaps	xmm2, xmm3

; 643  : 			biggestIndex = 3;

	mov	edx, 3
$LN6@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);
; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movsd	xmm1, QWORD PTR __real@3fd0000000000000

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	addsd	xmm2, QWORD PTR __real@3ff0000000000000
	sqrtsd	xmm2, xmm2
	mulsd	xmm2, QWORD PTR __real@3fe0000000000000
	divsd	xmm1, xmm2
	cmp	edx, 3
	ja	$LN11@quat_cast
	jmp	DWORD PTR $LN160@quat_cast[edx*4]
$LN7@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [eax+40]
	subsd	xmm0, QWORD PTR [eax+56]
	movsd	QWORD PTR [ecx+24], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx], xmm0

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [eax+48]
	subsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+8], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [eax+8]
	subsd	xmm0, QWORD PTR [eax+24]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN8@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [eax+40]
	subsd	xmm0, QWORD PTR [eax+56]

; 660  : 			Result.x = biggestVal;

	movsd	QWORD PTR [ecx], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+24], xmm0

; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [eax+24]
	addsd	xmm0, QWORD PTR [eax+8]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+8], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [eax+48]
	addsd	xmm0, QWORD PTR [eax+16]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN9@quat_cast:

; 663  : 			break;
; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [eax+48]
	subsd	xmm0, QWORD PTR [eax+16]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;
; 667  : 			Result.y = biggestVal;

	movsd	QWORD PTR [ecx+8], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movsd	xmm0, QWORD PTR [eax+24]
	addsd	xmm0, QWORD PTR [eax+8]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [eax+56]
	addsd	xmm0, QWORD PTR [eax+40]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN10@quat_cast:

; 669  : 			break;
; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [eax+8]
	subsd	xmm0, QWORD PTR [eax+24]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;
; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movsd	QWORD PTR [ecx+16], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movsd	xmm0, QWORD PTR [eax+48]
	addsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+56]
	addsd	xmm0, QWORD PTR [eax+40]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+8], xmm0
$LN11@quat_cast:

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx

; 682  : 	}

	pop	ebp
	ret	0
$LN160@quat_cast:
	DD	$LN7@quat_cast
	DD	$LN8@quat_cast
	DD	$LN9@quat_cast
	DD	$LN10@quat_cast
??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat3x3@N$0A@@0@@Z ENDP ; glm::quat_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat4x4@N$0A@@0@@Z
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m4$ = 12						; size = 4
??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat4x4@N$0A@@0@@Z PROC ; glm::quat_cast<double,0>, COMDAT

; 686  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	mov	eax, DWORD PTR _m4$[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+40]
	movups	XMMWORD PTR $T1[ebp], xmm2
	movsd	xmm2, QWORD PTR [eax+32]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+72]
	movq	QWORD PTR $T1[ebp+16], xmm1
	movsd	xmm1, QWORD PTR [eax+48]
	movups	XMMWORD PTR $T1[ebp+24], xmm2
	movsd	xmm2, QWORD PTR [eax+64]
	movq	QWORD PTR $T1[ebp+40], xmm1
	movsd	xmm1, QWORD PTR [eax+80]
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	unpcklpd xmm2, xmm0
	push	esi
	movups	XMMWORD PTR $T1[ebp+48], xmm2
	movq	QWORD PTR $T1[ebp+64], xmm1
	call	??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat3x3@N$0A@@0@@Z ; glm::quat_cast<double,0>

; 688  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat4x4@N$0A@@0@@Z ENDP ; glm::quat_cast<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@N$00@glm@@YA?AU?$tmat4x4@N$00@0@ABU?$tquat@N$00@0@@Z
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat4_cast@N$00@glm@@YA?AU?$tmat4x4@N$00@0@ABU?$tquat@N$00@0@@Z PROC ; glm::mat4_cast<double,1>, COMDAT

; 616  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	push	DWORD PTR _q$[ebp]
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@ABU?$tquat@N$00@0@@Z ; glm::mat3_cast<double,1>

; 618  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [esi], xmm3
	add	esp, 8
	xor	ecx, ebp
	movups	XMMWORD PTR [esi+16], xmm3
	movups	XMMWORD PTR [esi+32], xmm3
	movups	XMMWORD PTR [esi+48], xmm3
	movups	XMMWORD PTR [esi+64], xmm3
	movups	XMMWORD PTR [esi+80], xmm3
	movups	XMMWORD PTR [esi+96], xmm3
	movups	XMMWORD PTR [esi+112], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [esi], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+16], xmm2
	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [esi+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+48], xmm2
	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm2, QWORD PTR [eax+64]
	mov	eax, esi
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [esi+64], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+96], xmm0
	movups	XMMWORD PTR [esi+80], xmm2
	movups	XMMWORD PTR [esi+112], xmm1
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$mat4_cast@N$00@glm@@YA?AU?$tmat4x4@N$00@0@ABU?$tquat@N$00@0@@Z ENDP ; glm::mat4_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@ABU?$tquat@N$00@0@@Z
_TEXT	SEGMENT
_qyz$1$ = -32						; size = 8
_qxx$1$ = -24						; size = 8
_qxz$1$ = -16						; size = 8
_qyy$1$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@ABU?$tquat@N$00@0@@Z PROC ; glm::mat3_cast<double,1>, COMDAT

; 588  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 589  : 		tmat3x3<T, P> Result(T(1));

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	xorps	xmm1, xmm1
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000

; 590  : 		T qxx(q.x * q.x);

	mov	eax, DWORD PTR _q$[ebp]
	movups	XMMWORD PTR [ecx], xmm1
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+24], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movq	QWORD PTR [ecx+64], xmm1
	movsd	xmm2, QWORD PTR [eax]

; 591  : 		T qyy(q.y * q.y);

	movsd	xmm1, QWORD PTR [eax+8]
	movaps	xmm0, xmm2
	mulsd	xmm0, xmm2

; 592  : 		T qzz(q.z * q.z);
; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);

	movaps	xmm4, xmm1
	mulsd	xmm4, xmm2
	movsd	QWORD PTR _qxx$1$[ebp], xmm0
	movaps	xmm0, xmm1
	mulsd	xmm0, xmm1
	movsd	QWORD PTR _qyy$1$[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movaps	xmm3, xmm0
	movaps	xmm7, xmm0
	mulsd	xmm3, xmm2
	mulsd	xmm7, xmm0
	movsd	QWORD PTR _qxz$1$[ebp], xmm3

; 595  : 		T qyz(q.y * q.z);

	movaps	xmm3, xmm0
	mulsd	xmm3, xmm1
	movsd	QWORD PTR _qyz$1$[ebp], xmm3

; 596  : 		T qwx(q.w * q.x);

	movsd	xmm3, QWORD PTR [eax+24]
	movaps	xmm6, xmm3

; 597  : 		T qwy(q.w * q.y);

	movaps	xmm5, xmm3

; 598  : 		T qwz(q.w * q.z);

	mulsd	xmm3, xmm0

; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);

	movsd	xmm0, QWORD PTR _qyy$1$[ebp]
	mulsd	xmm6, xmm2
	movsd	xmm2, QWORD PTR __real@4000000000000000
	mulsd	xmm0, xmm2
	mulsd	xmm5, xmm1
	mulsd	xmm7, xmm2
	movaps	xmm1, xmm0
	movsd	QWORD PTR _qyy$1$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	addsd	xmm1, xmm7
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx], xmm0

; 601  : 		Result[0][1] = T(2) * (qxy + qwz);

	movaps	xmm0, xmm3
	addsd	xmm0, xmm4

; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);

	subsd	xmm4, xmm3

; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);

	movsd	xmm3, QWORD PTR _qxx$1$[ebp]
	mulsd	xmm3, xmm2
	mulsd	xmm0, xmm2
	mulsd	xmm4, xmm2
	movaps	xmm1, xmm3
	addsd	xmm1, xmm7
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _qxz$1$[ebp]
	subsd	xmm0, xmm5
	movsd	QWORD PTR [ecx+24], xmm4
	movsd	xmm4, QWORD PTR __real@3ff0000000000000

; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);

	addsd	xmm5, QWORD PTR _qxz$1$[ebp]
	mulsd	xmm0, xmm2
	mulsd	xmm5, xmm2
	movsd	QWORD PTR [ecx+16], xmm0
	movaps	xmm0, xmm4
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _qyz$1$[ebp]
	movsd	QWORD PTR [ecx+48], xmm5
	movsd	QWORD PTR [ecx+32], xmm0
	movaps	xmm0, xmm6
	addsd	xmm0, xmm1

; 609  : 		Result[2][1] = T(2) * (qyz - qwx);

	subsd	xmm1, xmm6
	mulsd	xmm0, xmm2
	mulsd	xmm1, xmm2
	movsd	QWORD PTR [ecx+40], xmm0

; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);

	addsd	xmm3, QWORD PTR _qyy$1$[ebp]
	movsd	QWORD PTR [ecx+56], xmm1

; 611  : 		return Result;

	mov	eax, ecx
	subsd	xmm4, xmm3
	movsd	QWORD PTR [ecx+64], xmm4

; 612  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@ABU?$tquat@N$00@0@@Z ENDP ; glm::mat3_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@N$00@glm@@YA?AU?$tquat@N$00@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$normalize@N$00@glm@@YA?AU?$tquat@N$00@0@ABU10@@Z PROC ; glm::normalize<double,1>, COMDAT

; 380  : 	{

	push	ebp
	mov	ebp, esp

; 381  : 		T len = length(q);

	mov	ecx, DWORD PTR _q$[ebp]

; 382  : 		if(len <= T(0)) // Problem
; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm2, QWORD PTR [ecx+8]
	movsd	xmm0, QWORD PTR [ecx+24]
	movsd	xmm3, QWORD PTR [ecx]
	movsd	xmm1, QWORD PTR [ecx+16]
	mulsd	xmm2, xmm2
	mulsd	xmm0, xmm0
	mulsd	xmm3, xmm3
	mulsd	xmm1, xmm1
	addsd	xmm2, xmm3
	addsd	xmm0, xmm1
	addsd	xmm0, xmm2
	xorps	xmm2, xmm2
	sqrtsd	xmm2, xmm0
	xorps	xmm0, xmm0
	comisd	xmm0, xmm2
	jb	SHORT $LN2@normalize
	movups	XMMWORD PTR [eax], xmm0
	movsd	QWORD PTR [eax+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [eax+24], xmm0

; 386  : 	}

	pop	ebp
	ret	0
$LN2@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm2

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [ecx]
	unpcklpd xmm1, xmm1
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [eax+16], xmm0

; 386  : 	}

	pop	ebp
	ret	0
??$normalize@N$00@glm@@YA?AU?$tquat@N$00@0@ABU10@@Z ENDP ; glm::normalize<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@N$00$0A@@detail@glm@@SANABU?$tvec3@N$00@3@0@Z
_TEXT	SEGMENT
_tmp$ = -24						; size = 24
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utvec3@glm@@N$00$0A@@detail@glm@@SANABU?$tvec3@N$00@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,double,1,0>::call, COMDAT

; 57   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm0, QWORD PTR [ecx]
	mulsd	xmm0, QWORD PTR [eax]
	fld	QWORD PTR [ecx+8]
	fmul	QWORD PTR [eax+8]
	movsd	QWORD PTR _tmp$[ebp], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm0, QWORD PTR [eax+16]

; 59   : 			return tmp.x + tmp.y + tmp.z;

	fadd	QWORD PTR _tmp$[ebp]
	movsd	QWORD PTR _tmp$[ebp+16], xmm0
	fadd	QWORD PTR _tmp$[ebp+16]

; 60   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utvec3@glm@@N$00$0A@@detail@glm@@SANABU?$tvec3@N$00@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,double,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@N$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
??$cross@N$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@0@Z PROC	; glm::cross<double,1>, COMDAT

; 180  : 	{

	push	ebp
	mov	ebp, esp

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+8]
	mulsd	xmm1, QWORD PTR [edx+8]
	mulsd	xmm0, QWORD PTR [edx+16]
	movsd	xmm3, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [edx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm2, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR [edx+16]
	mulsd	xmm3, QWORD PTR [edx+8]
	subsd	xmm1, xmm0
	subsd	xmm2, xmm3
	movsd	QWORD PTR [ecx+8], xmm1
	movsd	QWORD PTR [ecx+16], xmm2

; 182  : 	}

	pop	ebp
	ret	0
??$cross@N$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@0@Z ENDP	; glm::cross<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@ABU10@@Z
_TEXT	SEGMENT
_c$ = -24						; size = 8
_b$ = -16						; size = 8
_a$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$sin@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@ABU10@@Z PROC ; glm::sin<double,1,glm::tvec3>, COMDAT

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	mov	esi, DWORD PTR _v$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [esi]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	movsd	xmm0, QWORD PTR [esi+8]
	fstp	QWORD PTR _a$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	movsd	xmm0, QWORD PTR [esi+16]
	fstp	QWORD PTR _b$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	movsd	xmm0, QWORD PTR _a$[ebp]
	fstp	QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax+16], xmm0
	pop	esi

; 47   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$sin@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@ABU10@@Z ENDP ; glm::sin<double,1,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@ABU10@@Z
_TEXT	SEGMENT
_c$ = -24						; size = 8
_b$ = -16						; size = 8
_a$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$cos@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@ABU10@@Z PROC ; glm::cos<double,1,glm::tvec3>, COMDAT

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	mov	esi, DWORD PTR _v$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [esi]
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	movsd	xmm0, QWORD PTR [esi+8]
	fstp	QWORD PTR _a$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	movsd	xmm0, QWORD PTR [esi+16]
	fstp	QWORD PTR _b$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	movsd	xmm0, QWORD PTR _a$[ebp]
	fstp	QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax+16], xmm0
	pop	esi

; 56   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$cos@N$00Utvec3@glm@@@glm@@YA?AU?$tvec3@N$00@0@ABU10@@Z ENDP ; glm::cos<double,1,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@N@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_scalar$ = 16						; size = 8
??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@N@Z PROC	; glm::operator*<double,1>, COMDAT

; 628  : 	{

	push	ebp
	mov	ebp, esp

; 629  : 		return tvec3<T, P>(

	mov	ecx, DWORD PTR _v$[ebp]
	movsd	xmm1, QWORD PTR _scalar$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	unpcklpd xmm1, xmm1
	movups	xmm0, XMMWORD PTR [ecx]
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+16], xmm0

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	pop	ebp
	ret	0
??$?DN$00@glm@@YA?AU?$tvec3@N$00@0@ABU10@N@Z ENDP	; glm::operator*<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat3x3@N$00@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat3x3@N$00@0@@Z PROC ; glm::quat_cast<double,1>, COMDAT

; 622  : 	{

	push	ebp
	mov	ebp, esp

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	mov	eax, DWORD PTR _m$[ebp]

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];
; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];
; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];
; 627  : 
; 628  : 		int biggestIndex = 0;

	xor	edx, edx
	movsd	xmm0, QWORD PTR [eax+64]
	movsd	xmm1, QWORD PTR [eax]
	movaps	xmm3, xmm0
	movsd	xmm2, QWORD PTR [eax+32]
	subsd	xmm3, xmm1
	movaps	xmm5, xmm1
	movaps	xmm4, xmm2
	subsd	xmm5, xmm2
	subsd	xmm4, xmm1
	subsd	xmm3, xmm2
	addsd	xmm2, xmm1
	subsd	xmm5, xmm0
	subsd	xmm4, xmm0
	addsd	xmm2, xmm0

; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm5, xmm2
	jbe	SHORT $LN4@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm2, xmm5

; 633  : 			biggestIndex = 1;

	mov	edx, 1
$LN4@quat_cast:

; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm4, xmm2
	jbe	SHORT $LN5@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;

	movaps	xmm2, xmm4

; 638  : 			biggestIndex = 2;

	mov	edx, 2
$LN5@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm3, xmm2
	jbe	SHORT $LN6@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;

	movaps	xmm2, xmm3

; 643  : 			biggestIndex = 3;

	mov	edx, 3
$LN6@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);
; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movsd	xmm1, QWORD PTR __real@3fd0000000000000

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	addsd	xmm2, QWORD PTR __real@3ff0000000000000
	sqrtsd	xmm2, xmm2
	mulsd	xmm2, QWORD PTR __real@3fe0000000000000
	divsd	xmm1, xmm2
	cmp	edx, 3
	ja	$LN11@quat_cast
	jmp	DWORD PTR $LN160@quat_cast[edx*4]
$LN7@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [eax+40]
	subsd	xmm0, QWORD PTR [eax+56]
	movsd	QWORD PTR [ecx+24], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx], xmm0

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [eax+48]
	subsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+8], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [eax+8]
	subsd	xmm0, QWORD PTR [eax+24]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN8@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [eax+40]
	subsd	xmm0, QWORD PTR [eax+56]

; 660  : 			Result.x = biggestVal;

	movsd	QWORD PTR [ecx], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+24], xmm0

; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [eax+24]
	addsd	xmm0, QWORD PTR [eax+8]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+8], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [eax+48]
	addsd	xmm0, QWORD PTR [eax+16]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN9@quat_cast:

; 663  : 			break;
; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [eax+48]
	subsd	xmm0, QWORD PTR [eax+16]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;
; 667  : 			Result.y = biggestVal;

	movsd	QWORD PTR [ecx+8], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movsd	xmm0, QWORD PTR [eax+24]
	addsd	xmm0, QWORD PTR [eax+8]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [eax+56]
	addsd	xmm0, QWORD PTR [eax+40]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN10@quat_cast:

; 669  : 			break;
; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [eax+8]
	subsd	xmm0, QWORD PTR [eax+24]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;
; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movsd	QWORD PTR [ecx+16], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movsd	xmm0, QWORD PTR [eax+48]
	addsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+56]
	addsd	xmm0, QWORD PTR [eax+40]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+8], xmm0
$LN11@quat_cast:

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx

; 682  : 	}

	pop	ebp
	ret	0
$LN160@quat_cast:
	DD	$LN7@quat_cast
	DD	$LN8@quat_cast
	DD	$LN9@quat_cast
	DD	$LN10@quat_cast
??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat3x3@N$00@0@@Z ENDP ; glm::quat_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat4x4@N$00@0@@Z
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m4$ = 12						; size = 4
??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat4x4@N$00@0@@Z PROC ; glm::quat_cast<double,1>, COMDAT

; 686  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	mov	eax, DWORD PTR _m4$[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+40]
	movups	XMMWORD PTR $T1[ebp], xmm2
	movsd	xmm2, QWORD PTR [eax+32]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+72]
	movq	QWORD PTR $T1[ebp+16], xmm1
	movsd	xmm1, QWORD PTR [eax+48]
	movups	XMMWORD PTR $T1[ebp+24], xmm2
	movsd	xmm2, QWORD PTR [eax+64]
	movq	QWORD PTR $T1[ebp+40], xmm1
	movsd	xmm1, QWORD PTR [eax+80]
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	unpcklpd xmm2, xmm0
	push	esi
	movups	XMMWORD PTR $T1[ebp+48], xmm2
	movq	QWORD PTR $T1[ebp+64], xmm1
	call	??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat3x3@N$00@0@@Z ; glm::quat_cast<double,1>

; 688  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat4x4@N$00@0@@Z ENDP ; glm::quat_cast<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@N$01@glm@@YA?AU?$tmat4x4@N$01@0@ABU?$tquat@N$01@0@@Z
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat4_cast@N$01@glm@@YA?AU?$tmat4x4@N$01@0@ABU?$tquat@N$01@0@@Z PROC ; glm::mat4_cast<double,2>, COMDAT

; 616  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	push	DWORD PTR _q$[ebp]
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@ABU?$tquat@N$01@0@@Z ; glm::mat3_cast<double,2>

; 618  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [esi], xmm3
	add	esp, 8
	xor	ecx, ebp
	movups	XMMWORD PTR [esi+16], xmm3
	movups	XMMWORD PTR [esi+32], xmm3
	movups	XMMWORD PTR [esi+48], xmm3
	movups	XMMWORD PTR [esi+64], xmm3
	movups	XMMWORD PTR [esi+80], xmm3
	movups	XMMWORD PTR [esi+96], xmm3
	movups	XMMWORD PTR [esi+112], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [esi], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+16], xmm2
	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [esi+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+48], xmm2
	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm2, QWORD PTR [eax+64]
	mov	eax, esi
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [esi+64], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+96], xmm0
	movups	XMMWORD PTR [esi+80], xmm2
	movups	XMMWORD PTR [esi+112], xmm1
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$mat4_cast@N$01@glm@@YA?AU?$tmat4x4@N$01@0@ABU?$tquat@N$01@0@@Z ENDP ; glm::mat4_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@ABU?$tquat@N$01@0@@Z
_TEXT	SEGMENT
_qyz$1$ = -32						; size = 8
_qxx$1$ = -24						; size = 8
_qxz$1$ = -16						; size = 8
_qyy$1$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@ABU?$tquat@N$01@0@@Z PROC ; glm::mat3_cast<double,2>, COMDAT

; 588  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 589  : 		tmat3x3<T, P> Result(T(1));

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	xorps	xmm1, xmm1
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000

; 590  : 		T qxx(q.x * q.x);

	mov	eax, DWORD PTR _q$[ebp]
	movups	XMMWORD PTR [ecx], xmm1
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+24], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movq	QWORD PTR [ecx+64], xmm1
	movsd	xmm2, QWORD PTR [eax]

; 591  : 		T qyy(q.y * q.y);

	movsd	xmm1, QWORD PTR [eax+8]
	movaps	xmm0, xmm2
	mulsd	xmm0, xmm2

; 592  : 		T qzz(q.z * q.z);
; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);

	movaps	xmm4, xmm1
	mulsd	xmm4, xmm2
	movsd	QWORD PTR _qxx$1$[ebp], xmm0
	movaps	xmm0, xmm1
	mulsd	xmm0, xmm1
	movsd	QWORD PTR _qyy$1$[ebp], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	movaps	xmm3, xmm0
	movaps	xmm7, xmm0
	mulsd	xmm3, xmm2
	mulsd	xmm7, xmm0
	movsd	QWORD PTR _qxz$1$[ebp], xmm3

; 595  : 		T qyz(q.y * q.z);

	movaps	xmm3, xmm0
	mulsd	xmm3, xmm1
	movsd	QWORD PTR _qyz$1$[ebp], xmm3

; 596  : 		T qwx(q.w * q.x);

	movsd	xmm3, QWORD PTR [eax+24]
	movaps	xmm6, xmm3

; 597  : 		T qwy(q.w * q.y);

	movaps	xmm5, xmm3

; 598  : 		T qwz(q.w * q.z);

	mulsd	xmm3, xmm0

; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);

	movsd	xmm0, QWORD PTR _qyy$1$[ebp]
	mulsd	xmm6, xmm2
	movsd	xmm2, QWORD PTR __real@4000000000000000
	mulsd	xmm0, xmm2
	mulsd	xmm5, xmm1
	mulsd	xmm7, xmm2
	movaps	xmm1, xmm0
	movsd	QWORD PTR _qyy$1$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	addsd	xmm1, xmm7
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx], xmm0

; 601  : 		Result[0][1] = T(2) * (qxy + qwz);

	movaps	xmm0, xmm3
	addsd	xmm0, xmm4

; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);

	subsd	xmm4, xmm3

; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);

	movsd	xmm3, QWORD PTR _qxx$1$[ebp]
	mulsd	xmm3, xmm2
	mulsd	xmm0, xmm2
	mulsd	xmm4, xmm2
	movaps	xmm1, xmm3
	addsd	xmm1, xmm7
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _qxz$1$[ebp]
	subsd	xmm0, xmm5
	movsd	QWORD PTR [ecx+24], xmm4
	movsd	xmm4, QWORD PTR __real@3ff0000000000000

; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);

	addsd	xmm5, QWORD PTR _qxz$1$[ebp]
	mulsd	xmm0, xmm2
	mulsd	xmm5, xmm2
	movsd	QWORD PTR [ecx+16], xmm0
	movaps	xmm0, xmm4
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _qyz$1$[ebp]
	movsd	QWORD PTR [ecx+48], xmm5
	movsd	QWORD PTR [ecx+32], xmm0
	movaps	xmm0, xmm6
	addsd	xmm0, xmm1

; 609  : 		Result[2][1] = T(2) * (qyz - qwx);

	subsd	xmm1, xmm6
	mulsd	xmm0, xmm2
	mulsd	xmm1, xmm2
	movsd	QWORD PTR [ecx+40], xmm0

; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);

	addsd	xmm3, QWORD PTR _qyy$1$[ebp]
	movsd	QWORD PTR [ecx+56], xmm1

; 611  : 		return Result;

	mov	eax, ecx
	subsd	xmm4, xmm3
	movsd	QWORD PTR [ecx+64], xmm4

; 612  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@ABU?$tquat@N$01@0@@Z ENDP ; glm::mat3_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@N$01@glm@@YA?AU?$tquat@N$01@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$normalize@N$01@glm@@YA?AU?$tquat@N$01@0@ABU10@@Z PROC ; glm::normalize<double,2>, COMDAT

; 380  : 	{

	push	ebp
	mov	ebp, esp

; 381  : 		T len = length(q);

	mov	ecx, DWORD PTR _q$[ebp]

; 382  : 		if(len <= T(0)) // Problem
; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm2, QWORD PTR [ecx+8]
	movsd	xmm0, QWORD PTR [ecx+24]
	movsd	xmm3, QWORD PTR [ecx]
	movsd	xmm1, QWORD PTR [ecx+16]
	mulsd	xmm2, xmm2
	mulsd	xmm0, xmm0
	mulsd	xmm3, xmm3
	mulsd	xmm1, xmm1
	addsd	xmm2, xmm3
	addsd	xmm0, xmm1
	addsd	xmm0, xmm2
	xorps	xmm2, xmm2
	sqrtsd	xmm2, xmm0
	xorps	xmm0, xmm0
	comisd	xmm0, xmm2
	jb	SHORT $LN2@normalize
	movups	XMMWORD PTR [eax], xmm0
	movsd	QWORD PTR [eax+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [eax+24], xmm0

; 386  : 	}

	pop	ebp
	ret	0
$LN2@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm2

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [ecx]
	unpcklpd xmm1, xmm1
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [eax+16], xmm0

; 386  : 	}

	pop	ebp
	ret	0
??$normalize@N$01@glm@@YA?AU?$tquat@N$01@0@ABU10@@Z ENDP ; glm::normalize<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@N$01$0A@@detail@glm@@SANABU?$tvec3@N$01@3@0@Z
_TEXT	SEGMENT
_tmp$ = -24						; size = 24
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utvec3@glm@@N$01$0A@@detail@glm@@SANABU?$tvec3@N$01@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,double,2,0>::call, COMDAT

; 57   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	xmm0, QWORD PTR [ecx]
	mulsd	xmm0, QWORD PTR [eax]
	fld	QWORD PTR [ecx+8]
	fmul	QWORD PTR [eax+8]
	movsd	QWORD PTR _tmp$[ebp], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm0, QWORD PTR [eax+16]

; 59   : 			return tmp.x + tmp.y + tmp.z;

	fadd	QWORD PTR _tmp$[ebp]
	movsd	QWORD PTR _tmp$[ebp+16], xmm0
	fadd	QWORD PTR _tmp$[ebp+16]

; 60   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utvec3@glm@@N$01$0A@@detail@glm@@SANABU?$tvec3@N$01@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,double,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@N$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
??$cross@N$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@0@Z PROC	; glm::cross<double,2>, COMDAT

; 180  : 	{

	push	ebp
	mov	ebp, esp

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+8]
	mulsd	xmm1, QWORD PTR [edx+8]
	mulsd	xmm0, QWORD PTR [edx+16]
	movsd	xmm3, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [edx]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm2, QWORD PTR [eax+8]
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR [edx+16]
	mulsd	xmm3, QWORD PTR [edx+8]
	subsd	xmm1, xmm0
	subsd	xmm2, xmm3
	movsd	QWORD PTR [ecx+8], xmm1
	movsd	QWORD PTR [ecx+16], xmm2

; 182  : 	}

	pop	ebp
	ret	0
??$cross@N$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@0@Z ENDP	; glm::cross<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@ABU10@@Z
_TEXT	SEGMENT
_c$ = -24						; size = 8
_b$ = -16						; size = 8
_a$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$sin@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@ABU10@@Z PROC ; glm::sin<double,2,glm::tvec3>, COMDAT

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	mov	esi, DWORD PTR _v$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [esi]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	movsd	xmm0, QWORD PTR [esi+8]
	fstp	QWORD PTR _a$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	movsd	xmm0, QWORD PTR [esi+16]
	fstp	QWORD PTR _b$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	movsd	xmm0, QWORD PTR _a$[ebp]
	fstp	QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax+16], xmm0
	pop	esi

; 47   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$sin@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@ABU10@@Z ENDP ; glm::sin<double,2,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@ABU10@@Z
_TEXT	SEGMENT
_c$ = -24						; size = 8
_b$ = -16						; size = 8
_a$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$cos@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@ABU10@@Z PROC ; glm::cos<double,2,glm::tvec3>, COMDAT

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	mov	esi, DWORD PTR _v$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [esi]
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	movsd	xmm0, QWORD PTR [esi+8]
	fstp	QWORD PTR _a$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	movsd	xmm0, QWORD PTR [esi+16]
	fstp	QWORD PTR _b$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	movsd	xmm0, QWORD PTR _a$[ebp]
	fstp	QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [eax+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [eax+16], xmm0
	pop	esi

; 56   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$cos@N$01Utvec3@glm@@@glm@@YA?AU?$tvec3@N$01@0@ABU10@@Z ENDP ; glm::cos<double,2,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@N@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_scalar$ = 16						; size = 8
??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@N@Z PROC	; glm::operator*<double,2>, COMDAT

; 628  : 	{

	push	ebp
	mov	ebp, esp

; 629  : 		return tvec3<T, P>(

	mov	ecx, DWORD PTR _v$[ebp]
	movsd	xmm1, QWORD PTR _scalar$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	unpcklpd xmm1, xmm1
	movups	xmm0, XMMWORD PTR [ecx]
	mulpd	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [eax+16], xmm0

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	pop	ebp
	ret	0
??$?DN$01@glm@@YA?AU?$tvec3@N$01@0@ABU10@N@Z ENDP	; glm::operator*<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat3x3@N$01@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat3x3@N$01@0@@Z PROC ; glm::quat_cast<double,2>, COMDAT

; 622  : 	{

	push	ebp
	mov	ebp, esp

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	mov	eax, DWORD PTR _m$[ebp]

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];
; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];
; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];
; 627  : 
; 628  : 		int biggestIndex = 0;

	xor	edx, edx
	movsd	xmm0, QWORD PTR [eax+64]
	movsd	xmm1, QWORD PTR [eax]
	movaps	xmm3, xmm0
	movsd	xmm2, QWORD PTR [eax+32]
	subsd	xmm3, xmm1
	movaps	xmm5, xmm1
	movaps	xmm4, xmm2
	subsd	xmm5, xmm2
	subsd	xmm4, xmm1
	subsd	xmm3, xmm2
	addsd	xmm2, xmm1
	subsd	xmm5, xmm0
	subsd	xmm4, xmm0
	addsd	xmm2, xmm0

; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm5, xmm2
	jbe	SHORT $LN4@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm2, xmm5

; 633  : 			biggestIndex = 1;

	mov	edx, 1
$LN4@quat_cast:

; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm4, xmm2
	jbe	SHORT $LN5@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;

	movaps	xmm2, xmm4

; 638  : 			biggestIndex = 2;

	mov	edx, 2
$LN5@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comisd	xmm3, xmm2
	jbe	SHORT $LN6@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;

	movaps	xmm2, xmm3

; 643  : 			biggestIndex = 3;

	mov	edx, 3
$LN6@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);
; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movsd	xmm1, QWORD PTR __real@3fd0000000000000

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	addsd	xmm2, QWORD PTR __real@3ff0000000000000
	sqrtsd	xmm2, xmm2
	mulsd	xmm2, QWORD PTR __real@3fe0000000000000
	divsd	xmm1, xmm2
	cmp	edx, 3
	ja	$LN11@quat_cast
	jmp	DWORD PTR $LN160@quat_cast[edx*4]
$LN7@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [eax+40]
	subsd	xmm0, QWORD PTR [eax+56]
	movsd	QWORD PTR [ecx+24], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx], xmm0

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [eax+48]
	subsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+8], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [eax+8]
	subsd	xmm0, QWORD PTR [eax+24]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN8@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [eax+40]
	subsd	xmm0, QWORD PTR [eax+56]

; 660  : 			Result.x = biggestVal;

	movsd	QWORD PTR [ecx], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+24], xmm0

; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [eax+24]
	addsd	xmm0, QWORD PTR [eax+8]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+8], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [eax+48]
	addsd	xmm0, QWORD PTR [eax+16]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN9@quat_cast:

; 663  : 			break;
; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movsd	xmm0, QWORD PTR [eax+48]
	subsd	xmm0, QWORD PTR [eax+16]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;
; 667  : 			Result.y = biggestVal;

	movsd	QWORD PTR [ecx+8], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movsd	xmm0, QWORD PTR [eax+24]
	addsd	xmm0, QWORD PTR [eax+8]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movsd	xmm0, QWORD PTR [eax+56]
	addsd	xmm0, QWORD PTR [eax+40]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN10@quat_cast:

; 669  : 			break;
; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movsd	xmm0, QWORD PTR [eax+8]
	subsd	xmm0, QWORD PTR [eax+24]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;
; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movsd	QWORD PTR [ecx+16], xmm2
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movsd	xmm0, QWORD PTR [eax+48]
	addsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+56]
	addsd	xmm0, QWORD PTR [eax+40]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+8], xmm0
$LN11@quat_cast:

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx

; 682  : 	}

	pop	ebp
	ret	0
$LN160@quat_cast:
	DD	$LN7@quat_cast
	DD	$LN8@quat_cast
	DD	$LN9@quat_cast
	DD	$LN10@quat_cast
??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat3x3@N$01@0@@Z ENDP ; glm::quat_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat4x4@N$01@0@@Z
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m4$ = 12						; size = 4
??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat4x4@N$01@0@@Z PROC ; glm::quat_cast<double,2>, COMDAT

; 686  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	mov	eax, DWORD PTR _m4$[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+40]
	movups	XMMWORD PTR $T1[ebp], xmm2
	movsd	xmm2, QWORD PTR [eax+32]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+72]
	movq	QWORD PTR $T1[ebp+16], xmm1
	movsd	xmm1, QWORD PTR [eax+48]
	movups	XMMWORD PTR $T1[ebp+24], xmm2
	movsd	xmm2, QWORD PTR [eax+64]
	movq	QWORD PTR $T1[ebp+40], xmm1
	movsd	xmm1, QWORD PTR [eax+80]
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	unpcklpd xmm2, xmm0
	push	esi
	movups	XMMWORD PTR $T1[ebp+48], xmm2
	movq	QWORD PTR $T1[ebp+64], xmm1
	call	??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat3x3@N$01@0@@Z ; glm::quat_cast<double,2>

; 688  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat4x4@N$01@0@@Z ENDP ; glm::quat_cast<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@ABU?$tquat@M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat4_cast@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@ABU?$tquat@M$0A@@0@@Z PROC ; glm::mat4_cast<float,0>, COMDAT

; 616  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _q$[ebp]

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@ABU?$tquat@M$0A@@0@@Z ; glm::mat3_cast<float,0>
	add	esp, 8
	mov	ecx, esi
	push	eax
	call	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 618  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$mat4_cast@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@ABU?$tquat@M$0A@@0@@Z ENDP ; glm::mat4_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@ABU?$tquat@M$0A@@0@@Z
_TEXT	SEGMENT
_qyz$1$ = -8						; size = 4
_qxx$1$ = -4						; size = 4
_qyy$1$ = 8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_qxz$1$ = 12						; size = 4
_q$ = 12						; size = 4
??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@ABU?$tquat@M$0A@@0@@Z PROC ; glm::mat3_cast<float,0>, COMDAT

; 588  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 589  : 		tmat3x3<T, P> Result(T(1));

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	??0?$tmat3x3@M$0A@@glm@@QAE@M@Z		; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 590  : 		T qxx(q.x * q.x);

	mov	eax, DWORD PTR _q$[ebp]
	movss	xmm2, DWORD PTR [eax]

; 591  : 		T qyy(q.y * q.y);

	movss	xmm1, DWORD PTR [eax+4]
	movaps	xmm0, xmm2
	mulss	xmm0, xmm2

; 592  : 		T qzz(q.z * q.z);
; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);

	movaps	xmm4, xmm1
	mulss	xmm4, xmm2
	movss	DWORD PTR _qxx$1$[ebp], xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, xmm1
	movss	DWORD PTR _qyy$1$[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movaps	xmm3, xmm0
	movaps	xmm7, xmm0
	mulss	xmm3, xmm2
	mulss	xmm7, xmm0
	movss	DWORD PTR _qxz$1$[ebp], xmm3

; 595  : 		T qyz(q.y * q.z);

	movaps	xmm3, xmm0
	mulss	xmm3, xmm1
	movss	DWORD PTR _qyz$1$[ebp], xmm3

; 596  : 		T qwx(q.w * q.x);

	movss	xmm3, DWORD PTR [eax+12]

; 597  : 		T qwy(q.w * q.y);
; 598  : 		T qwz(q.w * q.z);
; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);
; 601  : 		Result[0][1] = T(2) * (qxy + qwz);
; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);
; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);
; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);
; 609  : 		Result[2][1] = T(2) * (qyz - qwx);
; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);
; 611  : 		return Result;

	mov	eax, esi
	movaps	xmm6, xmm3
	movaps	xmm5, xmm3
	mulss	xmm3, xmm0
	movss	xmm0, DWORD PTR _qyy$1$[ebp]
	mulss	xmm6, xmm2
	movss	xmm2, DWORD PTR __real@40000000
	mulss	xmm0, xmm2
	mulss	xmm5, xmm1
	movaps	xmm1, xmm0
	movss	DWORD PTR _qyy$1$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm7, xmm2
	addss	xmm1, xmm7
	subss	xmm0, xmm1
	movss	DWORD PTR [esi], xmm0
	movaps	xmm0, xmm3
	addss	xmm0, xmm4
	subss	xmm4, xmm3
	movss	xmm3, DWORD PTR _qxx$1$[ebp]
	mulss	xmm3, xmm2
	mulss	xmm0, xmm2
	mulss	xmm4, xmm2
	movaps	xmm1, xmm3
	movss	DWORD PTR [esi+4], xmm0
	addss	xmm1, xmm7
	movss	xmm0, DWORD PTR _qxz$1$[ebp]
	addss	xmm3, DWORD PTR _qyy$1$[ebp]
	subss	xmm0, xmm5
	movss	DWORD PTR [esi+12], xmm4
	movss	xmm4, DWORD PTR __real@3f800000
	addss	xmm5, DWORD PTR _qxz$1$[ebp]
	mulss	xmm0, xmm2
	mulss	xmm5, xmm2
	movss	DWORD PTR [esi+8], xmm0
	movaps	xmm0, xmm4
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR _qyz$1$[ebp]
	subss	xmm4, xmm3
	movss	DWORD PTR [esi+24], xmm5
	movss	DWORD PTR [esi+16], xmm0
	movaps	xmm0, xmm6
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+32], xmm4
	subss	xmm1, xmm6
	mulss	xmm0, xmm2
	mulss	xmm1, xmm2
	movss	DWORD PTR [esi+20], xmm0
	movss	DWORD PTR [esi+28], xmm1
	pop	esi

; 612  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@ABU?$tquat@M$0A@@0@@Z ENDP ; glm::mat3_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU10@@Z PROC ; glm::normalize<float,0>, COMDAT

; 380  : 	{

	push	ebp
	mov	ebp, esp

; 381  : 		T len = length(q);

	mov	ecx, DWORD PTR _q$[ebp]

; 382  : 		if(len <= T(0)) // Problem
; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm2, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+12]
	movss	xmm3, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm2, xmm2
	mulss	xmm0, xmm0
	mulss	xmm3, xmm3
	mulss	xmm1, xmm1
	addss	xmm2, xmm3
	addss	xmm0, xmm1
	addss	xmm0, xmm2
	xorps	xmm2, xmm2
	sqrtss	xmm2, xmm0
	xorps	xmm0, xmm0
	comiss	xmm0, xmm2
	jb	SHORT $LN2@normalize
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 1065353216		; 3f800000H

; 386  : 	}

	pop	ebp
	ret	0
$LN2@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm2

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [ecx]
	shufps	xmm1, xmm1, 0
	mulps	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0

; 386  : 	}

	pop	ebp
	ret	0
??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU10@@Z ENDP ; glm::normalize<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMABU?$tvec3@M$0A@@3@0@Z
_TEXT	SEGMENT
_tmp$ = -12						; size = 12
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMABU?$tvec3@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call, COMDAT

; 57   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR [eax+4]
	movss	DWORD PTR _tmp$[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR [eax+8]

; 59   : 			return tmp.x + tmp.y + tmp.z;

	fadd	DWORD PTR _tmp$[ebp]
	movss	DWORD PTR _tmp$[ebp+8], xmm0
	fadd	DWORD PTR _tmp$[ebp+8]

; 60   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMABU?$tvec3@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z PROC	; glm::cross<float,0>, COMDAT

; 180  : 	{

	push	ebp
	mov	ebp, esp

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm1, DWORD PTR [eax+8]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [edx+8]
	movss	xmm3, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [edx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [eax+8]
	mulss	xmm2, DWORD PTR [eax+4]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [edx+8]
	mulss	xmm3, DWORD PTR [edx+4]
	subss	xmm1, xmm0
	subss	xmm2, xmm3
	movss	DWORD PTR [ecx+4], xmm1
	movss	DWORD PTR [ecx+8], xmm2

; 182  : 	}

	pop	ebp
	ret	0
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z ENDP	; glm::cross<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$sin@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z PROC ; glm::sin<float,0,glm::tvec3>, COMDAT

; 45   : 	{

	push	ebp
	mov	ebp, esp
	push	esi

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	movss	xmm0, DWORD PTR [esi]
	call	___libm_sse2_sinf
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [edi], xmm0
	movss	xmm0, DWORD PTR [esi+4]
	call	___libm_sse2_sinf
	movss	DWORD PTR [edi+4], xmm0
	movss	xmm0, DWORD PTR [esi+8]
	call	___libm_sse2_sinf
	movss	DWORD PTR [edi+8], xmm0
	mov	eax, edi
	pop	edi
	pop	esi

; 47   : 	}

	pop	ebp
	ret	0
??$sin@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z ENDP ; glm::sin<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$cos@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z PROC ; glm::cos<float,0,glm::tvec3>, COMDAT

; 54   : 	{

	push	ebp
	mov	ebp, esp
	push	esi

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	movss	xmm0, DWORD PTR [esi]
	call	___libm_sse2_cosf
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [edi], xmm0
	movss	xmm0, DWORD PTR [esi+4]
	call	___libm_sse2_cosf
	movss	DWORD PTR [edi+4], xmm0
	movss	xmm0, DWORD PTR [esi+8]
	call	___libm_sse2_cosf
	movss	DWORD PTR [edi+8], xmm0
	mov	eax, edi
	pop	edi
	pop	esi

; 56   : 	}

	pop	ebp
	ret	0
??$cos@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z ENDP ; glm::cos<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_scalar$ = 16						; size = 4
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 628  : 	{

	push	ebp
	mov	ebp, esp

; 629  : 		return tvec3<T, P>(

	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR _scalar$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+8], xmm0

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	pop	ebp
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat3x3@M$0A@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat3x3@M$0A@@0@@Z PROC ; glm::quat_cast<float,0>, COMDAT

; 622  : 	{

	push	ebp
	mov	ebp, esp

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	mov	eax, DWORD PTR _m$[ebp]

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];
; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];
; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];
; 627  : 
; 628  : 		int biggestIndex = 0;

	xor	edx, edx
	movss	xmm0, DWORD PTR [eax+32]
	movss	xmm1, DWORD PTR [eax]
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR [eax+16]
	subss	xmm3, xmm1
	movaps	xmm5, xmm1
	movaps	xmm4, xmm2
	subss	xmm5, xmm2
	subss	xmm4, xmm1
	subss	xmm3, xmm2
	addss	xmm2, xmm1
	subss	xmm5, xmm0
	subss	xmm4, xmm0
	addss	xmm2, xmm0

; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm5, xmm2
	jbe	SHORT $LN4@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm2, xmm5

; 633  : 			biggestIndex = 1;

	mov	edx, 1
$LN4@quat_cast:

; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm4, xmm2
	jbe	SHORT $LN5@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;

	movaps	xmm2, xmm4

; 638  : 			biggestIndex = 2;

	mov	edx, 2
$LN5@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm3, xmm2
	jbe	SHORT $LN6@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;

	movaps	xmm2, xmm3

; 643  : 			biggestIndex = 3;

	mov	edx, 3
$LN6@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);
; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movss	xmm1, DWORD PTR __real@3e800000

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	addss	xmm2, DWORD PTR __real@3f800000
	sqrtss	xmm2, xmm2
	mulss	xmm2, DWORD PTR __real@3f000000
	divss	xmm1, xmm2
	cmp	edx, 3
	ja	$LN11@quat_cast
	jmp	DWORD PTR $LN165@quat_cast[edx*4]
$LN7@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [eax+20]
	subss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR [ecx+12], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movss	xmm0, DWORD PTR [eax+24]
	subss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [eax+12]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN8@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [eax+20]
	subss	xmm0, DWORD PTR [eax+28]

; 660  : 			Result.x = biggestVal;

	movss	DWORD PTR [ecx], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+12], xmm0

; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movss	xmm0, DWORD PTR [eax+24]
	addss	xmm0, DWORD PTR [eax+8]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN9@quat_cast:

; 663  : 			break;
; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movss	xmm0, DWORD PTR [eax+24]
	subss	xmm0, DWORD PTR [eax+8]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;
; 667  : 			Result.y = biggestVal;

	movss	DWORD PTR [ecx+4], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+12], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movss	xmm0, DWORD PTR [eax+28]
	addss	xmm0, DWORD PTR [eax+20]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN10@quat_cast:

; 669  : 			break;
; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [eax+12]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;
; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movss	DWORD PTR [ecx+8], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+12], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	addss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	addss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
$LN11@quat_cast:

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx

; 682  : 	}

	pop	ebp
	ret	0
	npad	3
$LN165@quat_cast:
	DD	$LN7@quat_cast
	DD	$LN8@quat_cast
	DD	$LN9@quat_cast
	DD	$LN10@quat_cast
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat3x3@M$0A@@0@@Z ENDP ; glm::quat_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat4x4@M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m4$ = 12						; size = 4
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat4x4@M$0A@@0@@Z PROC ; glm::quat_cast<float,0>, COMDAT

; 686  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _m4$[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	push	ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	push	eax
	push	esi
	call	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat3x3@M$0A@@0@@Z ; glm::quat_cast<float,0>

; 688  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat4x4@M$0A@@0@@Z ENDP ; glm::quat_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@M$00@glm@@YA?AU?$tmat4x4@M$00@0@ABU?$tquat@M$00@0@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat4_cast@M$00@glm@@YA?AU?$tmat4x4@M$00@0@ABU?$tquat@M$00@0@@Z PROC ; glm::mat4_cast<float,1>, COMDAT

; 616  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _q$[ebp]

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@ABU?$tquat@M$00@0@@Z ; glm::mat3_cast<float,1>
	add	esp, 8
	mov	ecx, esi
	push	eax
	call	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>

; 618  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$mat4_cast@M$00@glm@@YA?AU?$tmat4x4@M$00@0@ABU?$tquat@M$00@0@@Z ENDP ; glm::mat4_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@ABU?$tquat@M$00@0@@Z
_TEXT	SEGMENT
_qyz$1$ = -8						; size = 4
_qxx$1$ = -4						; size = 4
_qyy$1$ = 8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_qxz$1$ = 12						; size = 4
_q$ = 12						; size = 4
??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@ABU?$tquat@M$00@0@@Z PROC ; glm::mat3_cast<float,1>, COMDAT

; 588  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 589  : 		tmat3x3<T, P> Result(T(1));

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	??0?$tmat3x3@M$00@glm@@QAE@M@Z		; glm::tmat3x3<float,1>::tmat3x3<float,1>

; 590  : 		T qxx(q.x * q.x);

	mov	eax, DWORD PTR _q$[ebp]
	movss	xmm2, DWORD PTR [eax]

; 591  : 		T qyy(q.y * q.y);

	movss	xmm1, DWORD PTR [eax+4]
	movaps	xmm0, xmm2
	mulss	xmm0, xmm2

; 592  : 		T qzz(q.z * q.z);
; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);

	movaps	xmm4, xmm1
	mulss	xmm4, xmm2
	movss	DWORD PTR _qxx$1$[ebp], xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, xmm1
	movss	DWORD PTR _qyy$1$[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movaps	xmm3, xmm0
	movaps	xmm7, xmm0
	mulss	xmm3, xmm2
	mulss	xmm7, xmm0
	movss	DWORD PTR _qxz$1$[ebp], xmm3

; 595  : 		T qyz(q.y * q.z);

	movaps	xmm3, xmm0
	mulss	xmm3, xmm1
	movss	DWORD PTR _qyz$1$[ebp], xmm3

; 596  : 		T qwx(q.w * q.x);

	movss	xmm3, DWORD PTR [eax+12]

; 597  : 		T qwy(q.w * q.y);
; 598  : 		T qwz(q.w * q.z);
; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);
; 601  : 		Result[0][1] = T(2) * (qxy + qwz);
; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);
; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);
; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);
; 609  : 		Result[2][1] = T(2) * (qyz - qwx);
; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);
; 611  : 		return Result;

	mov	eax, esi
	movaps	xmm6, xmm3
	movaps	xmm5, xmm3
	mulss	xmm3, xmm0
	movss	xmm0, DWORD PTR _qyy$1$[ebp]
	mulss	xmm6, xmm2
	movss	xmm2, DWORD PTR __real@40000000
	mulss	xmm0, xmm2
	mulss	xmm5, xmm1
	movaps	xmm1, xmm0
	movss	DWORD PTR _qyy$1$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm7, xmm2
	addss	xmm1, xmm7
	subss	xmm0, xmm1
	movss	DWORD PTR [esi], xmm0
	movaps	xmm0, xmm3
	addss	xmm0, xmm4
	subss	xmm4, xmm3
	movss	xmm3, DWORD PTR _qxx$1$[ebp]
	mulss	xmm3, xmm2
	mulss	xmm0, xmm2
	mulss	xmm4, xmm2
	movaps	xmm1, xmm3
	movss	DWORD PTR [esi+4], xmm0
	addss	xmm1, xmm7
	movss	xmm0, DWORD PTR _qxz$1$[ebp]
	addss	xmm3, DWORD PTR _qyy$1$[ebp]
	subss	xmm0, xmm5
	movss	DWORD PTR [esi+12], xmm4
	movss	xmm4, DWORD PTR __real@3f800000
	addss	xmm5, DWORD PTR _qxz$1$[ebp]
	mulss	xmm0, xmm2
	mulss	xmm5, xmm2
	movss	DWORD PTR [esi+8], xmm0
	movaps	xmm0, xmm4
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR _qyz$1$[ebp]
	subss	xmm4, xmm3
	movss	DWORD PTR [esi+24], xmm5
	movss	DWORD PTR [esi+16], xmm0
	movaps	xmm0, xmm6
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+32], xmm4
	subss	xmm1, xmm6
	mulss	xmm0, xmm2
	mulss	xmm1, xmm2
	movss	DWORD PTR [esi+20], xmm0
	movss	DWORD PTR [esi+28], xmm1
	pop	esi

; 612  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@ABU?$tquat@M$00@0@@Z ENDP ; glm::mat3_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@M$00@glm@@YA?AU?$tquat@M$00@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$normalize@M$00@glm@@YA?AU?$tquat@M$00@0@ABU10@@Z PROC ; glm::normalize<float,1>, COMDAT

; 380  : 	{

	push	ebp
	mov	ebp, esp

; 381  : 		T len = length(q);

	mov	ecx, DWORD PTR _q$[ebp]

; 382  : 		if(len <= T(0)) // Problem
; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm2, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+12]
	movss	xmm3, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm2, xmm2
	mulss	xmm0, xmm0
	mulss	xmm3, xmm3
	mulss	xmm1, xmm1
	addss	xmm2, xmm3
	addss	xmm0, xmm1
	addss	xmm0, xmm2
	xorps	xmm2, xmm2
	sqrtss	xmm2, xmm0
	xorps	xmm0, xmm0
	comiss	xmm0, xmm2
	jb	SHORT $LN2@normalize
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 1065353216		; 3f800000H

; 386  : 	}

	pop	ebp
	ret	0
$LN2@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm2

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [ecx]
	shufps	xmm1, xmm1, 0
	mulps	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0

; 386  : 	}

	pop	ebp
	ret	0
??$normalize@M$00@glm@@YA?AU?$tquat@M$00@0@ABU10@@Z ENDP ; glm::normalize<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$00$0A@@detail@glm@@SAMABU?$tvec3@M$00@3@0@Z
_TEXT	SEGMENT
_tmp$ = -12						; size = 12
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utvec3@glm@@M$00$0A@@detail@glm@@SAMABU?$tvec3@M$00@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,1,0>::call, COMDAT

; 57   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR [eax+4]
	movss	DWORD PTR _tmp$[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR [eax+8]

; 59   : 			return tmp.x + tmp.y + tmp.z;

	fadd	DWORD PTR _tmp$[ebp]
	movss	DWORD PTR _tmp$[ebp+8], xmm0
	fadd	DWORD PTR _tmp$[ebp+8]

; 60   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utvec3@glm@@M$00$0A@@detail@glm@@SAMABU?$tvec3@M$00@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,1,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@M$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
??$cross@M$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@0@Z PROC	; glm::cross<float,1>, COMDAT

; 180  : 	{

	push	ebp
	mov	ebp, esp

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm1, DWORD PTR [eax+8]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [edx+8]
	movss	xmm3, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [edx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [eax+8]
	mulss	xmm2, DWORD PTR [eax+4]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [edx+8]
	mulss	xmm3, DWORD PTR [edx+4]
	subss	xmm1, xmm0
	subss	xmm2, xmm3
	movss	DWORD PTR [ecx+4], xmm1
	movss	DWORD PTR [ecx+8], xmm2

; 182  : 	}

	pop	ebp
	ret	0
??$cross@M$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@0@Z ENDP	; glm::cross<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$sin@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@ABU10@@Z PROC ; glm::sin<float,1,glm::tvec3>, COMDAT

; 45   : 	{

	push	ebp
	mov	ebp, esp
	push	esi

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	movss	xmm0, DWORD PTR [esi]
	call	___libm_sse2_sinf
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [edi], xmm0
	movss	xmm0, DWORD PTR [esi+4]
	call	___libm_sse2_sinf
	movss	DWORD PTR [edi+4], xmm0
	movss	xmm0, DWORD PTR [esi+8]
	call	___libm_sse2_sinf
	movss	DWORD PTR [edi+8], xmm0
	mov	eax, edi
	pop	edi
	pop	esi

; 47   : 	}

	pop	ebp
	ret	0
??$sin@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@ABU10@@Z ENDP ; glm::sin<float,1,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$cos@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@ABU10@@Z PROC ; glm::cos<float,1,glm::tvec3>, COMDAT

; 54   : 	{

	push	ebp
	mov	ebp, esp
	push	esi

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	movss	xmm0, DWORD PTR [esi]
	call	___libm_sse2_cosf
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [edi], xmm0
	movss	xmm0, DWORD PTR [esi+4]
	call	___libm_sse2_cosf
	movss	DWORD PTR [edi+4], xmm0
	movss	xmm0, DWORD PTR [esi+8]
	call	___libm_sse2_cosf
	movss	DWORD PTR [edi+8], xmm0
	mov	eax, edi
	pop	edi
	pop	esi

; 56   : 	}

	pop	ebp
	ret	0
??$cos@M$00Utvec3@glm@@@glm@@YA?AU?$tvec3@M$00@0@ABU10@@Z ENDP ; glm::cos<float,1,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_scalar$ = 16						; size = 4
??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@M@Z PROC	; glm::operator*<float,1>, COMDAT

; 628  : 	{

	push	ebp
	mov	ebp, esp

; 629  : 		return tvec3<T, P>(

	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR _scalar$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+8], xmm0

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	pop	ebp
	ret	0
??$?DM$00@glm@@YA?AU?$tvec3@M$00@0@ABU10@M@Z ENDP	; glm::operator*<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat3x3@M$00@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat3x3@M$00@0@@Z PROC ; glm::quat_cast<float,1>, COMDAT

; 622  : 	{

	push	ebp
	mov	ebp, esp

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	mov	eax, DWORD PTR _m$[ebp]

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];
; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];
; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];
; 627  : 
; 628  : 		int biggestIndex = 0;

	xor	edx, edx
	movss	xmm0, DWORD PTR [eax+32]
	movss	xmm1, DWORD PTR [eax]
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR [eax+16]
	subss	xmm3, xmm1
	movaps	xmm5, xmm1
	movaps	xmm4, xmm2
	subss	xmm5, xmm2
	subss	xmm4, xmm1
	subss	xmm3, xmm2
	addss	xmm2, xmm1
	subss	xmm5, xmm0
	subss	xmm4, xmm0
	addss	xmm2, xmm0

; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm5, xmm2
	jbe	SHORT $LN4@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm2, xmm5

; 633  : 			biggestIndex = 1;

	mov	edx, 1
$LN4@quat_cast:

; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm4, xmm2
	jbe	SHORT $LN5@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;

	movaps	xmm2, xmm4

; 638  : 			biggestIndex = 2;

	mov	edx, 2
$LN5@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm3, xmm2
	jbe	SHORT $LN6@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;

	movaps	xmm2, xmm3

; 643  : 			biggestIndex = 3;

	mov	edx, 3
$LN6@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);
; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movss	xmm1, DWORD PTR __real@3e800000

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	addss	xmm2, DWORD PTR __real@3f800000
	sqrtss	xmm2, xmm2
	mulss	xmm2, DWORD PTR __real@3f000000
	divss	xmm1, xmm2
	cmp	edx, 3
	ja	$LN11@quat_cast
	jmp	DWORD PTR $LN165@quat_cast[edx*4]
$LN7@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [eax+20]
	subss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR [ecx+12], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movss	xmm0, DWORD PTR [eax+24]
	subss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [eax+12]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN8@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [eax+20]
	subss	xmm0, DWORD PTR [eax+28]

; 660  : 			Result.x = biggestVal;

	movss	DWORD PTR [ecx], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+12], xmm0

; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movss	xmm0, DWORD PTR [eax+24]
	addss	xmm0, DWORD PTR [eax+8]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN9@quat_cast:

; 663  : 			break;
; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movss	xmm0, DWORD PTR [eax+24]
	subss	xmm0, DWORD PTR [eax+8]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;
; 667  : 			Result.y = biggestVal;

	movss	DWORD PTR [ecx+4], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+12], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movss	xmm0, DWORD PTR [eax+28]
	addss	xmm0, DWORD PTR [eax+20]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN10@quat_cast:

; 669  : 			break;
; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [eax+12]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;
; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movss	DWORD PTR [ecx+8], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+12], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	addss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	addss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
$LN11@quat_cast:

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx

; 682  : 	}

	pop	ebp
	ret	0
	npad	3
$LN165@quat_cast:
	DD	$LN7@quat_cast
	DD	$LN8@quat_cast
	DD	$LN9@quat_cast
	DD	$LN10@quat_cast
??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat3x3@M$00@0@@Z ENDP ; glm::quat_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat4x4@M$00@0@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m4$ = 12						; size = 4
??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat4x4@M$00@0@@Z PROC ; glm::quat_cast<float,1>, COMDAT

; 686  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _m4$[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	push	ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
	push	eax
	push	esi
	call	??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat3x3@M$00@0@@Z ; glm::quat_cast<float,1>

; 688  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat4x4@M$00@0@@Z ENDP ; glm::quat_cast<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat4_cast@M$01@glm@@YA?AU?$tmat4x4@M$01@0@ABU?$tquat@M$01@0@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$mat4_cast@M$01@glm@@YA?AU?$tmat4x4@M$01@0@ABU?$tquat@M$01@0@@Z PROC ; glm::mat4_cast<float,2>, COMDAT

; 616  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _q$[ebp]

; 617  : 		return tmat4x4<T, P>(mat3_cast(q));

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@ABU?$tquat@M$01@0@@Z ; glm::mat3_cast<float,2>
	add	esp, 8
	mov	ecx, esi
	push	eax
	call	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>

; 618  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$mat4_cast@M$01@glm@@YA?AU?$tmat4x4@M$01@0@ABU?$tquat@M$01@0@@Z ENDP ; glm::mat4_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@ABU?$tquat@M$01@0@@Z
_TEXT	SEGMENT
_qyz$1$ = -8						; size = 4
_qxx$1$ = -4						; size = 4
_qyy$1$ = 8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_qxz$1$ = 12						; size = 4
_q$ = 12						; size = 4
??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@ABU?$tquat@M$01@0@@Z PROC ; glm::mat3_cast<float,2>, COMDAT

; 588  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 589  : 		tmat3x3<T, P> Result(T(1));

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	??0?$tmat3x3@M$01@glm@@QAE@M@Z		; glm::tmat3x3<float,2>::tmat3x3<float,2>

; 590  : 		T qxx(q.x * q.x);

	mov	eax, DWORD PTR _q$[ebp]
	movss	xmm2, DWORD PTR [eax]

; 591  : 		T qyy(q.y * q.y);

	movss	xmm1, DWORD PTR [eax+4]
	movaps	xmm0, xmm2
	mulss	xmm0, xmm2

; 592  : 		T qzz(q.z * q.z);
; 593  : 		T qxz(q.x * q.z);
; 594  : 		T qxy(q.x * q.y);

	movaps	xmm4, xmm1
	mulss	xmm4, xmm2
	movss	DWORD PTR _qxx$1$[ebp], xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, xmm1
	movss	DWORD PTR _qyy$1$[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movaps	xmm3, xmm0
	movaps	xmm7, xmm0
	mulss	xmm3, xmm2
	mulss	xmm7, xmm0
	movss	DWORD PTR _qxz$1$[ebp], xmm3

; 595  : 		T qyz(q.y * q.z);

	movaps	xmm3, xmm0
	mulss	xmm3, xmm1
	movss	DWORD PTR _qyz$1$[ebp], xmm3

; 596  : 		T qwx(q.w * q.x);

	movss	xmm3, DWORD PTR [eax+12]

; 597  : 		T qwy(q.w * q.y);
; 598  : 		T qwz(q.w * q.z);
; 599  : 
; 600  : 		Result[0][0] = T(1) - T(2) * (qyy +  qzz);
; 601  : 		Result[0][1] = T(2) * (qxy + qwz);
; 602  : 		Result[0][2] = T(2) * (qxz - qwy);
; 603  : 
; 604  : 		Result[1][0] = T(2) * (qxy - qwz);
; 605  : 		Result[1][1] = T(1) - T(2) * (qxx +  qzz);
; 606  : 		Result[1][2] = T(2) * (qyz + qwx);
; 607  : 
; 608  : 		Result[2][0] = T(2) * (qxz + qwy);
; 609  : 		Result[2][1] = T(2) * (qyz - qwx);
; 610  : 		Result[2][2] = T(1) - T(2) * (qxx +  qyy);
; 611  : 		return Result;

	mov	eax, esi
	movaps	xmm6, xmm3
	movaps	xmm5, xmm3
	mulss	xmm3, xmm0
	movss	xmm0, DWORD PTR _qyy$1$[ebp]
	mulss	xmm6, xmm2
	movss	xmm2, DWORD PTR __real@40000000
	mulss	xmm0, xmm2
	mulss	xmm5, xmm1
	movaps	xmm1, xmm0
	movss	DWORD PTR _qyy$1$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm7, xmm2
	addss	xmm1, xmm7
	subss	xmm0, xmm1
	movss	DWORD PTR [esi], xmm0
	movaps	xmm0, xmm3
	addss	xmm0, xmm4
	subss	xmm4, xmm3
	movss	xmm3, DWORD PTR _qxx$1$[ebp]
	mulss	xmm3, xmm2
	mulss	xmm0, xmm2
	mulss	xmm4, xmm2
	movaps	xmm1, xmm3
	movss	DWORD PTR [esi+4], xmm0
	addss	xmm1, xmm7
	movss	xmm0, DWORD PTR _qxz$1$[ebp]
	addss	xmm3, DWORD PTR _qyy$1$[ebp]
	subss	xmm0, xmm5
	movss	DWORD PTR [esi+12], xmm4
	movss	xmm4, DWORD PTR __real@3f800000
	addss	xmm5, DWORD PTR _qxz$1$[ebp]
	mulss	xmm0, xmm2
	mulss	xmm5, xmm2
	movss	DWORD PTR [esi+8], xmm0
	movaps	xmm0, xmm4
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR _qyz$1$[ebp]
	subss	xmm4, xmm3
	movss	DWORD PTR [esi+24], xmm5
	movss	DWORD PTR [esi+16], xmm0
	movaps	xmm0, xmm6
	addss	xmm0, xmm1
	movss	DWORD PTR [esi+32], xmm4
	subss	xmm1, xmm6
	mulss	xmm0, xmm2
	mulss	xmm1, xmm2
	movss	DWORD PTR [esi+20], xmm0
	movss	DWORD PTR [esi+28], xmm1
	pop	esi

; 612  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@ABU?$tquat@M$01@0@@Z ENDP ; glm::mat3_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@M$01@glm@@YA?AU?$tquat@M$01@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??$normalize@M$01@glm@@YA?AU?$tquat@M$01@0@ABU10@@Z PROC ; glm::normalize<float,2>, COMDAT

; 380  : 	{

	push	ebp
	mov	ebp, esp

; 381  : 		T len = length(q);

	mov	ecx, DWORD PTR _q$[ebp]

; 382  : 		if(len <= T(0)) // Problem
; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm2, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+12]
	movss	xmm3, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm2, xmm2
	mulss	xmm0, xmm0
	mulss	xmm3, xmm3
	mulss	xmm1, xmm1
	addss	xmm2, xmm3
	addss	xmm0, xmm1
	addss	xmm0, xmm2
	xorps	xmm2, xmm2
	sqrtss	xmm2, xmm0
	xorps	xmm0, xmm0
	comiss	xmm0, xmm2
	jb	SHORT $LN2@normalize
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 1065353216		; 3f800000H

; 386  : 	}

	pop	ebp
	ret	0
$LN2@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm2

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	movups	xmm0, XMMWORD PTR [ecx]
	shufps	xmm1, xmm1, 0
	mulps	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0

; 386  : 	}

	pop	ebp
	ret	0
??$normalize@M$01@glm@@YA?AU?$tquat@M$01@0@ABU10@@Z ENDP ; glm::normalize<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$01$0A@@detail@glm@@SAMABU?$tvec3@M$01@3@0@Z
_TEXT	SEGMENT
_tmp$ = -12						; size = 12
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utvec3@glm@@M$01$0A@@detail@glm@@SAMABU?$tvec3@M$01@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,2,0>::call, COMDAT

; 57   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR [eax+4]
	movss	DWORD PTR _tmp$[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR [eax+8]

; 59   : 			return tmp.x + tmp.y + tmp.z;

	fadd	DWORD PTR _tmp$[ebp]
	movss	DWORD PTR _tmp$[ebp+8], xmm0
	fadd	DWORD PTR _tmp$[ebp+8]

; 60   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?call@?$compute_dot@Utvec3@glm@@M$01$0A@@detail@glm@@SAMABU?$tvec3@M$01@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,2,0>::call
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@M$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
??$cross@M$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@0@Z PROC	; glm::cross<float,2>, COMDAT

; 180  : 	{

	push	ebp
	mov	ebp, esp

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm1, DWORD PTR [eax+8]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [edx+8]
	movss	xmm3, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [edx]
	subss	xmm1, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [eax+8]
	mulss	xmm2, DWORD PTR [eax+4]
	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [edx+8]
	mulss	xmm3, DWORD PTR [edx+4]
	subss	xmm1, xmm0
	subss	xmm2, xmm3
	movss	DWORD PTR [ecx+4], xmm1
	movss	DWORD PTR [ecx+8], xmm2

; 182  : 	}

	pop	ebp
	ret	0
??$cross@M$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@0@Z ENDP	; glm::cross<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$sin@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$sin@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@ABU10@@Z PROC ; glm::sin<float,2,glm::tvec3>, COMDAT

; 45   : 	{

	push	ebp
	mov	ebp, esp
	push	esi

; 46   : 		return detail::functor1<T, T, P, vecType>::call(sin, v);

	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	movss	xmm0, DWORD PTR [esi]
	call	___libm_sse2_sinf
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [edi], xmm0
	movss	xmm0, DWORD PTR [esi+4]
	call	___libm_sse2_sinf
	movss	DWORD PTR [edi+4], xmm0
	movss	xmm0, DWORD PTR [esi+8]
	call	___libm_sse2_sinf
	movss	DWORD PTR [edi+8], xmm0
	mov	eax, edi
	pop	edi
	pop	esi

; 47   : 	}

	pop	ebp
	ret	0
??$sin@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@ABU10@@Z ENDP ; glm::sin<float,2,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@ABU10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$cos@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@ABU10@@Z PROC ; glm::cos<float,2,glm::tvec3>, COMDAT

; 54   : 	{

	push	ebp
	mov	ebp, esp
	push	esi

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	movss	xmm0, DWORD PTR [esi]
	call	___libm_sse2_cosf
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [edi], xmm0
	movss	xmm0, DWORD PTR [esi+4]
	call	___libm_sse2_cosf
	movss	DWORD PTR [edi+4], xmm0
	movss	xmm0, DWORD PTR [esi+8]
	call	___libm_sse2_cosf
	movss	DWORD PTR [edi+8], xmm0
	mov	eax, edi
	pop	edi
	pop	esi

; 56   : 	}

	pop	ebp
	ret	0
??$cos@M$01Utvec3@glm@@@glm@@YA?AU?$tvec3@M$01@0@ABU10@@Z ENDP ; glm::cos<float,2,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_scalar$ = 16						; size = 4
??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@M@Z PROC	; glm::operator*<float,2>, COMDAT

; 628  : 	{

	push	ebp
	mov	ebp, esp

; 629  : 		return tvec3<T, P>(

	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR _scalar$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR [eax+8], xmm0

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	pop	ebp
	ret	0
??$?DM$01@glm@@YA?AU?$tvec3@M$01@0@ABU10@M@Z ENDP	; glm::operator*<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat3x3@M$01@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat3x3@M$01@0@@Z PROC ; glm::quat_cast<float,2>, COMDAT

; 622  : 	{

	push	ebp
	mov	ebp, esp

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	mov	eax, DWORD PTR _m$[ebp]

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];
; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];
; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];
; 627  : 
; 628  : 		int biggestIndex = 0;

	xor	edx, edx
	movss	xmm0, DWORD PTR [eax+32]
	movss	xmm1, DWORD PTR [eax]
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR [eax+16]
	subss	xmm3, xmm1
	movaps	xmm5, xmm1
	movaps	xmm4, xmm2
	subss	xmm5, xmm2
	subss	xmm4, xmm1
	subss	xmm3, xmm2
	addss	xmm2, xmm1
	subss	xmm5, xmm0
	subss	xmm4, xmm0
	addss	xmm2, xmm0

; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm5, xmm2
	jbe	SHORT $LN4@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movaps	xmm2, xmm5

; 633  : 			biggestIndex = 1;

	mov	edx, 1
$LN4@quat_cast:

; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm4, xmm2
	jbe	SHORT $LN5@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;

	movaps	xmm2, xmm4

; 638  : 			biggestIndex = 2;

	mov	edx, 2
$LN5@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	comiss	xmm3, xmm2
	jbe	SHORT $LN6@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;

	movaps	xmm2, xmm3

; 643  : 			biggestIndex = 3;

	mov	edx, 3
$LN6@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);
; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movss	xmm1, DWORD PTR __real@3e800000

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);
; 650  : 		switch(biggestIndex)

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	addss	xmm2, DWORD PTR __real@3f800000
	sqrtss	xmm2, xmm2
	mulss	xmm2, DWORD PTR __real@3f000000
	divss	xmm1, xmm2
	cmp	edx, 3
	ja	$LN11@quat_cast
	jmp	DWORD PTR $LN165@quat_cast[edx*4]
$LN7@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;
; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [eax+20]
	subss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR [ecx+12], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	movss	xmm0, DWORD PTR [eax+24]
	subss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [eax+12]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN8@quat_cast:

; 657  : 			break;
; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	movss	xmm0, DWORD PTR [eax+20]
	subss	xmm0, DWORD PTR [eax+28]

; 660  : 			Result.x = biggestVal;

	movss	DWORD PTR [ecx], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+12], xmm0

; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	movss	xmm0, DWORD PTR [eax+24]
	addss	xmm0, DWORD PTR [eax+8]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN9@quat_cast:

; 663  : 			break;
; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	movss	xmm0, DWORD PTR [eax+24]
	subss	xmm0, DWORD PTR [eax+8]

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;
; 667  : 			Result.y = biggestVal;

	movss	DWORD PTR [ecx+4], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+12], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	addss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	movss	xmm0, DWORD PTR [eax+28]
	addss	xmm0, DWORD PTR [eax+20]

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 682  : 	}

	pop	ebp
	ret	0
$LN10@quat_cast:

; 669  : 			break;
; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [eax+12]

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;
; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;
; 674  : 			Result.z = biggestVal;

	movss	DWORD PTR [ecx+8], xmm2
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+12], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	addss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	addss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
$LN11@quat_cast:

; 675  : 			break;
; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);
; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	mov	eax, ecx

; 682  : 	}

	pop	ebp
	ret	0
	npad	3
$LN165@quat_cast:
	DD	$LN7@quat_cast
	DD	$LN8@quat_cast
	DD	$LN9@quat_cast
	DD	$LN10@quat_cast
??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat3x3@M$01@0@@Z ENDP ; glm::quat_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat4x4@M$01@0@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m4$ = 12						; size = 4
??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat4x4@M$01@0@@Z PROC ; glm::quat_cast<float,2>, COMDAT

; 686  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _m4$[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	push	ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
	push	eax
	push	esi
	call	??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat3x3@M$01@0@@Z ; glm::quat_cast<float,2>

; 688  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat4x4@M$01@0@@Z ENDP ; glm::quat_cast<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHN@?$tvec4@N$0A@@glm@@QAE@HHHN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 8
??$?0HHHN@?$tvec4@N$0A@@glm@@QAE@HHHN@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,double>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR _d$[ebp]
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HHHN@?$tvec4@N$0A@@glm@@QAE@HHHN@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHN@?$tvec4@N$00@glm@@QAE@HHHN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 8
??$?0HHHN@?$tvec4@N$00@glm@@QAE@HHHN@Z PROC		; glm::tvec4<double,1>::tvec4<double,1><int,int,int,double>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR _d$[ebp]
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HHHN@?$tvec4@N$00@glm@@QAE@HHHN@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1><int,int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHN@?$tvec4@N$01@glm@@QAE@HHHN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 8
??$?0HHHN@?$tvec4@N$01@glm@@QAE@HHHN@Z PROC		; glm::tvec4<double,2>::tvec4<double,2><int,int,int,double>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR _d$[ebp]
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HHHN@?$tvec4@N$01@glm@@QAE@HHHN@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2><int,int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHNH@?$tvec4@N$0A@@glm@@QAE@HHNH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 8
_d$ = 24						; size = 4
??$?0HHNH@?$tvec4@N$0A@@glm@@QAE@HHNH@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><int,int,double,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HHNH@?$tvec4@N$0A@@glm@@QAE@HHNH@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><int,int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HNHH@?$tvec4@N$0A@@glm@@QAE@HNHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
_c$ = 20						; size = 4
_d$ = 24						; size = 4
??$?0HNHH@?$tvec4@N$0A@@glm@@QAE@HNHH@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><int,double,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HNHH@?$tvec4@N$0A@@glm@@QAE@HNHH@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><int,double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHHH@?$tvec4@N$0A@@glm@@QAE@NHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
_c$ = 20						; size = 4
_d$ = 24						; size = 4
??$?0NHHH@?$tvec4@N$0A@@glm@@QAE@NHHH@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><double,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp

; 200  : 		x(static_cast<T>(a)),

	movsd	xmm0, QWORD PTR _a$[ebp]

; 204  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0NHHH@?$tvec4@N$0A@@glm@@QAE@NHHH@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><double,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHNH@?$tvec4@N$00@glm@@QAE@HHNH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 8
_d$ = 24						; size = 4
??$?0HHNH@?$tvec4@N$00@glm@@QAE@HHNH@Z PROC		; glm::tvec4<double,1>::tvec4<double,1><int,int,double,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HHNH@?$tvec4@N$00@glm@@QAE@HHNH@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1><int,int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HNHH@?$tvec4@N$00@glm@@QAE@HNHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
_c$ = 20						; size = 4
_d$ = 24						; size = 4
??$?0HNHH@?$tvec4@N$00@glm@@QAE@HNHH@Z PROC		; glm::tvec4<double,1>::tvec4<double,1><int,double,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HNHH@?$tvec4@N$00@glm@@QAE@HNHH@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1><int,double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHHH@?$tvec4@N$00@glm@@QAE@NHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
_c$ = 20						; size = 4
_d$ = 24						; size = 4
??$?0NHHH@?$tvec4@N$00@glm@@QAE@NHHH@Z PROC		; glm::tvec4<double,1>::tvec4<double,1><double,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp

; 200  : 		x(static_cast<T>(a)),

	movsd	xmm0, QWORD PTR _a$[ebp]

; 204  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0NHHH@?$tvec4@N$00@glm@@QAE@NHHH@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1><double,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHNH@?$tvec4@N$01@glm@@QAE@HHNH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 8
_d$ = 24						; size = 4
??$?0HHNH@?$tvec4@N$01@glm@@QAE@HHNH@Z PROC		; glm::tvec4<double,2>::tvec4<double,2><int,int,double,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HHNH@?$tvec4@N$01@glm@@QAE@HHNH@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2><int,int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HNHH@?$tvec4@N$01@glm@@QAE@HNHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
_c$ = 20						; size = 4
_d$ = 24						; size = 4
??$?0HNHH@?$tvec4@N$01@glm@@QAE@HNHH@Z PROC		; glm::tvec4<double,2>::tvec4<double,2><int,double,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0HNHH@?$tvec4@N$01@glm@@QAE@HNHH@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2><int,double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHHH@?$tvec4@N$01@glm@@QAE@NHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
_c$ = 20						; size = 4
_d$ = 24						; size = 4
??$?0NHHH@?$tvec4@N$01@glm@@QAE@NHHH@Z PROC		; glm::tvec4<double,2>::tvec4<double,2><double,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp

; 200  : 		x(static_cast<T>(a)),

	movsd	xmm0, QWORD PTR _a$[ebp]

; 204  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	20					; 00000014H
??$?0NHHH@?$tvec4@N$01@glm@@QAE@NHHH@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2><double,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHN@?$tvec3@N$01@glm@@QAE@HHN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 8
??$?0HHN@?$tvec3@N$01@glm@@QAE@HHN@Z PROC		; glm::tvec3<double,2>::tvec3<double,2><int,int,double>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHN@?$tvec3@N$01@glm@@QAE@HHN@Z ENDP		; glm::tvec3<double,2>::tvec3<double,2><int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHN@?$tvec3@N$0A@@glm@@QAE@HHN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 8
??$?0HHN@?$tvec3@N$0A@@glm@@QAE@HHN@Z PROC		; glm::tvec3<double,0>::tvec3<double,0><int,int,double>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHN@?$tvec3@N$0A@@glm@@QAE@HHN@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0><int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHN@?$tvec3@N$00@glm@@QAE@HHN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 8
??$?0HHN@?$tvec3@N$00@glm@@QAE@HHN@Z PROC		; glm::tvec3<double,1>::tvec3<double,1><int,int,double>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHN@?$tvec3@N$00@glm@@QAE@HHN@Z ENDP		; glm::tvec3<double,1>::tvec3<double,1><int,int,double>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@N$0A@@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHH@?$tvec4@N$0A@@glm@@QAE@HHHH@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHH@?$tvec4@N$0A@@glm@@QAE@HHHH@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@HH@Z PROC ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>, COMDAT
; _this$ = ecx

; 224  : 	{}

	push	ebp
	mov	ebp, esp

; 220  : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 221  : 		y(static_cast<T>(a.y)),

	movsd	xmm0, QWORD PTR [eax+8]

; 224  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0NHH$0A@@?$tvec4@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@HH@Z ENDP ; glm::tvec4<double,0>::tvec4<double,0><double,int,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NH$0A@@?$tvec4@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0NH$0A@@?$tvec4@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@H@Z PROC ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>, COMDAT
; _this$ = ecx

; 278  : 	{}

	push	ebp
	mov	ebp, esp

; 274  : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 275  : 		y(static_cast<T>(a.y)),

	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0

; 276  : 		z(static_cast<T>(a.z)),

	movsd	xmm0, QWORD PTR [eax+16]

; 278  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	8
??$?0NH$0A@@?$tvec4@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@H@Z ENDP ; glm::tvec4<double,0>::tvec4<double,0><double,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@N$00@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHH@?$tvec4@N$00@glm@@QAE@HHHH@Z PROC		; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHH@?$tvec4@N$00@glm@@QAE@HHHH@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHH$00@?$tvec4@N$00@glm@@QAE@ABU?$tvec2@N$00@1@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0NHH$00@?$tvec4@N$00@glm@@QAE@ABU?$tvec2@N$00@1@HH@Z PROC ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>, COMDAT
; _this$ = ecx

; 224  : 	{}

	push	ebp
	mov	ebp, esp

; 220  : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 221  : 		y(static_cast<T>(a.y)),

	movsd	xmm0, QWORD PTR [eax+8]

; 224  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0NHH$00@?$tvec4@N$00@glm@@QAE@ABU?$tvec2@N$00@1@HH@Z ENDP ; glm::tvec4<double,1>::tvec4<double,1><double,int,int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NH$00@?$tvec4@N$00@glm@@QAE@ABU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0NH$00@?$tvec4@N$00@glm@@QAE@ABU?$tvec3@N$00@1@H@Z PROC ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>, COMDAT
; _this$ = ecx

; 278  : 	{}

	push	ebp
	mov	ebp, esp

; 274  : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 275  : 		y(static_cast<T>(a.y)),

	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0

; 276  : 		z(static_cast<T>(a.z)),

	movsd	xmm0, QWORD PTR [eax+16]

; 278  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	8
??$?0NH$00@?$tvec4@N$00@glm@@QAE@ABU?$tvec3@N$00@1@H@Z ENDP ; glm::tvec4<double,1>::tvec4<double,1><double,int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@N$01@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHH@?$tvec4@N$01@glm@@QAE@HHHH@Z PROC		; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHH@?$tvec4@N$01@glm@@QAE@HHHH@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NHH$01@?$tvec4@N$01@glm@@QAE@ABU?$tvec2@N$01@1@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0NHH$01@?$tvec4@N$01@glm@@QAE@ABU?$tvec2@N$01@1@HH@Z PROC ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>, COMDAT
; _this$ = ecx

; 224  : 	{}

	push	ebp
	mov	ebp, esp

; 220  : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 221  : 		y(static_cast<T>(a.y)),

	movsd	xmm0, QWORD PTR [eax+8]

; 224  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0NHH$01@?$tvec4@N$01@glm@@QAE@ABU?$tvec2@N$01@1@HH@Z ENDP ; glm::tvec4<double,2>::tvec4<double,2><double,int,int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NH$01@?$tvec4@N$01@glm@@QAE@ABU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0NH$01@?$tvec4@N$01@glm@@QAE@ABU?$tvec3@N$01@1@H@Z PROC ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>, COMDAT
; _this$ = ecx

; 278  : 	{}

	push	ebp
	mov	ebp, esp

; 274  : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 275  : 		y(static_cast<T>(a.y)),

	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0

; 276  : 		z(static_cast<T>(a.z)),

	movsd	xmm0, QWORD PTR [eax+16]

; 278  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	8
??$?0NH$01@?$tvec4@N$01@glm@@QAE@ABU?$tvec3@N$01@1@H@Z ENDP ; glm::tvec4<double,2>::tvec4<double,2><double,int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@N$0A@@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHH@?$tvec3@N$0A@@glm@@QAE@HHH@Z PROC		; glm::tvec3<double,0>::tvec3<double,0><int,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHH@?$tvec3@N$0A@@glm@@QAE@HHH@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HNH@?$tvec3@N$0A@@glm@@QAE@HNH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
_c$ = 20						; size = 4
??$?0HNH@?$tvec3@N$0A@@glm@@QAE@HNH@Z PROC		; glm::tvec3<double,0>::tvec3<double,0><int,double,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HNH@?$tvec3@N$0A@@glm@@QAE@HNH@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0><int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0NHH@?$tvec3@N$0A@@glm@@QAE@NHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
_c$ = 20						; size = 4
??$?0NHH@?$tvec3@N$0A@@glm@@QAE@NHH@Z PROC		; glm::tvec3<double,0>::tvec3<double,0><double,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp

; 77   : 		x(static_cast<T>(a)),

	movsd	xmm0, QWORD PTR _a$[ebp]

; 80   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0NHH@?$tvec3@N$0A@@glm@@QAE@NHH@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0><double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0N$0A@@?$tvec3@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$0A@@?$tvec3@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@@Z PROC ; glm::tvec3<double,0>::tvec3<double,0><double,0>, COMDAT
; _this$ = ecx

; 138  : 	{}

	push	ebp
	mov	ebp, esp

; 135  : 		x(static_cast<T>(v.x)),

	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 136  : 		y(static_cast<T>(v.y)),

	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0

; 137  : 		z(static_cast<T>(v.z))

	movsd	xmm0, QWORD PTR [eax+16]

; 138  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??$?0N$0A@@?$tvec3@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@@Z ENDP ; glm::tvec3<double,0>::tvec3<double,0><double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0NH$0A@@?$tvec3@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0NH$0A@@?$tvec3@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@H@Z PROC ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>, COMDAT
; _this$ = ecx

; 98   : 	{}

	push	ebp
	mov	ebp, esp

; 95   : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 96   : 		y(static_cast<T>(a.y)),

	movsd	xmm0, QWORD PTR [eax+8]

; 98   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??$?0NH$0A@@?$tvec3@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@H@Z ENDP ; glm::tvec3<double,0>::tvec3<double,0><double,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@N$00@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHH@?$tvec3@N$00@glm@@QAE@HHH@Z PROC		; glm::tvec3<double,1>::tvec3<double,1><int,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHH@?$tvec3@N$00@glm@@QAE@HHH@Z ENDP		; glm::tvec3<double,1>::tvec3<double,1><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HNH@?$tvec3@N$00@glm@@QAE@HNH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
_c$ = 20						; size = 4
??$?0HNH@?$tvec3@N$00@glm@@QAE@HNH@Z PROC		; glm::tvec3<double,1>::tvec3<double,1><int,double,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HNH@?$tvec3@N$00@glm@@QAE@HNH@Z ENDP		; glm::tvec3<double,1>::tvec3<double,1><int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0NHH@?$tvec3@N$00@glm@@QAE@NHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
_c$ = 20						; size = 4
??$?0NHH@?$tvec3@N$00@glm@@QAE@NHH@Z PROC		; glm::tvec3<double,1>::tvec3<double,1><double,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp

; 77   : 		x(static_cast<T>(a)),

	movsd	xmm0, QWORD PTR _a$[ebp]

; 80   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0NHH@?$tvec3@N$00@glm@@QAE@NHH@Z ENDP		; glm::tvec3<double,1>::tvec3<double,1><double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0N$00@?$tvec3@N$00@glm@@QAE@ABU?$tvec4@N$00@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$00@?$tvec3@N$00@glm@@QAE@ABU?$tvec4@N$00@1@@Z PROC ; glm::tvec3<double,1>::tvec3<double,1><double,1>, COMDAT
; _this$ = ecx

; 138  : 	{}

	push	ebp
	mov	ebp, esp

; 135  : 		x(static_cast<T>(v.x)),

	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 136  : 		y(static_cast<T>(v.y)),

	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0

; 137  : 		z(static_cast<T>(v.z))

	movsd	xmm0, QWORD PTR [eax+16]

; 138  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??$?0N$00@?$tvec3@N$00@glm@@QAE@ABU?$tvec4@N$00@1@@Z ENDP ; glm::tvec3<double,1>::tvec3<double,1><double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0NH$00@?$tvec3@N$00@glm@@QAE@ABU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0NH$00@?$tvec3@N$00@glm@@QAE@ABU?$tvec2@N$00@1@H@Z PROC ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>, COMDAT
; _this$ = ecx

; 98   : 	{}

	push	ebp
	mov	ebp, esp

; 95   : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 96   : 		y(static_cast<T>(a.y)),

	movsd	xmm0, QWORD PTR [eax+8]

; 98   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??$?0NH$00@?$tvec3@N$00@glm@@QAE@ABU?$tvec2@N$00@1@H@Z ENDP ; glm::tvec3<double,1>::tvec3<double,1><double,int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@N$01@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHH@?$tvec3@N$01@glm@@QAE@HHH@Z PROC		; glm::tvec3<double,2>::tvec3<double,2><int,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHH@?$tvec3@N$01@glm@@QAE@HHH@Z ENDP		; glm::tvec3<double,2>::tvec3<double,2><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HNH@?$tvec3@N$01@glm@@QAE@HNH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
_c$ = 20						; size = 4
??$?0HNH@?$tvec3@N$01@glm@@QAE@HNH@Z PROC		; glm::tvec3<double,2>::tvec3<double,2><int,double,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HNH@?$tvec3@N$01@glm@@QAE@HNH@Z ENDP		; glm::tvec3<double,2>::tvec3<double,2><int,double,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0NHH@?$tvec3@N$01@glm@@QAE@NHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
_c$ = 20						; size = 4
??$?0NHH@?$tvec3@N$01@glm@@QAE@NHH@Z PROC		; glm::tvec3<double,2>::tvec3<double,2><double,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp

; 77   : 		x(static_cast<T>(a)),

	movsd	xmm0, QWORD PTR _a$[ebp]

; 80   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0NHH@?$tvec3@N$01@glm@@QAE@NHH@Z ENDP		; glm::tvec3<double,2>::tvec3<double,2><double,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0N$01@?$tvec3@N$01@glm@@QAE@ABU?$tvec4@N$01@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$01@?$tvec3@N$01@glm@@QAE@ABU?$tvec4@N$01@1@@Z PROC ; glm::tvec3<double,2>::tvec3<double,2><double,2>, COMDAT
; _this$ = ecx

; 138  : 	{}

	push	ebp
	mov	ebp, esp

; 135  : 		x(static_cast<T>(v.x)),

	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 136  : 		y(static_cast<T>(v.y)),

	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0

; 137  : 		z(static_cast<T>(v.z))

	movsd	xmm0, QWORD PTR [eax+16]

; 138  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??$?0N$01@?$tvec3@N$01@glm@@QAE@ABU?$tvec4@N$01@1@@Z ENDP ; glm::tvec3<double,2>::tvec3<double,2><double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0NH$01@?$tvec3@N$01@glm@@QAE@ABU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0NH$01@?$tvec3@N$01@glm@@QAE@ABU?$tvec2@N$01@1@H@Z PROC ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>, COMDAT
; _this$ = ecx

; 98   : 	{}

	push	ebp
	mov	ebp, esp

; 95   : 		x(static_cast<T>(a.x)),

	mov	eax, DWORD PTR _a$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 96   : 		y(static_cast<T>(a.y)),

	movsd	xmm0, QWORD PTR [eax+8]

; 98   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??$?0NH$01@?$tvec3@N$01@glm@@QAE@ABU?$tvec2@N$01@1@H@Z ENDP ; glm::tvec3<double,2>::tvec3<double,2><double,int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@N$0A@@glm@@QAE@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HH@?$tvec2@N$0A@@glm@@QAE@HH@Z PROC		; glm::tvec2<double,0>::tvec2<double,0><int,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	8
??$?0HH@?$tvec2@N$0A@@glm@@QAE@HH@Z ENDP		; glm::tvec2<double,0>::tvec2<double,0><int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HN@?$tvec2@N$0A@@glm@@QAE@HN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
??$?0HN@?$tvec2@N$0A@@glm@@QAE@HN@Z PROC		; glm::tvec2<double,0>::tvec2<double,0><int,double>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HN@?$tvec2@N$0A@@glm@@QAE@HN@Z ENDP		; glm::tvec2<double,0>::tvec2<double,0><int,double>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0NH@?$tvec2@N$0A@@glm@@QAE@NH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
??$?0NH@?$tvec2@N$0A@@glm@@QAE@NH@Z PROC		; glm::tvec2<double,0>::tvec2<double,0><double,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(static_cast<T>(a))

	movsd	xmm0, QWORD PTR _a$[ebp]

; 66   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0NH@?$tvec2@N$0A@@glm@@QAE@NH@Z ENDP		; glm::tvec2<double,0>::tvec2<double,0><double,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$0A@@?$tvec2@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$0A@@?$tvec2@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@@Z PROC ; glm::tvec2<double,0>::tvec2<double,0><double,0>, COMDAT
; _this$ = ecx

; 96   : 	{}

	push	ebp
	mov	ebp, esp

; 94   : 		: x(static_cast<T>(v.x))

	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 95   : 		, y(static_cast<T>(v.y))

	movsd	xmm0, QWORD PTR [eax+8]

; 96   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??$?0N$0A@@?$tvec2@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@@Z ENDP ; glm::tvec2<double,0>::tvec2<double,0><double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$0A@@?$tvec2@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$0A@@?$tvec2@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@@Z PROC ; glm::tvec2<double,0>::tvec2<double,0><double,0>, COMDAT
; _this$ = ecx

; 89   : 	{}

	push	ebp
	mov	ebp, esp

; 87   : 		: x(static_cast<T>(v.x))

	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 88   : 		, y(static_cast<T>(v.y))

	movsd	xmm0, QWORD PTR [eax+8]

; 89   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??$?0N$0A@@?$tvec2@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@@Z ENDP ; glm::tvec2<double,0>::tvec2<double,0><double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@N$00@glm@@QAE@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HH@?$tvec2@N$00@glm@@QAE@HH@Z PROC			; glm::tvec2<double,1>::tvec2<double,1><int,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	8
??$?0HH@?$tvec2@N$00@glm@@QAE@HH@Z ENDP			; glm::tvec2<double,1>::tvec2<double,1><int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HN@?$tvec2@N$00@glm@@QAE@HN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
??$?0HN@?$tvec2@N$00@glm@@QAE@HN@Z PROC			; glm::tvec2<double,1>::tvec2<double,1><int,double>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HN@?$tvec2@N$00@glm@@QAE@HN@Z ENDP			; glm::tvec2<double,1>::tvec2<double,1><int,double>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0NH@?$tvec2@N$00@glm@@QAE@NH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
??$?0NH@?$tvec2@N$00@glm@@QAE@NH@Z PROC			; glm::tvec2<double,1>::tvec2<double,1><double,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(static_cast<T>(a))

	movsd	xmm0, QWORD PTR _a$[ebp]

; 66   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0NH@?$tvec2@N$00@glm@@QAE@NH@Z ENDP			; glm::tvec2<double,1>::tvec2<double,1><double,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$00@?$tvec2@N$00@glm@@QAE@ABU?$tvec4@N$00@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$00@?$tvec2@N$00@glm@@QAE@ABU?$tvec4@N$00@1@@Z PROC ; glm::tvec2<double,1>::tvec2<double,1><double,1>, COMDAT
; _this$ = ecx

; 96   : 	{}

	push	ebp
	mov	ebp, esp

; 94   : 		: x(static_cast<T>(v.x))

	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 95   : 		, y(static_cast<T>(v.y))

	movsd	xmm0, QWORD PTR [eax+8]

; 96   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??$?0N$00@?$tvec2@N$00@glm@@QAE@ABU?$tvec4@N$00@1@@Z ENDP ; glm::tvec2<double,1>::tvec2<double,1><double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$00@?$tvec2@N$00@glm@@QAE@ABU?$tvec3@N$00@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$00@?$tvec2@N$00@glm@@QAE@ABU?$tvec3@N$00@1@@Z PROC ; glm::tvec2<double,1>::tvec2<double,1><double,1>, COMDAT
; _this$ = ecx

; 89   : 	{}

	push	ebp
	mov	ebp, esp

; 87   : 		: x(static_cast<T>(v.x))

	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 88   : 		, y(static_cast<T>(v.y))

	movsd	xmm0, QWORD PTR [eax+8]

; 89   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??$?0N$00@?$tvec2@N$00@glm@@QAE@ABU?$tvec3@N$00@1@@Z ENDP ; glm::tvec2<double,1>::tvec2<double,1><double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@N$01@glm@@QAE@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HH@?$tvec2@N$01@glm@@QAE@HH@Z PROC			; glm::tvec2<double,2>::tvec2<double,2><int,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	8
??$?0HH@?$tvec2@N$01@glm@@QAE@HH@Z ENDP			; glm::tvec2<double,2>::tvec2<double,2><int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HN@?$tvec2@N$01@glm@@QAE@HN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 8
??$?0HN@?$tvec2@N$01@glm@@QAE@HN@Z PROC			; glm::tvec2<double,2>::tvec2<double,2><int,double>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HN@?$tvec2@N$01@glm@@QAE@HN@Z ENDP			; glm::tvec2<double,2>::tvec2<double,2><int,double>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0NH@?$tvec2@N$01@glm@@QAE@NH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 4
??$?0NH@?$tvec2@N$01@glm@@QAE@NH@Z PROC			; glm::tvec2<double,2>::tvec2<double,2><double,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(static_cast<T>(a))

	movsd	xmm0, QWORD PTR _a$[ebp]

; 66   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0NH@?$tvec2@N$01@glm@@QAE@NH@Z ENDP			; glm::tvec2<double,2>::tvec2<double,2><double,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$01@?$tvec2@N$01@glm@@QAE@ABU?$tvec4@N$01@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$01@?$tvec2@N$01@glm@@QAE@ABU?$tvec4@N$01@1@@Z PROC ; glm::tvec2<double,2>::tvec2<double,2><double,2>, COMDAT
; _this$ = ecx

; 96   : 	{}

	push	ebp
	mov	ebp, esp

; 94   : 		: x(static_cast<T>(v.x))

	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 95   : 		, y(static_cast<T>(v.y))

	movsd	xmm0, QWORD PTR [eax+8]

; 96   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??$?0N$01@?$tvec2@N$01@glm@@QAE@ABU?$tvec4@N$01@1@@Z ENDP ; glm::tvec2<double,2>::tvec2<double,2><double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$01@?$tvec2@N$01@glm@@QAE@ABU?$tvec3@N$01@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0N$01@?$tvec2@N$01@glm@@QAE@ABU?$tvec3@N$01@1@@Z PROC ; glm::tvec2<double,2>::tvec2<double,2><double,2>, COMDAT
; _this$ = ecx

; 89   : 	{}

	push	ebp
	mov	ebp, esp

; 87   : 		: x(static_cast<T>(v.x))

	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0

; 88   : 		, y(static_cast<T>(v.y))

	movsd	xmm0, QWORD PTR [eax+8]

; 89   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??$?0N$01@?$tvec2@N$01@glm@@QAE@ABU?$tvec3@N$01@1@@Z ENDP ; glm::tvec2<double,2>::tvec2<double,2><double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$0A@@glm@@QAE@HHHM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHM@?$tvec4@M$0A@@glm@@QAE@HHHM@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHM@?$tvec4@M$0A@@glm@@QAE@HHHM@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$00@glm@@QAE@HHHM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHM@?$tvec4@M$00@glm@@QAE@HHHM@Z PROC		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,float>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHM@?$tvec4@M$00@glm@@QAE@HHHM@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$01@glm@@QAE@HHHM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHM@?$tvec4@M$01@glm@@QAE@HHHM@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,float>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHM@?$tvec4@M$01@glm@@QAE@HHHM@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$0A@@glm@@QAE@HHMH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHMH@?$tvec4@M$0A@@glm@@QAE@HHMH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHMH@?$tvec4@M$0A@@glm@@QAE@HHMH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$0A@@glm@@QAE@HMHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HMHH@?$tvec4@M$0A@@glm@@QAE@HMHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HMHH@?$tvec4@M$0A@@glm@@QAE@HMHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$0A@@glm@@QAE@MHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0MHHH@?$tvec4@M$0A@@glm@@QAE@MHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp

; 200  : 		x(static_cast<T>(a)),

	movss	xmm0, DWORD PTR _a$[ebp]

; 204  : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0MHHH@?$tvec4@M$0A@@glm@@QAE@MHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$00@glm@@QAE@HHMH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHMH@?$tvec4@M$00@glm@@QAE@HHMH@Z PROC		; glm::tvec4<float,1>::tvec4<float,1><int,int,float,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHMH@?$tvec4@M$00@glm@@QAE@HHMH@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$00@glm@@QAE@HMHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HMHH@?$tvec4@M$00@glm@@QAE@HMHH@Z PROC		; glm::tvec4<float,1>::tvec4<float,1><int,float,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HMHH@?$tvec4@M$00@glm@@QAE@HMHH@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$00@glm@@QAE@MHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0MHHH@?$tvec4@M$00@glm@@QAE@MHHH@Z PROC		; glm::tvec4<float,1>::tvec4<float,1><float,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp

; 200  : 		x(static_cast<T>(a)),

	movss	xmm0, DWORD PTR _a$[ebp]

; 204  : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0MHHH@?$tvec4@M$00@glm@@QAE@MHHH@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$01@glm@@QAE@HHMH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHMH@?$tvec4@M$01@glm@@QAE@HHMH@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><int,int,float,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHMH@?$tvec4@M$01@glm@@QAE@HHMH@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$01@glm@@QAE@HMHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HMHH@?$tvec4@M$01@glm@@QAE@HMHH@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><int,float,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HMHH@?$tvec4@M$01@glm@@QAE@HMHH@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$01@glm@@QAE@MHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0MHHH@?$tvec4@M$01@glm@@QAE@MHHH@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><float,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp

; 200  : 		x(static_cast<T>(a)),

	movss	xmm0, DWORD PTR _a$[ebp]

; 204  : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0MHHH@?$tvec4@M$01@glm@@QAE@MHHH@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHM@?$tvec3@M$0A@@glm@@QAE@HHM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHM@?$tvec3@M$0A@@glm@@QAE@HHM@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHM@?$tvec3@M$0A@@glm@@QAE@HHM@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHM@?$tvec3@M$00@glm@@QAE@HHM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHM@?$tvec3@M$00@glm@@QAE@HHM@Z PROC		; glm::tvec3<float,1>::tvec3<float,1><int,int,float>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHM@?$tvec3@M$00@glm@@QAE@HHM@Z ENDP		; glm::tvec3<float,1>::tvec3<float,1><int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHM@?$tvec3@M$01@glm@@QAE@HHM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHM@?$tvec3@M$01@glm@@QAE@HHM@Z PROC		; glm::tvec3<float,2>::tvec3<float,2><int,int,float>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHM@?$tvec3@M$01@glm@@QAE@HHM@Z ENDP		; glm::tvec3<float,2>::tvec3<float,2><int,int,float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$0A@@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHH@?$tvec4@M$0A@@glm@@QAE@HHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHH@?$tvec4@M$0A@@glm@@QAE@HHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@HH@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>, COMDAT
; _this$ = ecx

; 224  : 	{}

	push	ebp
	mov	ebp, esp

; 220  : 		x(static_cast<T>(a.x)),

	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]

; 221  : 		y(static_cast<T>(a.y)),
; 222  : 		z(static_cast<T>(b)),

	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 224  : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@HH@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MH$0A@@?$tvec4@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH$0A@@?$tvec4@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@H@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>, COMDAT
; _this$ = ecx

; 278  : 	{}

	push	ebp
	mov	ebp, esp

; 274  : 		x(static_cast<T>(a.x)),

	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]

; 275  : 		y(static_cast<T>(a.y)),
; 276  : 		z(static_cast<T>(a.z)),
; 277  : 		w(static_cast<T>(b))

	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax

; 278  : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	8
??$?0MH$0A@@?$tvec4@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$00@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHH@?$tvec4@M$00@glm@@QAE@HHHH@Z PROC		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHH@?$tvec4@M$00@glm@@QAE@HHHH@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHH$00@?$tvec4@M$00@glm@@QAE@ABU?$tvec2@M$00@1@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0MHH$00@?$tvec4@M$00@glm@@QAE@ABU?$tvec2@M$00@1@HH@Z PROC ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>, COMDAT
; _this$ = ecx

; 224  : 	{}

	push	ebp
	mov	ebp, esp

; 220  : 		x(static_cast<T>(a.x)),

	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]

; 221  : 		y(static_cast<T>(a.y)),
; 222  : 		z(static_cast<T>(b)),

	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 224  : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0MHH$00@?$tvec4@M$00@glm@@QAE@ABU?$tvec2@M$00@1@HH@Z ENDP ; glm::tvec4<float,1>::tvec4<float,1><float,int,int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MH$00@?$tvec4@M$00@glm@@QAE@ABU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH$00@?$tvec4@M$00@glm@@QAE@ABU?$tvec3@M$00@1@H@Z PROC ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>, COMDAT
; _this$ = ecx

; 278  : 	{}

	push	ebp
	mov	ebp, esp

; 274  : 		x(static_cast<T>(a.x)),

	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]

; 275  : 		y(static_cast<T>(a.y)),
; 276  : 		z(static_cast<T>(a.z)),
; 277  : 		w(static_cast<T>(b))

	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax

; 278  : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	8
??$?0MH$00@?$tvec4@M$00@glm@@QAE@ABU?$tvec3@M$00@1@H@Z ENDP ; glm::tvec4<float,1>::tvec4<float,1><float,int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$01@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHH@?$tvec4@M$01@glm@@QAE@HHHH@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>, COMDAT
; _this$ = ecx

; 204  : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _d$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??$?0HHHH@?$tvec4@M$01@glm@@QAE@HHHH@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHH$01@?$tvec4@M$01@glm@@QAE@ABU?$tvec2@M$01@1@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0MHH$01@?$tvec4@M$01@glm@@QAE@ABU?$tvec2@M$01@1@HH@Z PROC ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>, COMDAT
; _this$ = ecx

; 224  : 	{}

	push	ebp
	mov	ebp, esp

; 220  : 		x(static_cast<T>(a.x)),

	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]

; 221  : 		y(static_cast<T>(a.y)),
; 222  : 		z(static_cast<T>(b)),

	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 224  : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx+8], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0MHH$01@?$tvec4@M$01@glm@@QAE@ABU?$tvec2@M$01@1@HH@Z ENDP ; glm::tvec4<float,2>::tvec4<float,2><float,int,int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MH$01@?$tvec4@M$01@glm@@QAE@ABU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH$01@?$tvec4@M$01@glm@@QAE@ABU?$tvec3@M$01@1@H@Z PROC ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>, COMDAT
; _this$ = ecx

; 278  : 	{}

	push	ebp
	mov	ebp, esp

; 274  : 		x(static_cast<T>(a.x)),

	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]

; 275  : 		y(static_cast<T>(a.y)),
; 276  : 		z(static_cast<T>(a.z)),
; 277  : 		w(static_cast<T>(b))

	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax

; 278  : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	8
??$?0MH$01@?$tvec4@M$01@glm@@QAE@ABU?$tvec3@M$01@1@H@Z ENDP ; glm::tvec4<float,2>::tvec4<float,2><float,int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$0A@@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHH@?$tvec3@M$0A@@glm@@QAE@HHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHH@?$tvec3@M$0A@@glm@@QAE@HHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HMH@?$tvec3@M$0A@@glm@@QAE@HMH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HMH@?$tvec3@M$0A@@glm@@QAE@HMH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HMH@?$tvec3@M$0A@@glm@@QAE@HMH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MHH@?$tvec3@M$0A@@glm@@QAE@MHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0MHH@?$tvec3@M$0A@@glm@@QAE@MHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp

; 77   : 		x(static_cast<T>(a)),

	movss	xmm0, DWORD PTR _a$[ebp]

; 80   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0MHH@?$tvec3@M$0A@@glm@@QAE@MHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0M$0A@@?$tvec3@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$0A@@?$tvec3@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><float,0>, COMDAT
; _this$ = ecx

; 138  : 	{}

	push	ebp
	mov	ebp, esp

; 135  : 		x(static_cast<T>(v.x)),

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 136  : 		y(static_cast<T>(v.y)),

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 137  : 		z(static_cast<T>(v.z))

	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax

; 138  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$0A@@?$tvec3@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MH$0A@@?$tvec3@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH$0A@@?$tvec3@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@H@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>, COMDAT
; _this$ = ecx

; 98   : 	{}

	push	ebp
	mov	ebp, esp

; 95   : 		x(static_cast<T>(a.x)),

	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]

; 96   : 		y(static_cast<T>(a.y)),
; 97   : 		z(static_cast<T>(b))

	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 98   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	8
??$?0MH$0A@@?$tvec3@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$00@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHH@?$tvec3@M$00@glm@@QAE@HHH@Z PROC		; glm::tvec3<float,1>::tvec3<float,1><int,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHH@?$tvec3@M$00@glm@@QAE@HHH@Z ENDP		; glm::tvec3<float,1>::tvec3<float,1><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HMH@?$tvec3@M$00@glm@@QAE@HMH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HMH@?$tvec3@M$00@glm@@QAE@HMH@Z PROC		; glm::tvec3<float,1>::tvec3<float,1><int,float,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HMH@?$tvec3@M$00@glm@@QAE@HMH@Z ENDP		; glm::tvec3<float,1>::tvec3<float,1><int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MHH@?$tvec3@M$00@glm@@QAE@MHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0MHH@?$tvec3@M$00@glm@@QAE@MHH@Z PROC		; glm::tvec3<float,1>::tvec3<float,1><float,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp

; 77   : 		x(static_cast<T>(a)),

	movss	xmm0, DWORD PTR _a$[ebp]

; 80   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0MHH@?$tvec3@M$00@glm@@QAE@MHH@Z ENDP		; glm::tvec3<float,1>::tvec3<float,1><float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0M$00@?$tvec3@M$00@glm@@QAE@ABU?$tvec4@M$00@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$00@?$tvec3@M$00@glm@@QAE@ABU?$tvec4@M$00@1@@Z PROC ; glm::tvec3<float,1>::tvec3<float,1><float,1>, COMDAT
; _this$ = ecx

; 138  : 	{}

	push	ebp
	mov	ebp, esp

; 135  : 		x(static_cast<T>(v.x)),

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 136  : 		y(static_cast<T>(v.y)),

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 137  : 		z(static_cast<T>(v.z))

	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax

; 138  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$00@?$tvec3@M$00@glm@@QAE@ABU?$tvec4@M$00@1@@Z ENDP ; glm::tvec3<float,1>::tvec3<float,1><float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MH$00@?$tvec3@M$00@glm@@QAE@ABU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH$00@?$tvec3@M$00@glm@@QAE@ABU?$tvec2@M$00@1@H@Z PROC ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>, COMDAT
; _this$ = ecx

; 98   : 	{}

	push	ebp
	mov	ebp, esp

; 95   : 		x(static_cast<T>(a.x)),

	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]

; 96   : 		y(static_cast<T>(a.y)),
; 97   : 		z(static_cast<T>(b))

	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 98   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	8
??$?0MH$00@?$tvec3@M$00@glm@@QAE@ABU?$tvec2@M$00@1@H@Z ENDP ; glm::tvec3<float,1>::tvec3<float,1><float,int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$01@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HHH@?$tvec3@M$01@glm@@QAE@HHH@Z PROC		; glm::tvec3<float,2>::tvec3<float,2><int,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HHH@?$tvec3@M$01@glm@@QAE@HHH@Z ENDP		; glm::tvec3<float,2>::tvec3<float,2><int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HMH@?$tvec3@M$01@glm@@QAE@HMH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0HMH@?$tvec3@M$01@glm@@QAE@HMH@Z PROC		; glm::tvec3<float,2>::tvec3<float,2><int,float,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0HMH@?$tvec3@M$01@glm@@QAE@HMH@Z ENDP		; glm::tvec3<float,2>::tvec3<float,2><int,float,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MHH@?$tvec3@M$01@glm@@QAE@MHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??$?0MHH@?$tvec3@M$01@glm@@QAE@MHH@Z PROC		; glm::tvec3<float,2>::tvec3<float,2><float,int,int>, COMDAT
; _this$ = ecx

; 80   : 	{}

	push	ebp
	mov	ebp, esp

; 77   : 		x(static_cast<T>(a)),

	movss	xmm0, DWORD PTR _a$[ebp]

; 80   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movd	xmm0, DWORD PTR _c$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??$?0MHH@?$tvec3@M$01@glm@@QAE@MHH@Z ENDP		; glm::tvec3<float,2>::tvec3<float,2><float,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0M$01@?$tvec3@M$01@glm@@QAE@ABU?$tvec4@M$01@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$01@?$tvec3@M$01@glm@@QAE@ABU?$tvec4@M$01@1@@Z PROC ; glm::tvec3<float,2>::tvec3<float,2><float,2>, COMDAT
; _this$ = ecx

; 138  : 	{}

	push	ebp
	mov	ebp, esp

; 135  : 		x(static_cast<T>(v.x)),

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 136  : 		y(static_cast<T>(v.y)),

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 137  : 		z(static_cast<T>(v.z))

	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax

; 138  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$01@?$tvec3@M$01@glm@@QAE@ABU?$tvec4@M$01@1@@Z ENDP ; glm::tvec3<float,2>::tvec3<float,2><float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MH$01@?$tvec3@M$01@glm@@QAE@ABU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH$01@?$tvec3@M$01@glm@@QAE@ABU?$tvec2@M$01@1@H@Z PROC ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>, COMDAT
; _this$ = ecx

; 98   : 	{}

	push	ebp
	mov	ebp, esp

; 95   : 		x(static_cast<T>(a.x)),

	mov	edx, DWORD PTR _a$[ebp]
	movd	xmm0, DWORD PTR _b$[ebp]

; 96   : 		y(static_cast<T>(a.y)),
; 97   : 		z(static_cast<T>(b))

	cvtdq2ps xmm0, xmm0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 98   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	8
??$?0MH$01@?$tvec3@M$01@glm@@QAE@ABU?$tvec2@M$01@1@H@Z ENDP ; glm::tvec3<float,2>::tvec3<float,2><float,int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$0A@@glm@@QAE@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HH@?$tvec2@M$0A@@glm@@QAE@HH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0HH@?$tvec2@M$0A@@glm@@QAE@HH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HM@?$tvec2@M$0A@@glm@@QAE@HM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HM@?$tvec2@M$0A@@glm@@QAE@HM@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,float>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0HM@?$tvec2@M$0A@@glm@@QAE@HM@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0MH@?$tvec2@M$0A@@glm@@QAE@MH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH@?$tvec2@M$0A@@glm@@QAE@MH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><float,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(static_cast<T>(a))

	movss	xmm0, DWORD PTR _a$[ebp]

; 66   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0MH@?$tvec2@M$0A@@glm@@QAE@MH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><float,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$0A@@?$tvec2@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$0A@@?$tvec2@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec2<float,0>::tvec2<float,0><float,0>, COMDAT
; _this$ = ecx

; 96   : 	{}

	push	ebp
	mov	ebp, esp

; 94   : 		: x(static_cast<T>(v.x))

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 95   : 		, y(static_cast<T>(v.y))

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 96   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$0A@@?$tvec2@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec2<float,0>::tvec2<float,0><float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$0A@@?$tvec2@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$0A@@?$tvec2@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@@Z PROC ; glm::tvec2<float,0>::tvec2<float,0><float,0>, COMDAT
; _this$ = ecx

; 89   : 	{}

	push	ebp
	mov	ebp, esp

; 87   : 		: x(static_cast<T>(v.x))

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 88   : 		, y(static_cast<T>(v.y))

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 89   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$0A@@?$tvec2@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@@Z ENDP ; glm::tvec2<float,0>::tvec2<float,0><float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$00@glm@@QAE@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HH@?$tvec2@M$00@glm@@QAE@HH@Z PROC			; glm::tvec2<float,1>::tvec2<float,1><int,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0HH@?$tvec2@M$00@glm@@QAE@HH@Z ENDP			; glm::tvec2<float,1>::tvec2<float,1><int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HM@?$tvec2@M$00@glm@@QAE@HM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HM@?$tvec2@M$00@glm@@QAE@HM@Z PROC			; glm::tvec2<float,1>::tvec2<float,1><int,float>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0HM@?$tvec2@M$00@glm@@QAE@HM@Z ENDP			; glm::tvec2<float,1>::tvec2<float,1><int,float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0MH@?$tvec2@M$00@glm@@QAE@MH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH@?$tvec2@M$00@glm@@QAE@MH@Z PROC			; glm::tvec2<float,1>::tvec2<float,1><float,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(static_cast<T>(a))

	movss	xmm0, DWORD PTR _a$[ebp]

; 66   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0MH@?$tvec2@M$00@glm@@QAE@MH@Z ENDP			; glm::tvec2<float,1>::tvec2<float,1><float,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$00@?$tvec2@M$00@glm@@QAE@ABU?$tvec4@M$00@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$00@?$tvec2@M$00@glm@@QAE@ABU?$tvec4@M$00@1@@Z PROC ; glm::tvec2<float,1>::tvec2<float,1><float,1>, COMDAT
; _this$ = ecx

; 96   : 	{}

	push	ebp
	mov	ebp, esp

; 94   : 		: x(static_cast<T>(v.x))

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 95   : 		, y(static_cast<T>(v.y))

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 96   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$00@?$tvec2@M$00@glm@@QAE@ABU?$tvec4@M$00@1@@Z ENDP ; glm::tvec2<float,1>::tvec2<float,1><float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$00@?$tvec2@M$00@glm@@QAE@ABU?$tvec3@M$00@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$00@?$tvec2@M$00@glm@@QAE@ABU?$tvec3@M$00@1@@Z PROC ; glm::tvec2<float,1>::tvec2<float,1><float,1>, COMDAT
; _this$ = ecx

; 89   : 	{}

	push	ebp
	mov	ebp, esp

; 87   : 		: x(static_cast<T>(v.x))

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 88   : 		, y(static_cast<T>(v.y))

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 89   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$00@?$tvec2@M$00@glm@@QAE@ABU?$tvec3@M$00@1@@Z ENDP ; glm::tvec2<float,1>::tvec2<float,1><float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$01@glm@@QAE@HH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HH@?$tvec2@M$01@glm@@QAE@HH@Z PROC			; glm::tvec2<float,2>::tvec2<float,2><int,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0HH@?$tvec2@M$01@glm@@QAE@HH@Z ENDP			; glm::tvec2<float,2>::tvec2<float,2><int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HM@?$tvec2@M$01@glm@@QAE@HM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0HM@?$tvec2@M$01@glm@@QAE@HM@Z PROC			; glm::tvec2<float,2>::tvec2<float,2><int,float>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp
	movd	xmm0, DWORD PTR _a$[ebp]
	mov	eax, ecx
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0HM@?$tvec2@M$01@glm@@QAE@HM@Z ENDP			; glm::tvec2<float,2>::tvec2<float,2><int,float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0MH@?$tvec2@M$01@glm@@QAE@MH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$?0MH@?$tvec2@M$01@glm@@QAE@MH@Z PROC			; glm::tvec2<float,2>::tvec2<float,2><float,int>, COMDAT
; _this$ = ecx

; 66   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(static_cast<T>(a))

	movss	xmm0, DWORD PTR _a$[ebp]

; 66   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movd	xmm0, DWORD PTR _b$[ebp]
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??$?0MH@?$tvec2@M$01@glm@@QAE@MH@Z ENDP			; glm::tvec2<float,2>::tvec2<float,2><float,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$01@?$tvec2@M$01@glm@@QAE@ABU?$tvec4@M$01@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$01@?$tvec2@M$01@glm@@QAE@ABU?$tvec4@M$01@1@@Z PROC ; glm::tvec2<float,2>::tvec2<float,2><float,2>, COMDAT
; _this$ = ecx

; 96   : 	{}

	push	ebp
	mov	ebp, esp

; 94   : 		: x(static_cast<T>(v.x))

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 95   : 		, y(static_cast<T>(v.y))

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 96   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$01@?$tvec2@M$01@glm@@QAE@ABU?$tvec4@M$01@1@@Z ENDP ; glm::tvec2<float,2>::tvec2<float,2><float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$01@?$tvec2@M$01@glm@@QAE@ABU?$tvec3@M$01@1@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$?0M$01@?$tvec2@M$01@glm@@QAE@ABU?$tvec3@M$01@1@@Z PROC ; glm::tvec2<float,2>::tvec2<float,2><float,2>, COMDAT
; _this$ = ecx

; 89   : 	{}

	push	ebp
	mov	ebp, esp

; 87   : 		: x(static_cast<T>(v.x))

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 88   : 		, y(static_cast<T>(v.y))

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 89   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??$?0M$01@?$tvec2@M$01@glm@@QAE@ABU?$tvec3@M$01@1@@Z ENDP ; glm::tvec2<float,2>::tvec2<float,2><float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -64						; size = 64
_m$ = 8							; size = 4
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR __real@3ff0000000000000

; 95   : 		*this = dualquat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	sub	esp, 64					; 00000040H
	xorps	xmm1, xmm1
	push	esi
	push	DWORD PTR _m$[ebp]
	mov	esi, ecx
	push	eax
	movups	XMMWORD PTR [esi], xmm1
	movsd	QWORD PTR [esi+16], xmm1
	movsd	QWORD PTR [esi+24], xmm0
	movups	XMMWORD PTR [esi+32], xmm1
	movsd	QWORD PTR [esi+48], xmm1
	movsd	QWORD PTR [esi+56], xmm0
	call	??$dualquat_cast@N$0A@@glm@@YA?AU?$tdualquat@N$0A@@0@ABU?$tmat3x4@N$0A@@0@@Z ; glm::dualquat_cast<double,0>
	add	esp, 8
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [esi], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [esi+16], xmm0
	movups	xmm0, XMMWORD PTR [eax+32]
	movups	XMMWORD PTR [esi+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+48]

; 96   : 	}

	mov	eax, esi
	movups	XMMWORD PTR [esi+48], xmm0
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp

; 89   : 		*this = dualquat_cast(m);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx], xmm1
	movsd	QWORD PTR [ecx+16], xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movsd	QWORD PTR [ecx+48], xmm1
	movsd	QWORD PTR [ecx+56], xmm0
	movsd	xmm5, QWORD PTR [eax]
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm4, QWORD PTR [eax+16]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm7, QWORD PTR [eax+32]
	movsd	xmm2, QWORD PTR [eax+40]
	movsd	xmm6, QWORD PTR [eax+48]
	movsd	xmm3, QWORD PTR [eax+56]

; 90   : 	}

	mov	eax, ecx
	unpcklpd xmm5, xmm0
	movups	XMMWORD PTR [ecx], xmm5
	unpcklpd xmm4, xmm1
	unpcklpd xmm7, xmm2
	movups	XMMWORD PTR [ecx+16], xmm4
	unpcklpd xmm6, xmm3
	movups	XMMWORD PTR [ecx+32], xmm7
	movups	XMMWORD PTR [ecx+48], xmm6
	pop	ebp
	ret	4
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@0@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_d$ = 12						; size = 4
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@0@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT
; _this$ = ecx

; 75   : 	{}

	push	ebp
	mov	ebp, esp

; 74   : 		: real(r), dual(d)

	mov	eax, DWORD PTR _r$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	mov	eax, DWORD PTR _d$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 75   : 	{}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	8
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@0@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@ABU?$tvec3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 8
tv222 = -8						; size = 8
_q$ = 8							; size = 4
_p$ = 12						; size = 4
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@ABU?$tvec3@N$0A@@1@@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 65   : 		: real(q), dual(

	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movsd	xmm4, QWORD PTR __real@3fe0000000000000
	movups	xmm0, XMMWORD PTR [edx]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [edx+16]
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [edx+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm7, QWORD PTR [eax+8]
	movsd	xmm5, QWORD PTR [edx]
	movsd	xmm6, QWORD PTR [edx+24]
	mulsd	xmm2, xmm0
	movsd	QWORD PTR tv222[ebp], xmm0
	movaps	xmm0, xmm5
	mulsd	xmm0, xmm7
	movsd	xmm3, QWORD PTR [edx+16]
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR [eax+16]
	subsd	xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, xmm6
	mulsd	xmm1, QWORD PTR __real@bfe0000000000000
	addsd	xmm2, xmm0
	movaps	xmm0, xmm3
	mulsd	xmm0, QWORD PTR [eax]
	mulsd	xmm3, xmm7
	mulsd	xmm2, xmm4
	mulsd	xmm0, xmm4
	movsd	QWORD PTR $T1[ebp], xmm2
	movaps	xmm2, xmm6
	mulsd	xmm6, QWORD PTR [eax]
	mulsd	xmm2, xmm7
	addsd	xmm3, xmm6
	mulsd	xmm2, xmm4
	subsd	xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, xmm5
	mulsd	xmm5, QWORD PTR [eax]
	mulsd	xmm0, xmm4
	addsd	xmm2, xmm0
	movaps	xmm0, xmm7
	mulsd	xmm0, QWORD PTR [edx+8]
	addsd	xmm5, xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, QWORD PTR tv222[ebp]

; 70   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+40], xmm2
	mulsd	xmm5, xmm4
	subsd	xmm3, xmm0
	movsd	xmm0, QWORD PTR $T1[ebp]
	movsd	QWORD PTR [ecx+48], xmm0
	subsd	xmm1, xmm5
	mulsd	xmm3, xmm4
	movsd	QWORD PTR [ecx+56], xmm1
	movsd	QWORD PTR [ecx+32], xmm3
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@ABU?$tvec3@N$0A@@1@@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT
; _this$ = ecx

; 61   : 	{}

	push	ebp
	mov	ebp, esp

; 60   : 		: real(r), dual(tquat<T, P>(0, 0, 0, 0))

	mov	eax, DWORD PTR _r$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 61   : 	{}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tdualquat@N$0A@@glm@@QAE@ABU?$tquat@N$0A@@1@@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tdualquat@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT
; _this$ = ecx

; 56   : 	{}

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movsd	QWORD PTR [ecx+48], xmm1
	movsd	QWORD PTR [ecx+56], xmm0
	ret	4
??0?$tdualquat@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tdualquat@N$0A@@glm@@QAE@XZ PROC			; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT
; _this$ = ecx

; 31   : 				: real(tquat<T, P>())

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1

; 34   : 		{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	ret	0
??0?$tdualquat@N$0A@@glm@@QAE@XZ ENDP			; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$0A@@glm@@QBEABU?$tquat@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@N$0A@@glm@@QBEABU?$tquat@N$0A@@1@H@Z PROC ; glm::tdualquat<double,0>::operator[], COMDAT
; _this$ = ecx

; 20   : 	{

	push	ebp
	mov	ebp, esp

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 23   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@N$0A@@glm@@QBEABU?$tquat@N$0A@@1@H@Z ENDP ; glm::tdualquat<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$0A@@glm@@QAEAAU?$tquat@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@N$0A@@glm@@QAEAAU?$tquat@N$0A@@1@H@Z PROC ; glm::tdualquat<double,0>::operator[], COMDAT
; _this$ = ecx

; 13   : 	{

	push	ebp
	mov	ebp, esp

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 16   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@N$0A@@glm@@QAEAAU?$tquat@N$0A@@1@H@Z ENDP ; glm::tdualquat<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@N$0A@@glm@@SAHXZ PROC		; glm::tdualquat<double,0>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tdualquat@N$0A@@glm@@SAHXZ ENDP		; glm::tdualquat<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 95   : 		*this = dualquat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	push	DWORD PTR _m$[ebp]
	mov	esi, ecx
	push	eax
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 1065353216		; 3f800000H
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi+24], 0
	mov	DWORD PTR [esi+28], 1065353216		; 3f800000H
	call	??$dualquat_cast@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@ABU?$tmat3x4@M$0A@@0@@Z ; glm::dualquat_cast<float,0>
	add	esp, 8
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [esi], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 96   : 	}

	mov	eax, esi
	movups	XMMWORD PTR [esi+16], xmm0
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 32
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H

; 89   : 		*this = dualquat_cast(m);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 1065353216		; 3f800000H
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 90   : 	}

	mov	eax, ecx
	movups	xmm1, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@0@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_d$ = 12						; size = 4
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@0@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT
; _this$ = ecx

; 75   : 	{}

	push	ebp
	mov	ebp, esp

; 74   : 		: real(r), dual(d)

	mov	eax, DWORD PTR _r$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, DWORD PTR _d$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 75   : 	{}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@0@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@ABU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
tv223 = 8						; size = 4
_q$ = 8							; size = 4
$T1 = 12						; size = 4
_p$ = 12						; size = 4
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@ABU?$tvec3@M$0A@@1@@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 65   : 		: real(q), dual(

	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm4, DWORD PTR __real@3f000000
	movups	xmm0, XMMWORD PTR [edx]
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	movss	xmm2, DWORD PTR [eax]
	movss	xmm7, DWORD PTR [eax+4]
	movss	xmm5, DWORD PTR [edx]
	movss	xmm6, DWORD PTR [edx+12]
	mulss	xmm2, xmm0
	movss	DWORD PTR tv223[ebp], xmm0
	movaps	xmm0, xmm5
	movss	xmm3, DWORD PTR [edx+8]
	mulss	xmm0, xmm7
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [eax+8]
	subss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, xmm6
	mulss	xmm1, DWORD PTR __real@bf000000
	addss	xmm2, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [eax]
	mulss	xmm3, xmm7
	mulss	xmm2, xmm4
	mulss	xmm0, xmm4
	movss	DWORD PTR $T1[ebp], xmm2
	movaps	xmm2, xmm6
	mulss	xmm6, DWORD PTR [eax]
	mulss	xmm2, xmm7
	addss	xmm3, xmm6
	mulss	xmm2, xmm4
	subss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, xmm5
	mulss	xmm5, DWORD PTR [eax]
	mulss	xmm0, xmm4
	addss	xmm2, xmm0
	movaps	xmm0, xmm7
	mulss	xmm0, DWORD PTR [edx+4]
	addss	xmm5, xmm0
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR tv223[ebp]

; 70   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx+20], xmm2
	subss	xmm3, xmm0
	mulss	xmm5, xmm4
	movss	xmm0, DWORD PTR $T1[ebp]
	movss	DWORD PTR [ecx+24], xmm0
	subss	xmm1, xmm5
	mulss	xmm3, xmm4
	movss	DWORD PTR [ecx+16], xmm3
	movss	DWORD PTR [ecx+28], xmm1
	pop	ebp
	ret	8
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@ABU?$tvec3@M$0A@@1@@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT
; _this$ = ecx

; 61   : 	{}

	push	ebp
	mov	ebp, esp

; 60   : 		: real(r), dual(tquat<T, P>(0, 0, 0, 0))

	mov	eax, DWORD PTR _r$[ebp]
	movups	xmm0, XMMWORD PTR [eax]

; 61   : 	{}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	pop	ebp
	ret	4
??0?$tdualquat@M$0A@@glm@@QAE@ABU?$tquat@M$0A@@1@@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tdualquat@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT
; _this$ = ecx

; 56   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 1065353216		; 3f800000H
	ret	4
??0?$tdualquat@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tdualquat@M$0A@@glm@@QAE@XZ PROC			; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT
; _this$ = ecx

; 31   : 				: real(tquat<T, P>())

	mov	DWORD PTR [ecx], 0

; 34   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	ret	0
??0?$tdualquat@M$0A@@glm@@QAE@XZ ENDP			; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$0A@@glm@@QBEABU?$tquat@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@M$0A@@glm@@QBEABU?$tquat@M$0A@@1@H@Z PROC ; glm::tdualquat<float,0>::operator[], COMDAT
; _this$ = ecx

; 20   : 	{

	push	ebp
	mov	ebp, esp

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 23   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@M$0A@@glm@@QBEABU?$tquat@M$0A@@1@H@Z ENDP ; glm::tdualquat<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$0A@@glm@@QAEAAU?$tquat@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@M$0A@@glm@@QAEAAU?$tquat@M$0A@@1@H@Z PROC ; glm::tdualquat<float,0>::operator[], COMDAT
; _this$ = ecx

; 13   : 	{

	push	ebp
	mov	ebp, esp

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 16   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@M$0A@@glm@@QAEAAU?$tquat@M$0A@@1@H@Z ENDP ; glm::tdualquat<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@M$0A@@glm@@SAHXZ PROC		; glm::tdualquat<float,0>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tdualquat@M$0A@@glm@@SAHXZ ENDP		; glm::tdualquat<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -64						; size = 64
_m$ = 8							; size = 4
??0?$tdualquat@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC ; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR __real@3ff0000000000000

; 95   : 		*this = dualquat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	sub	esp, 64					; 00000040H
	xorps	xmm1, xmm1
	push	esi
	push	DWORD PTR _m$[ebp]
	mov	esi, ecx
	push	eax
	movups	XMMWORD PTR [esi], xmm1
	movsd	QWORD PTR [esi+16], xmm1
	movsd	QWORD PTR [esi+24], xmm0
	movups	XMMWORD PTR [esi+32], xmm1
	movsd	QWORD PTR [esi+48], xmm1
	movsd	QWORD PTR [esi+56], xmm0
	call	??$dualquat_cast@N$00@glm@@YA?AU?$tdualquat@N$00@0@ABU?$tmat3x4@N$00@0@@Z ; glm::dualquat_cast<double,1>
	add	esp, 8
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [esi], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [esi+16], xmm0
	movups	xmm0, XMMWORD PTR [eax+32]
	movups	XMMWORD PTR [esi+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+48]

; 96   : 	}

	mov	eax, esi
	movups	XMMWORD PTR [esi+48], xmm0
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP ; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tdualquat@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC ; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp

; 89   : 		*this = dualquat_cast(m);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx], xmm1
	movsd	QWORD PTR [ecx+16], xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movsd	QWORD PTR [ecx+48], xmm1
	movsd	QWORD PTR [ecx+56], xmm0
	movsd	xmm5, QWORD PTR [eax]
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm4, QWORD PTR [eax+16]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm7, QWORD PTR [eax+32]
	movsd	xmm2, QWORD PTR [eax+40]
	movsd	xmm6, QWORD PTR [eax+48]
	movsd	xmm3, QWORD PTR [eax+56]

; 90   : 	}

	mov	eax, ecx
	unpcklpd xmm5, xmm0
	movups	XMMWORD PTR [ecx], xmm5
	unpcklpd xmm4, xmm1
	unpcklpd xmm7, xmm2
	movups	XMMWORD PTR [ecx+16], xmm4
	unpcklpd xmm6, xmm3
	movups	XMMWORD PTR [ecx+32], xmm7
	movups	XMMWORD PTR [ecx+48], xmm6
	pop	ebp
	ret	4
??0?$tdualquat@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP ; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@0@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_d$ = 12						; size = 4
??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@0@Z PROC	; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT
; _this$ = ecx

; 75   : 	{}

	push	ebp
	mov	ebp, esp

; 74   : 		: real(r), dual(d)

	mov	eax, DWORD PTR _r$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	mov	eax, DWORD PTR _d$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 75   : 	{}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	8
??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@0@Z ENDP	; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@ABU?$tvec3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 8
tv222 = -8						; size = 8
_q$ = 8							; size = 4
_p$ = 12						; size = 4
??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@ABU?$tvec3@N$00@1@@Z PROC ; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 65   : 		: real(q), dual(

	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movsd	xmm4, QWORD PTR __real@3fe0000000000000
	movups	xmm0, XMMWORD PTR [edx]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [edx+16]
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [edx+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm7, QWORD PTR [eax+8]
	movsd	xmm5, QWORD PTR [edx]
	movsd	xmm6, QWORD PTR [edx+24]
	mulsd	xmm2, xmm0
	movsd	QWORD PTR tv222[ebp], xmm0
	movaps	xmm0, xmm5
	mulsd	xmm0, xmm7
	movsd	xmm3, QWORD PTR [edx+16]
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR [eax+16]
	subsd	xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, xmm6
	mulsd	xmm1, QWORD PTR __real@bfe0000000000000
	addsd	xmm2, xmm0
	movaps	xmm0, xmm3
	mulsd	xmm0, QWORD PTR [eax]
	mulsd	xmm3, xmm7
	mulsd	xmm2, xmm4
	mulsd	xmm0, xmm4
	movsd	QWORD PTR $T1[ebp], xmm2
	movaps	xmm2, xmm6
	mulsd	xmm6, QWORD PTR [eax]
	mulsd	xmm2, xmm7
	addsd	xmm3, xmm6
	mulsd	xmm2, xmm4
	subsd	xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, xmm5
	mulsd	xmm5, QWORD PTR [eax]
	mulsd	xmm0, xmm4
	addsd	xmm2, xmm0
	movaps	xmm0, xmm7
	mulsd	xmm0, QWORD PTR [edx+8]
	addsd	xmm5, xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, QWORD PTR tv222[ebp]

; 70   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+40], xmm2
	mulsd	xmm5, xmm4
	subsd	xmm3, xmm0
	movsd	xmm0, QWORD PTR $T1[ebp]
	movsd	QWORD PTR [ecx+48], xmm0
	subsd	xmm1, xmm5
	mulsd	xmm3, xmm4
	movsd	QWORD PTR [ecx+56], xmm1
	movsd	QWORD PTR [ecx+32], xmm3
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@ABU?$tvec3@N$00@1@@Z ENDP ; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@@Z PROC	; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT
; _this$ = ecx

; 61   : 	{}

	push	ebp
	mov	ebp, esp

; 60   : 		: real(r), dual(tquat<T, P>(0, 0, 0, 0))

	mov	eax, DWORD PTR _r$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 61   : 	{}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tdualquat@N$00@glm@@QAE@ABU?$tquat@N$00@1@@Z ENDP	; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tdualquat@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT
; _this$ = ecx

; 56   : 	{}

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movsd	QWORD PTR [ecx+48], xmm1
	movsd	QWORD PTR [ecx+56], xmm0
	ret	4
??0?$tdualquat@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tdualquat@N$00@glm@@QAE@XZ PROC			; glm::tdualquat<double,1>::tdualquat<double,1>, COMDAT
; _this$ = ecx

; 31   : 				: real(tquat<T, P>())

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1

; 34   : 		{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	ret	0
??0?$tdualquat@N$00@glm@@QAE@XZ ENDP			; glm::tdualquat<double,1>::tdualquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$00@glm@@QBEABU?$tquat@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@N$00@glm@@QBEABU?$tquat@N$00@1@H@Z PROC	; glm::tdualquat<double,1>::operator[], COMDAT
; _this$ = ecx

; 20   : 	{

	push	ebp
	mov	ebp, esp

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 23   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@N$00@glm@@QBEABU?$tquat@N$00@1@H@Z ENDP	; glm::tdualquat<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$00@glm@@QAEAAU?$tquat@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@N$00@glm@@QAEAAU?$tquat@N$00@1@H@Z PROC	; glm::tdualquat<double,1>::operator[], COMDAT
; _this$ = ecx

; 13   : 	{

	push	ebp
	mov	ebp, esp

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 16   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@N$00@glm@@QAEAAU?$tquat@N$00@1@H@Z ENDP	; glm::tdualquat<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@N$00@glm@@SAHXZ PROC		; glm::tdualquat<double,1>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tdualquat@N$00@glm@@SAHXZ ENDP		; glm::tdualquat<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tdualquat@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC ; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 95   : 		*this = dualquat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	push	DWORD PTR _m$[ebp]
	mov	esi, ecx
	push	eax
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 1065353216		; 3f800000H
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi+24], 0
	mov	DWORD PTR [esi+28], 1065353216		; 3f800000H
	call	??$dualquat_cast@M$00@glm@@YA?AU?$tdualquat@M$00@0@ABU?$tmat3x4@M$00@0@@Z ; glm::dualquat_cast<float,1>
	add	esp, 8
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [esi], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 96   : 	}

	mov	eax, esi
	movups	XMMWORD PTR [esi+16], xmm0
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP ; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 32
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tdualquat@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC ; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H

; 89   : 		*this = dualquat_cast(m);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 1065353216		; 3f800000H
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 90   : 	}

	mov	eax, ecx
	movups	xmm1, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP ; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@0@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_d$ = 12						; size = 4
??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@0@Z PROC	; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT
; _this$ = ecx

; 75   : 	{}

	push	ebp
	mov	ebp, esp

; 74   : 		: real(r), dual(d)

	mov	eax, DWORD PTR _r$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, DWORD PTR _d$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 75   : 	{}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@0@Z ENDP	; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@ABU?$tvec3@M$00@1@@Z
_TEXT	SEGMENT
tv223 = 8						; size = 4
_q$ = 8							; size = 4
$T1 = 12						; size = 4
_p$ = 12						; size = 4
??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@ABU?$tvec3@M$00@1@@Z PROC ; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 65   : 		: real(q), dual(

	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm4, DWORD PTR __real@3f000000
	movups	xmm0, XMMWORD PTR [edx]
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	movss	xmm2, DWORD PTR [eax]
	movss	xmm7, DWORD PTR [eax+4]
	movss	xmm5, DWORD PTR [edx]
	movss	xmm6, DWORD PTR [edx+12]
	mulss	xmm2, xmm0
	movss	DWORD PTR tv223[ebp], xmm0
	movaps	xmm0, xmm5
	movss	xmm3, DWORD PTR [edx+8]
	mulss	xmm0, xmm7
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [eax+8]
	subss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, xmm6
	mulss	xmm1, DWORD PTR __real@bf000000
	addss	xmm2, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [eax]
	mulss	xmm3, xmm7
	mulss	xmm2, xmm4
	mulss	xmm0, xmm4
	movss	DWORD PTR $T1[ebp], xmm2
	movaps	xmm2, xmm6
	mulss	xmm6, DWORD PTR [eax]
	mulss	xmm2, xmm7
	addss	xmm3, xmm6
	mulss	xmm2, xmm4
	subss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, xmm5
	mulss	xmm5, DWORD PTR [eax]
	mulss	xmm0, xmm4
	addss	xmm2, xmm0
	movaps	xmm0, xmm7
	mulss	xmm0, DWORD PTR [edx+4]
	addss	xmm5, xmm0
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR tv223[ebp]

; 70   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx+20], xmm2
	subss	xmm3, xmm0
	mulss	xmm5, xmm4
	movss	xmm0, DWORD PTR $T1[ebp]
	movss	DWORD PTR [ecx+24], xmm0
	subss	xmm1, xmm5
	mulss	xmm3, xmm4
	movss	DWORD PTR [ecx+16], xmm3
	movss	DWORD PTR [ecx+28], xmm1
	pop	ebp
	ret	8
??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@ABU?$tvec3@M$00@1@@Z ENDP ; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@@Z PROC	; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT
; _this$ = ecx

; 61   : 	{}

	push	ebp
	mov	ebp, esp

; 60   : 		: real(r), dual(tquat<T, P>(0, 0, 0, 0))

	mov	eax, DWORD PTR _r$[ebp]
	movups	xmm0, XMMWORD PTR [eax]

; 61   : 	{}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	pop	ebp
	ret	4
??0?$tdualquat@M$00@glm@@QAE@ABU?$tquat@M$00@1@@Z ENDP	; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tdualquat@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT
; _this$ = ecx

; 56   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 1065353216		; 3f800000H
	ret	4
??0?$tdualquat@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tdualquat@M$00@glm@@QAE@XZ PROC			; glm::tdualquat<float,1>::tdualquat<float,1>, COMDAT
; _this$ = ecx

; 31   : 				: real(tquat<T, P>())

	mov	DWORD PTR [ecx], 0

; 34   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	ret	0
??0?$tdualquat@M$00@glm@@QAE@XZ ENDP			; glm::tdualquat<float,1>::tdualquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$00@glm@@QBEABU?$tquat@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@M$00@glm@@QBEABU?$tquat@M$00@1@H@Z PROC	; glm::tdualquat<float,1>::operator[], COMDAT
; _this$ = ecx

; 20   : 	{

	push	ebp
	mov	ebp, esp

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 23   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@M$00@glm@@QBEABU?$tquat@M$00@1@H@Z ENDP	; glm::tdualquat<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$00@glm@@QAEAAU?$tquat@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@M$00@glm@@QAEAAU?$tquat@M$00@1@H@Z PROC	; glm::tdualquat<float,1>::operator[], COMDAT
; _this$ = ecx

; 13   : 	{

	push	ebp
	mov	ebp, esp

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 16   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@M$00@glm@@QAEAAU?$tquat@M$00@1@H@Z ENDP	; glm::tdualquat<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@M$00@glm@@SAHXZ PROC		; glm::tdualquat<float,1>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tdualquat@M$00@glm@@SAHXZ ENDP		; glm::tdualquat<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -64						; size = 64
_m$ = 8							; size = 4
??0?$tdualquat@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC ; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	movsd	xmm0, QWORD PTR __real@3ff0000000000000

; 95   : 		*this = dualquat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	sub	esp, 64					; 00000040H
	xorps	xmm1, xmm1
	push	esi
	push	DWORD PTR _m$[ebp]
	mov	esi, ecx
	push	eax
	movups	XMMWORD PTR [esi], xmm1
	movsd	QWORD PTR [esi+16], xmm1
	movsd	QWORD PTR [esi+24], xmm0
	movups	XMMWORD PTR [esi+32], xmm1
	movsd	QWORD PTR [esi+48], xmm1
	movsd	QWORD PTR [esi+56], xmm0
	call	??$dualquat_cast@N$01@glm@@YA?AU?$tdualquat@N$01@0@ABU?$tmat3x4@N$01@0@@Z ; glm::dualquat_cast<double,2>
	add	esp, 8
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [esi], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [esi+16], xmm0
	movups	xmm0, XMMWORD PTR [eax+32]
	movups	XMMWORD PTR [esi+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+48]

; 96   : 	}

	mov	eax, esi
	movups	XMMWORD PTR [esi+48], xmm0
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP ; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tdualquat@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC ; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp

; 89   : 		*this = dualquat_cast(m);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx], xmm1
	movsd	QWORD PTR [ecx+16], xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movsd	QWORD PTR [ecx+48], xmm1
	movsd	QWORD PTR [ecx+56], xmm0
	movsd	xmm5, QWORD PTR [eax]
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm4, QWORD PTR [eax+16]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm7, QWORD PTR [eax+32]
	movsd	xmm2, QWORD PTR [eax+40]
	movsd	xmm6, QWORD PTR [eax+48]
	movsd	xmm3, QWORD PTR [eax+56]

; 90   : 	}

	mov	eax, ecx
	unpcklpd xmm5, xmm0
	movups	XMMWORD PTR [ecx], xmm5
	unpcklpd xmm4, xmm1
	unpcklpd xmm7, xmm2
	movups	XMMWORD PTR [ecx+16], xmm4
	unpcklpd xmm6, xmm3
	movups	XMMWORD PTR [ecx+32], xmm7
	movups	XMMWORD PTR [ecx+48], xmm6
	pop	ebp
	ret	4
??0?$tdualquat@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP ; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@0@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_d$ = 12						; size = 4
??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@0@Z PROC	; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT
; _this$ = ecx

; 75   : 	{}

	push	ebp
	mov	ebp, esp

; 74   : 		: real(r), dual(d)

	mov	eax, DWORD PTR _r$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	mov	eax, DWORD PTR _d$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 75   : 	{}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	8
??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@0@Z ENDP	; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@ABU?$tvec3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 8
tv222 = -8						; size = 8
_q$ = 8							; size = 4
_p$ = 12						; size = 4
??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@ABU?$tvec3@N$01@1@@Z PROC ; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 65   : 		: real(q), dual(

	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movsd	xmm4, QWORD PTR __real@3fe0000000000000
	movups	xmm0, XMMWORD PTR [edx]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [edx+16]
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [edx+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm7, QWORD PTR [eax+8]
	movsd	xmm5, QWORD PTR [edx]
	movsd	xmm6, QWORD PTR [edx+24]
	mulsd	xmm2, xmm0
	movsd	QWORD PTR tv222[ebp], xmm0
	movaps	xmm0, xmm5
	mulsd	xmm0, xmm7
	movsd	xmm3, QWORD PTR [edx+16]
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR [eax+16]
	subsd	xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, xmm6
	mulsd	xmm1, QWORD PTR __real@bfe0000000000000
	addsd	xmm2, xmm0
	movaps	xmm0, xmm3
	mulsd	xmm0, QWORD PTR [eax]
	mulsd	xmm3, xmm7
	mulsd	xmm2, xmm4
	mulsd	xmm0, xmm4
	movsd	QWORD PTR $T1[ebp], xmm2
	movaps	xmm2, xmm6
	mulsd	xmm6, QWORD PTR [eax]
	mulsd	xmm2, xmm7
	addsd	xmm3, xmm6
	mulsd	xmm2, xmm4
	subsd	xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, xmm5
	mulsd	xmm5, QWORD PTR [eax]
	mulsd	xmm0, xmm4
	addsd	xmm2, xmm0
	movaps	xmm0, xmm7
	mulsd	xmm0, QWORD PTR [edx+8]
	addsd	xmm5, xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, QWORD PTR tv222[ebp]

; 70   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+40], xmm2
	mulsd	xmm5, xmm4
	subsd	xmm3, xmm0
	movsd	xmm0, QWORD PTR $T1[ebp]
	movsd	QWORD PTR [ecx+48], xmm0
	subsd	xmm1, xmm5
	mulsd	xmm3, xmm4
	movsd	QWORD PTR [ecx+56], xmm1
	movsd	QWORD PTR [ecx+32], xmm3
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@ABU?$tvec3@N$01@1@@Z ENDP ; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@@Z PROC	; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT
; _this$ = ecx

; 61   : 	{}

	push	ebp
	mov	ebp, esp

; 60   : 		: real(r), dual(tquat<T, P>(0, 0, 0, 0))

	mov	eax, DWORD PTR _r$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 61   : 	{}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tdualquat@N$01@glm@@QAE@ABU?$tquat@N$01@1@@Z ENDP	; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tdualquat@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT
; _this$ = ecx

; 56   : 	{}

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1
	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movsd	QWORD PTR [ecx+48], xmm1
	movsd	QWORD PTR [ecx+56], xmm0
	ret	4
??0?$tdualquat@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tdualquat@N$01@glm@@QAE@XZ PROC			; glm::tdualquat<double,2>::tdualquat<double,2>, COMDAT
; _this$ = ecx

; 31   : 				: real(tquat<T, P>())

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1

; 34   : 		{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+16], xmm1
	movsd	QWORD PTR [ecx+24], xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	ret	0
??0?$tdualquat@N$01@glm@@QAE@XZ ENDP			; glm::tdualquat<double,2>::tdualquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$01@glm@@QBEABU?$tquat@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@N$01@glm@@QBEABU?$tquat@N$01@1@H@Z PROC	; glm::tdualquat<double,2>::operator[], COMDAT
; _this$ = ecx

; 20   : 	{

	push	ebp
	mov	ebp, esp

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 23   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@N$01@glm@@QBEABU?$tquat@N$01@1@H@Z ENDP	; glm::tdualquat<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@N$01@glm@@QAEAAU?$tquat@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@N$01@glm@@QAEAAU?$tquat@N$01@1@H@Z PROC	; glm::tdualquat<double,2>::operator[], COMDAT
; _this$ = ecx

; 13   : 	{

	push	ebp
	mov	ebp, esp

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 16   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@N$01@glm@@QAEAAU?$tquat@N$01@1@H@Z ENDP	; glm::tdualquat<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@N$01@glm@@SAHXZ PROC		; glm::tdualquat<double,2>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tdualquat@N$01@glm@@SAHXZ ENDP		; glm::tdualquat<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tdualquat@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC ; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 95   : 		*this = dualquat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	push	DWORD PTR _m$[ebp]
	mov	esi, ecx
	push	eax
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 1065353216		; 3f800000H
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi+24], 0
	mov	DWORD PTR [esi+28], 1065353216		; 3f800000H
	call	??$dualquat_cast@M$01@glm@@YA?AU?$tdualquat@M$01@0@ABU?$tmat3x4@M$01@0@@Z ; glm::dualquat_cast<float,2>
	add	esp, 8
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [esi], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 96   : 	}

	mov	eax, esi
	movups	XMMWORD PTR [esi+16], xmm0
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP ; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 32
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tdualquat@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC ; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H

; 89   : 		*this = dualquat_cast(m);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 1065353216		; 3f800000H
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR $T2[ebp], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 90   : 	}

	mov	eax, ecx
	movups	xmm1, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR $T1[ebp], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tdualquat@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP ; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@0@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_d$ = 12						; size = 4
??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@0@Z PROC	; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT
; _this$ = ecx

; 75   : 	{}

	push	ebp
	mov	ebp, esp

; 74   : 		: real(r), dual(d)

	mov	eax, DWORD PTR _r$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	mov	eax, DWORD PTR _d$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 75   : 	{}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@0@Z ENDP	; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@ABU?$tvec3@M$01@1@@Z
_TEXT	SEGMENT
tv223 = 8						; size = 4
_q$ = 8							; size = 4
$T1 = 12						; size = 4
_p$ = 12						; size = 4
??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@ABU?$tvec3@M$01@1@@Z PROC ; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 65   : 		: real(q), dual(

	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm4, DWORD PTR __real@3f000000
	movups	xmm0, XMMWORD PTR [edx]
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	movss	xmm2, DWORD PTR [eax]
	movss	xmm7, DWORD PTR [eax+4]
	movss	xmm5, DWORD PTR [edx]
	movss	xmm6, DWORD PTR [edx+12]
	mulss	xmm2, xmm0
	movss	DWORD PTR tv223[ebp], xmm0
	movaps	xmm0, xmm5
	movss	xmm3, DWORD PTR [edx+8]
	mulss	xmm0, xmm7
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [eax+8]
	subss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, xmm6
	mulss	xmm1, DWORD PTR __real@bf000000
	addss	xmm2, xmm0
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR [eax]
	mulss	xmm3, xmm7
	mulss	xmm2, xmm4
	mulss	xmm0, xmm4
	movss	DWORD PTR $T1[ebp], xmm2
	movaps	xmm2, xmm6
	mulss	xmm6, DWORD PTR [eax]
	mulss	xmm2, xmm7
	addss	xmm3, xmm6
	mulss	xmm2, xmm4
	subss	xmm2, xmm0
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, xmm5
	mulss	xmm5, DWORD PTR [eax]
	mulss	xmm0, xmm4
	addss	xmm2, xmm0
	movaps	xmm0, xmm7
	mulss	xmm0, DWORD PTR [edx+4]
	addss	xmm5, xmm0
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR tv223[ebp]

; 70   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx+20], xmm2
	subss	xmm3, xmm0
	mulss	xmm5, xmm4
	movss	xmm0, DWORD PTR $T1[ebp]
	movss	DWORD PTR [ecx+24], xmm0
	subss	xmm1, xmm5
	mulss	xmm3, xmm4
	movss	DWORD PTR [ecx+16], xmm3
	movss	DWORD PTR [ecx+28], xmm1
	pop	ebp
	ret	8
??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@ABU?$tvec3@M$01@1@@Z ENDP ; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@@Z PROC	; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT
; _this$ = ecx

; 61   : 	{}

	push	ebp
	mov	ebp, esp

; 60   : 		: real(r), dual(tquat<T, P>(0, 0, 0, 0))

	mov	eax, DWORD PTR _r$[ebp]
	movups	xmm0, XMMWORD PTR [eax]

; 61   : 	{}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	pop	ebp
	ret	4
??0?$tdualquat@M$01@glm@@QAE@ABU?$tquat@M$01@1@@Z ENDP	; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tdualquat@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT
; _this$ = ecx

; 56   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 1065353216		; 3f800000H
	ret	4
??0?$tdualquat@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tdualquat@M$01@glm@@QAE@XZ PROC			; glm::tdualquat<float,2>::tdualquat<float,2>, COMDAT
; _this$ = ecx

; 31   : 				: real(tquat<T, P>())

	mov	DWORD PTR [ecx], 0

; 34   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	ret	0
??0?$tdualquat@M$01@glm@@QAE@XZ ENDP			; glm::tdualquat<float,2>::tdualquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$01@glm@@QBEABU?$tquat@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@M$01@glm@@QBEABU?$tquat@M$01@1@H@Z PROC	; glm::tdualquat<float,2>::operator[], COMDAT
; _this$ = ecx

; 20   : 	{

	push	ebp
	mov	ebp, esp

; 21   : 		assert(i >= 0 && i < this->length());
; 22   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 23   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@M$01@glm@@QBEABU?$tquat@M$01@1@H@Z ENDP	; glm::tdualquat<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??A?$tdualquat@M$01@glm@@QAEAAU?$tquat@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tdualquat@M$01@glm@@QAEAAU?$tquat@M$01@1@H@Z PROC	; glm::tdualquat<float,2>::operator[], COMDAT
; _this$ = ecx

; 13   : 	{

	push	ebp
	mov	ebp, esp

; 14   : 		assert(i >= 0 && i < this->length());
; 15   : 		return (&real)[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 16   : 	}

	pop	ebp
	ret	4
??A?$tdualquat@M$01@glm@@QAEAAU?$tquat@M$01@1@H@Z ENDP	; glm::tdualquat<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@M$01@glm@@SAHXZ PROC		; glm::tdualquat<float,2>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tdualquat@M$01@glm@@SAHXZ ENDP		; glm::tdualquat<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -108						; size = 32
$T2 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_m$ = 8							; size = 4
??0?$tquat@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC	; glm::tquat<double,0>::tquat<double,0>, COMDAT
; _this$ = ecx

; 183  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 184  : 		*this = quat_cast(m);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	mov	esi, ecx
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+40]
	movups	XMMWORD PTR $T2[ebp], xmm2
	movsd	xmm2, QWORD PTR [eax+32]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+72]
	movq	QWORD PTR $T2[ebp+16], xmm1
	movsd	xmm1, QWORD PTR [eax+48]
	movups	XMMWORD PTR $T2[ebp+24], xmm2
	movsd	xmm2, QWORD PTR [eax+64]
	movq	QWORD PTR $T2[ebp+40], xmm1
	movsd	xmm1, QWORD PTR [eax+80]
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	unpcklpd xmm2, xmm0
	push	eax
	movups	XMMWORD PTR $T2[ebp+48], xmm2
	movq	QWORD PTR $T2[ebp+64], xmm1
	call	??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat3x3@N$0A@@0@@Z ; glm::quat_cast<double,0>
	movups	xmm0, XMMWORD PTR $T1[ebp]

; 185  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	mov	eax, esi
	xor	ecx, ebp
	movups	XMMWORD PTR [esi], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp+16]
	movups	XMMWORD PTR [esi+16], xmm0
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP	; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tquat@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC	; glm::tquat<double,0>::tquat<double,0>, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 178  : 		*this = quat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	push	DWORD PTR _m$[ebp]
	mov	esi, ecx
	push	eax
	call	??$quat_cast@N$0A@@glm@@YA?AU?$tquat@N$0A@@0@ABU?$tmat3x3@N$0A@@0@@Z ; glm::quat_cast<double,0>
	add	esp, 8
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [esi], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 179  : 	}

	mov	eax, esi
	movups	XMMWORD PTR [esi+16], xmm0
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP	; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@@Z
_TEXT	SEGMENT
_c$ = -64						; size = 24
_s$ = -40						; size = 24
$T1 = -16						; size = 8
$T2 = -16						; size = 8
tv138 = -16						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
tv160 = -8						; size = 8
_eulerAngle$ = 8					; size = 4
??0?$tquat@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@@Z PROC	; glm::tquat<double,0>::tquat<double,0>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	movsd	xmm2, QWORD PTR __real@3fe0000000000000
	push	esi
	mov	esi, DWORD PTR _eulerAngle$[ebp]
	push	edi
	sub	esp, 8
	mov	edi, ecx
	movsd	xmm1, QWORD PTR [esi+8]
	movsd	xmm0, QWORD PTR [esi]
	mulsd	xmm1, xmm2
	mulsd	xmm0, xmm2
	movsd	QWORD PTR $T4[ebp], xmm1
	movsd	xmm1, QWORD PTR [esi+16]
	mulsd	xmm1, xmm2
	movsd	QWORD PTR [esp], xmm0
	movsd	QWORD PTR $T2[ebp], xmm1
	call	_cos
	movsd	xmm0, QWORD PTR $T4[ebp]
	fstp	QWORD PTR _c$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	movsd	xmm0, QWORD PTR $T2[ebp]
	fstp	QWORD PTR _c$[ebp+8]
	movsd	QWORD PTR [esp], xmm0
	call	_cos

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movsd	xmm2, QWORD PTR __real@3fe0000000000000
	movsd	xmm1, QWORD PTR [esi+8]
	movsd	xmm0, QWORD PTR [esi]
	mulsd	xmm1, xmm2
	mulsd	xmm0, xmm2
	fstp	QWORD PTR _c$[ebp+16]
	movsd	QWORD PTR $T1[ebp], xmm1
	movsd	xmm1, QWORD PTR [esi+16]
	mulsd	xmm1, xmm2
	movsd	QWORD PTR [esp], xmm0
	movsd	QWORD PTR $T3[ebp], xmm1
	call	_sin
	movsd	xmm0, QWORD PTR $T1[ebp]
	fstp	QWORD PTR _s$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	movsd	xmm0, QWORD PTR $T3[ebp]
	fstp	QWORD PTR _s$[ebp+8]
	movsd	QWORD PTR [esp], xmm0
	call	_sin

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;

	movsd	xmm7, QWORD PTR _s$[ebp+8]
	add	esp, 8
	movsd	xmm6, QWORD PTR _s$[ebp]
	movaps	xmm1, xmm7
	movsd	xmm0, QWORD PTR _c$[ebp+8]

; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	mov	eax, edi
	mulsd	xmm0, QWORD PTR _c$[ebp]
	movsd	xmm4, QWORD PTR _c$[ebp+16]
	mulsd	xmm7, QWORD PTR _c$[ebp]
	mulsd	xmm1, xmm6
	mulsd	xmm6, QWORD PTR _c$[ebp+8]
	movsd	QWORD PTR tv138[ebp], xmm0
	movsd	QWORD PTR tv160[ebp], xmm1
	mulsd	xmm0, xmm4
	fstp	QWORD PTR _s$[ebp+16]
	movsd	xmm5, QWORD PTR _s$[ebp+16]
	mulsd	xmm1, xmm5
	addsd	xmm1, xmm0
	movaps	xmm0, xmm7
	mulsd	xmm0, xmm5
	mulsd	xmm7, xmm4
	movsd	QWORD PTR [edi+24], xmm1
	movaps	xmm1, xmm6
	mulsd	xmm1, xmm4
	mulsd	xmm6, xmm5
	subsd	xmm1, xmm0
	movsd	xmm0, QWORD PTR tv138[ebp]
	mulsd	xmm0, xmm5
	addsd	xmm6, xmm7
	movsd	QWORD PTR [edi], xmm1
	movsd	xmm1, QWORD PTR tv160[ebp]
	mulsd	xmm1, xmm4
	movsd	QWORD PTR [edi+8], xmm6
	subsd	xmm0, xmm1
	movsd	QWORD PTR [edi+16], xmm0
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@@Z ENDP	; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@0@Z
_TEXT	SEGMENT
$T1 = -56						; size = 32
_LocalW$1$ = -24					; size = 8
_LocalW$3$ = -16					; size = 8
_LocalW$2$ = -8						; size = 8
_u$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@0@Z PROC	; glm::tquat<double,0>::tquat<double,0>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	movsd	xmm4, QWORD PTR [eax+16]
	movsd	xmm6, QWORD PTR [eax+8]
	movaps	xmm7, xmm4
	movsd	xmm3, QWORD PTR [edx+8]
	movaps	xmm0, xmm6
	movsd	xmm5, QWORD PTR [edx+16]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [edx]
	mulsd	xmm0, xmm5
	mulsd	xmm7, xmm3
	subsd	xmm7, xmm0
	movaps	xmm0, xmm1
	mulsd	xmm0, xmm5

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);

	mulsd	xmm5, xmm4
	movsd	QWORD PTR _LocalW$1$[ebp], xmm7
	movsd	QWORD PTR _LocalW$2$[ebp], xmm0
	movaps	xmm0, xmm2
	movsd	xmm7, QWORD PTR _LocalW$2$[ebp]
	mulsd	xmm0, xmm4

; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);

	movsd	xmm4, QWORD PTR __real@3ff0000000000000
	subsd	xmm7, xmm0
	movaps	xmm0, xmm1
	mulsd	xmm0, xmm3
	movsd	QWORD PTR _LocalW$2$[ebp], xmm7
	movaps	xmm7, xmm2
	mulsd	xmm2, xmm1
	mulsd	xmm7, xmm6
	mulsd	xmm6, xmm3
	subsd	xmm7, xmm0
	addsd	xmm6, xmm2
	movsd	QWORD PTR _LocalW$3$[ebp], xmm7

; 159  : 
; 160  : 		*this = normalize(q);

	movsd	xmm1, QWORD PTR _LocalW$3$[ebp]
	movsd	xmm7, QWORD PTR _LocalW$1$[ebp]
	addsd	xmm6, xmm5
	movsd	xmm5, QWORD PTR _LocalW$2$[ebp]
	movaps	xmm0, xmm1
	mulsd	xmm0, xmm1
	movaps	xmm3, xmm7
	movaps	xmm2, xmm5
	mulsd	xmm3, xmm7
	addsd	xmm6, xmm4
	mulsd	xmm2, xmm5
	movaps	xmm1, xmm6
	addsd	xmm2, xmm3
	mulsd	xmm1, xmm6
	addsd	xmm1, xmm0
	xorps	xmm0, xmm0
	addsd	xmm1, xmm2
	sqrtsd	xmm1, xmm1
	comisd	xmm0, xmm1
	jb	SHORT $LN18@tquat

; 161  : 	}

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	mov	esp, ebp
	pop	ebp
	ret	8

; 159  : 
; 160  : 		*this = normalize(q);

$LN18@tquat:
	divsd	xmm4, xmm1

; 161  : 	}

	mov	eax, ecx
	movaps	xmm0, xmm4
	mulsd	xmm6, xmm4
	mulsd	xmm0, xmm7
	movsd	QWORD PTR $T1[ebp+24], xmm6
	movsd	QWORD PTR $T1[ebp], xmm0
	movaps	xmm0, xmm4
	mulsd	xmm0, xmm5
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movaps	xmm0, xmm4
	mulsd	xmm0, QWORD PTR _LocalW$3$[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	xmm1, XMMWORD PTR $T1[ebp+16]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tquat@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@0@Z ENDP	; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$0A@@glm@@QAE?AU?$tmat4x4@N$0A@@1@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@N$0A@@glm@@QAE?AU?$tmat4x4@N$0A@@1@XZ PROC	; glm::tquat<double,0>::operator glm::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 197  : 		return mat4_cast(*this);

	lea	eax, DWORD PTR $T1[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@ABU?$tquat@N$0A@@0@@Z ; glm::mat3_cast<double,0>

; 198  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [esi], xmm3
	add	esp, 8
	xor	ecx, ebp
	movups	XMMWORD PTR [esi+16], xmm3
	movups	XMMWORD PTR [esi+32], xmm3
	movups	XMMWORD PTR [esi+48], xmm3
	movups	XMMWORD PTR [esi+64], xmm3
	movups	XMMWORD PTR [esi+80], xmm3
	movups	XMMWORD PTR [esi+96], xmm3
	movups	XMMWORD PTR [esi+112], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [esi], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+16], xmm2
	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [esi+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+48], xmm2
	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm2, QWORD PTR [eax+64]
	mov	eax, esi
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [esi+64], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+96], xmm0
	movups	XMMWORD PTR [esi+80], xmm2
	movups	XMMWORD PTR [esi+112], xmm1
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??B?$tquat@N$0A@@glm@@QAE?AU?$tmat4x4@N$0A@@1@XZ ENDP	; glm::tquat<double,0>::operator glm::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$0A@@glm@@QAE?AU?$tmat3x3@N$0A@@1@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@N$0A@@glm@@QAE?AU?$tmat3x3@N$0A@@1@XZ PROC	; glm::tquat<double,0>::operator glm::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 190  : 	{

	push	ebp
	mov	ebp, esp

; 191  : 		return mat3_cast(*this);

	push	ecx
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	??$mat3_cast@N$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@ABU?$tquat@N$0A@@0@@Z ; glm::mat3_cast<double,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8

; 192  : 	}

	pop	ebp
	ret	4
??B?$tquat@N$0A@@glm@@QAE?AU?$tmat3x3@N$0A@@1@XZ ENDP	; glm::tquat<double,0>::operator glm::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QAE@ABN000@Z
_TEXT	SEGMENT
_w$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
??0?$tquat@N$0A@@glm@@QAE@ABN000@Z PROC			; glm::tquat<double,0>::tquat<double,0>, COMDAT
; _this$ = ecx

; 122  : 	{}

	push	ebp
	mov	ebp, esp

; 121  : 		: x(x), y(y), z(z), w(w)

	mov	eax, DWORD PTR _x$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 122  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tquat@N$0A@@glm@@QAE@ABN000@Z ENDP			; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QAE@ABNABU?$tvec3@N$0A@@1@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@N$0A@@glm@@QAE@ABNABU?$tvec3@N$0A@@1@@Z PROC	; glm::tquat<double,0>::tquat<double,0>, COMDAT
; _this$ = ecx

; 117  : 	{}

	push	ebp
	mov	ebp, esp

; 116  : 		: x(v.x), y(v.y), z(v.z), w(s)

	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mov	eax, DWORD PTR _s$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 117  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	8
??0?$tquat@N$0A@@glm@@QAE@ABNABU?$tvec3@N$0A@@1@@Z ENDP	; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tquat@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tquat<double,0>::tquat<double,0>, COMDAT
; _this$ = ecx

; 112  : 	{}

	mov	eax, ecx
	ret	4
??0?$tquat@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tquat@N$0A@@glm@@QAE@XZ PROC			; glm::tquat<double,0>::tquat<double,0>, COMDAT
; _this$ = ecx

; 92   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx+24], xmm0
	ret	0
??0?$tquat@N$0A@@glm@@QAE@XZ ENDP			; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$0A@@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@N$0A@@glm@@QBEABNH@Z PROC			; glm::tquat<double,0>::operator[], COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 82   : 	}

	pop	ebp
	ret	4
??A?$tquat@N$0A@@glm@@QBEABNH@Z ENDP			; glm::tquat<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$0A@@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@N$0A@@glm@@QAEAANH@Z PROC			; glm::tquat<double,0>::operator[], COMDAT
; _this$ = ecx

; 72   : 	{

	push	ebp
	mov	ebp, esp

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 75   : 	}

	pop	ebp
	ret	4
??A?$tquat@N$0A@@glm@@QAEAANH@Z ENDP			; glm::tquat<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@N$0A@@glm@@SAHXZ PROC			; glm::tquat<double,0>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tquat@N$0A@@glm@@SAHXZ ENDP			; glm::tquat<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -56						; size = 16
$T2 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_m$ = 8							; size = 4
??0?$tquat@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC	; glm::tquat<float,0>::tquat<float,0>, COMDAT
; _this$ = ecx

; 183  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	mov	esi, ecx

; 184  : 		*this = quat_cast(m);

	lea	ecx, DWORD PTR $T2[ebp]
	push	eax
	call	??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat3x3@M$0A@@0@@Z ; glm::quat_cast<float,0>
	movups	xmm0, XMMWORD PTR $T1[ebp]

; 185  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	mov	eax, esi
	xor	ecx, ebp
	movups	XMMWORD PTR [esi], xmm0
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP	; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tquat@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC	; glm::tquat<float,0>::tquat<float,0>, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 178  : 		*this = quat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	push	DWORD PTR _m$[ebp]
	mov	esi, ecx
	push	eax
	call	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@ABU?$tmat3x3@M$0A@@0@@Z ; glm::quat_cast<float,0>
	add	esp, 8
	movups	xmm0, XMMWORD PTR [eax]

; 179  : 	}

	mov	eax, esi
	movups	XMMWORD PTR [esi], xmm0
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP	; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
_c$2$ = -20						; size = 4
tv259 = -16						; size = 4
_s$1$ = -12						; size = 4
$T1 = -12						; size = 4
_c$3$ = -8						; size = 4
_c$1$ = -4						; size = 4
_s$2$ = 8						; size = 4
$T2 = 8							; size = 4
_eulerAngle$ = 8					; size = 4
??0?$tquat@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@@Z PROC	; glm::tquat<float,0>::tquat<float,0>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	mov	esi, DWORD PTR _eulerAngle$[ebp]
	push	edi
	mov	edi, ecx
	movss	xmm2, DWORD PTR [esi]
	mulss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR [esi+4]
	mulss	xmm1, DWORD PTR __real@3f000000
	movaps	xmm0, xmm2
	movss	DWORD PTR $T1[ebp], xmm2
	movss	DWORD PTR $T2[ebp], xmm1
	call	___libm_sse2_cosf
	movss	DWORD PTR _c$1$[ebp], xmm0
	movss	xmm0, DWORD PTR $T2[ebp]
	call	___libm_sse2_cosf
	movss	DWORD PTR _c$2$[ebp], xmm0
	movss	xmm0, DWORD PTR [esi+8]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv259[ebp], xmm0
	call	___libm_sse2_cosf
	movss	DWORD PTR _c$3$[ebp], xmm0

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movss	xmm0, DWORD PTR $T1[ebp]
	call	___libm_sse2_sinf
	movss	DWORD PTR _s$1$[ebp], xmm0
	movss	xmm0, DWORD PTR $T2[ebp]
	call	___libm_sse2_sinf
	movss	DWORD PTR _s$2$[ebp], xmm0
	movss	xmm0, DWORD PTR tv259[ebp]
	call	___libm_sse2_sinf

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;

	movss	xmm4, DWORD PTR _s$2$[ebp]
	movaps	xmm3, xmm0
	movss	xmm7, DWORD PTR _s$1$[ebp]
	movaps	xmm5, xmm4
	movss	xmm2, DWORD PTR _c$2$[ebp]

; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	mov	eax, edi
	mulss	xmm2, DWORD PTR _c$1$[ebp]
	mulss	xmm4, DWORD PTR _c$1$[ebp]
	movss	xmm6, DWORD PTR _c$3$[ebp]
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR _c$3$[ebp]
	mulss	xmm5, xmm7
	mulss	xmm7, DWORD PTR _c$2$[ebp]
	movaps	xmm1, xmm5
	mulss	xmm2, xmm3
	mulss	xmm1, xmm3
	mulss	xmm5, xmm6
	addss	xmm1, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, xmm3
	mulss	xmm4, xmm6
	subss	xmm2, xmm5
	movss	DWORD PTR [edi+12], xmm1
	movaps	xmm1, xmm7
	mulss	xmm1, xmm6
	mulss	xmm7, xmm3
	subss	xmm1, xmm0
	movss	DWORD PTR [edi+8], xmm2
	addss	xmm7, xmm4
	movss	DWORD PTR [edi], xmm1
	movss	DWORD PTR [edi+4], xmm7
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@@Z ENDP	; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@0@Z
_TEXT	SEGMENT
$T1 = -20						; size = 16
_LocalW$1$ = -4						; size = 4
_LocalW$2$ = 8						; size = 4
_u$ = 8							; size = 4
_LocalW$3$ = 12						; size = 4
_v$ = 12						; size = 4
??0?$tquat@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@0@Z PROC	; glm::tquat<float,0>::tquat<float,0>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	movss	xmm4, DWORD PTR [eax+8]
	movss	xmm6, DWORD PTR [eax+4]
	movaps	xmm7, xmm4
	movss	xmm3, DWORD PTR [edx+4]
	movaps	xmm0, xmm6
	movss	xmm5, DWORD PTR [edx+8]
	movss	xmm1, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [edx]
	mulss	xmm0, xmm5
	mulss	xmm7, xmm3
	subss	xmm7, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, xmm5

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);

	mulss	xmm5, xmm4
	movss	DWORD PTR _LocalW$2$[ebp], xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm4
	movss	DWORD PTR _LocalW$1$[ebp], xmm7
	movss	xmm7, DWORD PTR _LocalW$2$[ebp]
	subss	xmm7, xmm0

; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);

	movss	xmm4, DWORD PTR __real@3f800000
	movaps	xmm0, xmm1
	mulss	xmm0, xmm3
	movss	DWORD PTR _LocalW$2$[ebp], xmm7
	movaps	xmm7, xmm2
	mulss	xmm2, xmm1
	mulss	xmm7, xmm6
	mulss	xmm6, xmm3
	subss	xmm7, xmm0
	addss	xmm6, xmm2
	movss	DWORD PTR _LocalW$3$[ebp], xmm7

; 159  : 
; 160  : 		*this = normalize(q);

	movss	xmm1, DWORD PTR _LocalW$3$[ebp]
	movss	xmm7, DWORD PTR _LocalW$1$[ebp]
	addss	xmm6, xmm5
	movss	xmm5, DWORD PTR _LocalW$2$[ebp]
	movaps	xmm0, xmm1
	mulss	xmm0, xmm1
	movaps	xmm3, xmm7
	movaps	xmm2, xmm5
	mulss	xmm3, xmm7
	addss	xmm6, xmm4
	mulss	xmm2, xmm5
	addss	xmm2, xmm3
	movaps	xmm1, xmm6
	mulss	xmm1, xmm6
	addss	xmm1, xmm0
	xorps	xmm0, xmm0
	addss	xmm1, xmm2
	sqrtss	xmm1, xmm1
	comiss	xmm0, xmm1
	jb	SHORT $LN18@tquat

; 161  : 	}

	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8

; 159  : 
; 160  : 		*this = normalize(q);

$LN18@tquat:
	divss	xmm4, xmm1

; 161  : 	}

	mov	eax, ecx
	movaps	xmm0, xmm4
	mulss	xmm6, xmm4
	mulss	xmm0, xmm7
	movss	DWORD PTR $T1[ebp+12], xmm6
	movss	DWORD PTR $T1[ebp], xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, xmm5
	movss	DWORD PTR $T1[ebp+4], xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR _LocalW$3$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tquat@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@0@Z ENDP	; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$0A@@glm@@QAE?AU?$tmat4x4@M$0A@@1@XZ
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@M$0A@@glm@@QAE?AU?$tmat4x4@M$0A@@1@XZ PROC	; glm::tquat<float,0>::operator glm::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 197  : 		return mat4_cast(*this);

	lea	eax, DWORD PTR $T1[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@ABU?$tquat@M$0A@@0@@Z ; glm::mat3_cast<float,0>
	add	esp, 8
	mov	ecx, esi
	push	eax
	call	??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 198  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??B?$tquat@M$0A@@glm@@QAE?AU?$tmat4x4@M$0A@@1@XZ ENDP	; glm::tquat<float,0>::operator glm::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$0A@@glm@@QAE?AU?$tmat3x3@M$0A@@1@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@M$0A@@glm@@QAE?AU?$tmat3x3@M$0A@@1@XZ PROC	; glm::tquat<float,0>::operator glm::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 190  : 	{

	push	ebp
	mov	ebp, esp

; 191  : 		return mat3_cast(*this);

	push	ecx
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	??$mat3_cast@M$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@ABU?$tquat@M$0A@@0@@Z ; glm::mat3_cast<float,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8

; 192  : 	}

	pop	ebp
	ret	4
??B?$tquat@M$0A@@glm@@QAE?AU?$tmat3x3@M$0A@@1@XZ ENDP	; glm::tquat<float,0>::operator glm::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QAE@ABM000@Z
_TEXT	SEGMENT
_w$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
??0?$tquat@M$0A@@glm@@QAE@ABM000@Z PROC			; glm::tquat<float,0>::tquat<float,0>, COMDAT
; _this$ = ecx

; 122  : 	{}

	push	ebp
	mov	ebp, esp

; 121  : 		: x(x), y(y), z(z), w(w)

	mov	eax, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax

; 122  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tquat@M$0A@@glm@@QAE@ABM000@Z ENDP			; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QAE@ABMABU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@M$0A@@glm@@QAE@ABMABU?$tvec3@M$0A@@1@@Z PROC	; glm::tquat<float,0>::tquat<float,0>, COMDAT
; _this$ = ecx

; 117  : 	{}

	push	ebp
	mov	ebp, esp

; 116  : 		: x(v.x), y(v.y), z(v.z), w(s)

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax

; 117  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tquat@M$0A@@glm@@QAE@ABMABU?$tvec3@M$0A@@1@@Z ENDP	; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tquat@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tquat<float,0>::tquat<float,0>, COMDAT
; _this$ = ecx

; 112  : 	{}

	mov	eax, ecx
	ret	4
??0?$tquat@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tquat@M$0A@@glm@@QAE@XZ PROC			; glm::tquat<float,0>::tquat<float,0>, COMDAT
; _this$ = ecx

; 90   : 				: x(0), y(0), z(0), w(1)

	mov	DWORD PTR [ecx], 0

; 92   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	ret	0
??0?$tquat@M$0A@@glm@@QAE@XZ ENDP			; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$0A@@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@M$0A@@glm@@QBEABMH@Z PROC			; glm::tquat<float,0>::operator[], COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 82   : 	}

	pop	ebp
	ret	4
??A?$tquat@M$0A@@glm@@QBEABMH@Z ENDP			; glm::tquat<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$0A@@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@M$0A@@glm@@QAEAAMH@Z PROC			; glm::tquat<float,0>::operator[], COMDAT
; _this$ = ecx

; 72   : 	{

	push	ebp
	mov	ebp, esp

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 75   : 	}

	pop	ebp
	ret	4
??A?$tquat@M$0A@@glm@@QAEAAMH@Z ENDP			; glm::tquat<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@M$0A@@glm@@SAHXZ PROC			; glm::tquat<float,0>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tquat@M$0A@@glm@@SAHXZ ENDP			; glm::tquat<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -108						; size = 32
$T2 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_m$ = 8							; size = 4
??0?$tquat@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tquat<double,1>::tquat<double,1>, COMDAT
; _this$ = ecx

; 183  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 184  : 		*this = quat_cast(m);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	mov	esi, ecx
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+40]
	movups	XMMWORD PTR $T2[ebp], xmm2
	movsd	xmm2, QWORD PTR [eax+32]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+72]
	movq	QWORD PTR $T2[ebp+16], xmm1
	movsd	xmm1, QWORD PTR [eax+48]
	movups	XMMWORD PTR $T2[ebp+24], xmm2
	movsd	xmm2, QWORD PTR [eax+64]
	movq	QWORD PTR $T2[ebp+40], xmm1
	movsd	xmm1, QWORD PTR [eax+80]
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	unpcklpd xmm2, xmm0
	push	eax
	movups	XMMWORD PTR $T2[ebp+48], xmm2
	movq	QWORD PTR $T2[ebp+64], xmm1
	call	??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat3x3@N$00@0@@Z ; glm::quat_cast<double,1>
	movups	xmm0, XMMWORD PTR $T1[ebp]

; 185  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	mov	eax, esi
	xor	ecx, ebp
	movups	XMMWORD PTR [esi], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp+16]
	movups	XMMWORD PTR [esi+16], xmm0
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tquat@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tquat<double,1>::tquat<double,1>, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 178  : 		*this = quat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	push	DWORD PTR _m$[ebp]
	mov	esi, ecx
	push	eax
	call	??$quat_cast@N$00@glm@@YA?AU?$tquat@N$00@0@ABU?$tmat3x3@N$00@0@@Z ; glm::quat_cast<double,1>
	add	esp, 8
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [esi], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 179  : 	}

	mov	eax, esi
	movups	XMMWORD PTR [esi+16], xmm0
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QAE@ABU?$tvec3@N$00@1@@Z
_TEXT	SEGMENT
_c$ = -64						; size = 24
_s$ = -40						; size = 24
$T1 = -16						; size = 8
$T2 = -16						; size = 8
tv138 = -16						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
tv160 = -8						; size = 8
_eulerAngle$ = 8					; size = 4
??0?$tquat@N$00@glm@@QAE@ABU?$tvec3@N$00@1@@Z PROC	; glm::tquat<double,1>::tquat<double,1>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	movsd	xmm2, QWORD PTR __real@3fe0000000000000
	push	esi
	mov	esi, DWORD PTR _eulerAngle$[ebp]
	push	edi
	sub	esp, 8
	mov	edi, ecx
	movsd	xmm1, QWORD PTR [esi+8]
	movsd	xmm0, QWORD PTR [esi]
	mulsd	xmm1, xmm2
	mulsd	xmm0, xmm2
	movsd	QWORD PTR $T4[ebp], xmm1
	movsd	xmm1, QWORD PTR [esi+16]
	mulsd	xmm1, xmm2
	movsd	QWORD PTR [esp], xmm0
	movsd	QWORD PTR $T2[ebp], xmm1
	call	_cos
	movsd	xmm0, QWORD PTR $T4[ebp]
	fstp	QWORD PTR _c$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	movsd	xmm0, QWORD PTR $T2[ebp]
	fstp	QWORD PTR _c$[ebp+8]
	movsd	QWORD PTR [esp], xmm0
	call	_cos

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movsd	xmm2, QWORD PTR __real@3fe0000000000000
	movsd	xmm1, QWORD PTR [esi+8]
	movsd	xmm0, QWORD PTR [esi]
	mulsd	xmm1, xmm2
	mulsd	xmm0, xmm2
	fstp	QWORD PTR _c$[ebp+16]
	movsd	QWORD PTR $T1[ebp], xmm1
	movsd	xmm1, QWORD PTR [esi+16]
	mulsd	xmm1, xmm2
	movsd	QWORD PTR [esp], xmm0
	movsd	QWORD PTR $T3[ebp], xmm1
	call	_sin
	movsd	xmm0, QWORD PTR $T1[ebp]
	fstp	QWORD PTR _s$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	movsd	xmm0, QWORD PTR $T3[ebp]
	fstp	QWORD PTR _s$[ebp+8]
	movsd	QWORD PTR [esp], xmm0
	call	_sin

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;

	movsd	xmm7, QWORD PTR _s$[ebp+8]
	add	esp, 8
	movsd	xmm6, QWORD PTR _s$[ebp]
	movaps	xmm1, xmm7
	movsd	xmm0, QWORD PTR _c$[ebp+8]

; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	mov	eax, edi
	mulsd	xmm0, QWORD PTR _c$[ebp]
	movsd	xmm4, QWORD PTR _c$[ebp+16]
	mulsd	xmm7, QWORD PTR _c$[ebp]
	mulsd	xmm1, xmm6
	mulsd	xmm6, QWORD PTR _c$[ebp+8]
	movsd	QWORD PTR tv138[ebp], xmm0
	movsd	QWORD PTR tv160[ebp], xmm1
	mulsd	xmm0, xmm4
	fstp	QWORD PTR _s$[ebp+16]
	movsd	xmm5, QWORD PTR _s$[ebp+16]
	mulsd	xmm1, xmm5
	addsd	xmm1, xmm0
	movaps	xmm0, xmm7
	mulsd	xmm0, xmm5
	mulsd	xmm7, xmm4
	movsd	QWORD PTR [edi+24], xmm1
	movaps	xmm1, xmm6
	mulsd	xmm1, xmm4
	mulsd	xmm6, xmm5
	subsd	xmm1, xmm0
	movsd	xmm0, QWORD PTR tv138[ebp]
	mulsd	xmm0, xmm5
	addsd	xmm6, xmm7
	movsd	QWORD PTR [edi], xmm1
	movsd	xmm1, QWORD PTR tv160[ebp]
	mulsd	xmm1, xmm4
	movsd	QWORD PTR [edi+8], xmm6
	subsd	xmm0, xmm1
	movsd	QWORD PTR [edi+16], xmm0
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$00@glm@@QAE@ABU?$tvec3@N$00@1@@Z ENDP	; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QAE@ABU?$tvec3@N$00@1@0@Z
_TEXT	SEGMENT
$T1 = -56						; size = 32
_LocalW$1$ = -24					; size = 8
_LocalW$3$ = -16					; size = 8
_LocalW$2$ = -8						; size = 8
_u$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@N$00@glm@@QAE@ABU?$tvec3@N$00@1@0@Z PROC	; glm::tquat<double,1>::tquat<double,1>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	movsd	xmm4, QWORD PTR [eax+16]
	movsd	xmm6, QWORD PTR [eax+8]
	movaps	xmm7, xmm4
	movsd	xmm3, QWORD PTR [edx+8]
	movaps	xmm0, xmm6
	movsd	xmm5, QWORD PTR [edx+16]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [edx]
	mulsd	xmm0, xmm5
	mulsd	xmm7, xmm3
	subsd	xmm7, xmm0
	movaps	xmm0, xmm1
	mulsd	xmm0, xmm5

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);

	mulsd	xmm5, xmm4
	movsd	QWORD PTR _LocalW$1$[ebp], xmm7
	movsd	QWORD PTR _LocalW$2$[ebp], xmm0
	movaps	xmm0, xmm2
	movsd	xmm7, QWORD PTR _LocalW$2$[ebp]
	mulsd	xmm0, xmm4

; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);

	movsd	xmm4, QWORD PTR __real@3ff0000000000000
	subsd	xmm7, xmm0
	movaps	xmm0, xmm1
	mulsd	xmm0, xmm3
	movsd	QWORD PTR _LocalW$2$[ebp], xmm7
	movaps	xmm7, xmm2
	mulsd	xmm2, xmm1
	mulsd	xmm7, xmm6
	mulsd	xmm6, xmm3
	subsd	xmm7, xmm0
	addsd	xmm6, xmm2
	movsd	QWORD PTR _LocalW$3$[ebp], xmm7

; 159  : 
; 160  : 		*this = normalize(q);

	movsd	xmm1, QWORD PTR _LocalW$3$[ebp]
	movsd	xmm7, QWORD PTR _LocalW$1$[ebp]
	addsd	xmm6, xmm5
	movsd	xmm5, QWORD PTR _LocalW$2$[ebp]
	movaps	xmm0, xmm1
	mulsd	xmm0, xmm1
	movaps	xmm3, xmm7
	movaps	xmm2, xmm5
	mulsd	xmm3, xmm7
	addsd	xmm6, xmm4
	mulsd	xmm2, xmm5
	movaps	xmm1, xmm6
	addsd	xmm2, xmm3
	mulsd	xmm1, xmm6
	addsd	xmm1, xmm0
	xorps	xmm0, xmm0
	addsd	xmm1, xmm2
	sqrtsd	xmm1, xmm1
	comisd	xmm0, xmm1
	jb	SHORT $LN18@tquat

; 161  : 	}

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	mov	esp, ebp
	pop	ebp
	ret	8

; 159  : 
; 160  : 		*this = normalize(q);

$LN18@tquat:
	divsd	xmm4, xmm1

; 161  : 	}

	mov	eax, ecx
	movaps	xmm0, xmm4
	mulsd	xmm6, xmm4
	mulsd	xmm0, xmm7
	movsd	QWORD PTR $T1[ebp+24], xmm6
	movsd	QWORD PTR $T1[ebp], xmm0
	movaps	xmm0, xmm4
	mulsd	xmm0, xmm5
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movaps	xmm0, xmm4
	mulsd	xmm0, QWORD PTR _LocalW$3$[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	xmm1, XMMWORD PTR $T1[ebp+16]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tquat@N$00@glm@@QAE@ABU?$tvec3@N$00@1@0@Z ENDP	; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$00@glm@@QAE?AU?$tmat4x4@N$00@1@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@N$00@glm@@QAE?AU?$tmat4x4@N$00@1@XZ PROC	; glm::tquat<double,1>::operator glm::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 197  : 		return mat4_cast(*this);

	lea	eax, DWORD PTR $T1[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@ABU?$tquat@N$00@0@@Z ; glm::mat3_cast<double,1>

; 198  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [esi], xmm3
	add	esp, 8
	xor	ecx, ebp
	movups	XMMWORD PTR [esi+16], xmm3
	movups	XMMWORD PTR [esi+32], xmm3
	movups	XMMWORD PTR [esi+48], xmm3
	movups	XMMWORD PTR [esi+64], xmm3
	movups	XMMWORD PTR [esi+80], xmm3
	movups	XMMWORD PTR [esi+96], xmm3
	movups	XMMWORD PTR [esi+112], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [esi], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+16], xmm2
	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [esi+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+48], xmm2
	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm2, QWORD PTR [eax+64]
	mov	eax, esi
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [esi+64], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+96], xmm0
	movups	XMMWORD PTR [esi+80], xmm2
	movups	XMMWORD PTR [esi+112], xmm1
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??B?$tquat@N$00@glm@@QAE?AU?$tmat4x4@N$00@1@XZ ENDP	; glm::tquat<double,1>::operator glm::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$00@glm@@QAE?AU?$tmat3x3@N$00@1@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@N$00@glm@@QAE?AU?$tmat3x3@N$00@1@XZ PROC	; glm::tquat<double,1>::operator glm::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 190  : 	{

	push	ebp
	mov	ebp, esp

; 191  : 		return mat3_cast(*this);

	push	ecx
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	??$mat3_cast@N$00@glm@@YA?AU?$tmat3x3@N$00@0@ABU?$tquat@N$00@0@@Z ; glm::mat3_cast<double,1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8

; 192  : 	}

	pop	ebp
	ret	4
??B?$tquat@N$00@glm@@QAE?AU?$tmat3x3@N$00@1@XZ ENDP	; glm::tquat<double,1>::operator glm::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QAE@ABN000@Z
_TEXT	SEGMENT
_w$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
??0?$tquat@N$00@glm@@QAE@ABN000@Z PROC			; glm::tquat<double,1>::tquat<double,1>, COMDAT
; _this$ = ecx

; 122  : 	{}

	push	ebp
	mov	ebp, esp

; 121  : 		: x(x), y(y), z(z), w(w)

	mov	eax, DWORD PTR _x$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 122  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tquat@N$00@glm@@QAE@ABN000@Z ENDP			; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QAE@ABNABU?$tvec3@N$00@1@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@N$00@glm@@QAE@ABNABU?$tvec3@N$00@1@@Z PROC	; glm::tquat<double,1>::tquat<double,1>, COMDAT
; _this$ = ecx

; 117  : 	{}

	push	ebp
	mov	ebp, esp

; 116  : 		: x(v.x), y(v.y), z(v.z), w(s)

	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mov	eax, DWORD PTR _s$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 117  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	8
??0?$tquat@N$00@glm@@QAE@ABNABU?$tvec3@N$00@1@@Z ENDP	; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tquat@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tquat<double,1>::tquat<double,1>, COMDAT
; _this$ = ecx

; 112  : 	{}

	mov	eax, ecx
	ret	4
??0?$tquat@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tquat@N$00@glm@@QAE@XZ PROC			; glm::tquat<double,1>::tquat<double,1>, COMDAT
; _this$ = ecx

; 92   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx+24], xmm0
	ret	0
??0?$tquat@N$00@glm@@QAE@XZ ENDP			; glm::tquat<double,1>::tquat<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$00@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@N$00@glm@@QBEABNH@Z PROC			; glm::tquat<double,1>::operator[], COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 82   : 	}

	pop	ebp
	ret	4
??A?$tquat@N$00@glm@@QBEABNH@Z ENDP			; glm::tquat<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$00@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@N$00@glm@@QAEAANH@Z PROC			; glm::tquat<double,1>::operator[], COMDAT
; _this$ = ecx

; 72   : 	{

	push	ebp
	mov	ebp, esp

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 75   : 	}

	pop	ebp
	ret	4
??A?$tquat@N$00@glm@@QAEAANH@Z ENDP			; glm::tquat<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@N$00@glm@@SAHXZ PROC			; glm::tquat<double,1>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tquat@N$00@glm@@SAHXZ ENDP			; glm::tquat<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -56						; size = 16
$T2 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_m$ = 8							; size = 4
??0?$tquat@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tquat<float,1>::tquat<float,1>, COMDAT
; _this$ = ecx

; 183  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	mov	esi, ecx

; 184  : 		*this = quat_cast(m);

	lea	ecx, DWORD PTR $T2[ebp]
	push	eax
	call	??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ; glm::tmat3x3<float,1>::tmat3x3<float,1>
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat3x3@M$00@0@@Z ; glm::quat_cast<float,1>
	movups	xmm0, XMMWORD PTR $T1[ebp]

; 185  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	mov	eax, esi
	xor	ecx, ebp
	movups	XMMWORD PTR [esi], xmm0
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tquat@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tquat<float,1>::tquat<float,1>, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 178  : 		*this = quat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	push	DWORD PTR _m$[ebp]
	mov	esi, ecx
	push	eax
	call	??$quat_cast@M$00@glm@@YA?AU?$tquat@M$00@0@ABU?$tmat3x3@M$00@0@@Z ; glm::quat_cast<float,1>
	add	esp, 8
	movups	xmm0, XMMWORD PTR [eax]

; 179  : 	}

	mov	eax, esi
	movups	XMMWORD PTR [esi], xmm0
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QAE@ABU?$tvec3@M$00@1@@Z
_TEXT	SEGMENT
_c$2$ = -20						; size = 4
tv259 = -16						; size = 4
_s$1$ = -12						; size = 4
$T1 = -12						; size = 4
_c$3$ = -8						; size = 4
_c$1$ = -4						; size = 4
_s$2$ = 8						; size = 4
$T2 = 8							; size = 4
_eulerAngle$ = 8					; size = 4
??0?$tquat@M$00@glm@@QAE@ABU?$tvec3@M$00@1@@Z PROC	; glm::tquat<float,1>::tquat<float,1>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	mov	esi, DWORD PTR _eulerAngle$[ebp]
	push	edi
	mov	edi, ecx
	movss	xmm2, DWORD PTR [esi]
	mulss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR [esi+4]
	mulss	xmm1, DWORD PTR __real@3f000000
	movaps	xmm0, xmm2
	movss	DWORD PTR $T1[ebp], xmm2
	movss	DWORD PTR $T2[ebp], xmm1
	call	___libm_sse2_cosf
	movss	DWORD PTR _c$1$[ebp], xmm0
	movss	xmm0, DWORD PTR $T2[ebp]
	call	___libm_sse2_cosf
	movss	DWORD PTR _c$2$[ebp], xmm0
	movss	xmm0, DWORD PTR [esi+8]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv259[ebp], xmm0
	call	___libm_sse2_cosf
	movss	DWORD PTR _c$3$[ebp], xmm0

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movss	xmm0, DWORD PTR $T1[ebp]
	call	___libm_sse2_sinf
	movss	DWORD PTR _s$1$[ebp], xmm0
	movss	xmm0, DWORD PTR $T2[ebp]
	call	___libm_sse2_sinf
	movss	DWORD PTR _s$2$[ebp], xmm0
	movss	xmm0, DWORD PTR tv259[ebp]
	call	___libm_sse2_sinf

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;

	movss	xmm4, DWORD PTR _s$2$[ebp]
	movaps	xmm3, xmm0
	movss	xmm7, DWORD PTR _s$1$[ebp]
	movaps	xmm5, xmm4
	movss	xmm2, DWORD PTR _c$2$[ebp]

; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	mov	eax, edi
	mulss	xmm2, DWORD PTR _c$1$[ebp]
	mulss	xmm4, DWORD PTR _c$1$[ebp]
	movss	xmm6, DWORD PTR _c$3$[ebp]
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR _c$3$[ebp]
	mulss	xmm5, xmm7
	mulss	xmm7, DWORD PTR _c$2$[ebp]
	movaps	xmm1, xmm5
	mulss	xmm2, xmm3
	mulss	xmm1, xmm3
	mulss	xmm5, xmm6
	addss	xmm1, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, xmm3
	mulss	xmm4, xmm6
	subss	xmm2, xmm5
	movss	DWORD PTR [edi+12], xmm1
	movaps	xmm1, xmm7
	mulss	xmm1, xmm6
	mulss	xmm7, xmm3
	subss	xmm1, xmm0
	movss	DWORD PTR [edi+8], xmm2
	addss	xmm7, xmm4
	movss	DWORD PTR [edi], xmm1
	movss	DWORD PTR [edi+4], xmm7
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$00@glm@@QAE@ABU?$tvec3@M$00@1@@Z ENDP	; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QAE@ABU?$tvec3@M$00@1@0@Z
_TEXT	SEGMENT
$T1 = -20						; size = 16
_LocalW$1$ = -4						; size = 4
_LocalW$2$ = 8						; size = 4
_u$ = 8							; size = 4
_LocalW$3$ = 12						; size = 4
_v$ = 12						; size = 4
??0?$tquat@M$00@glm@@QAE@ABU?$tvec3@M$00@1@0@Z PROC	; glm::tquat<float,1>::tquat<float,1>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	movss	xmm4, DWORD PTR [eax+8]
	movss	xmm6, DWORD PTR [eax+4]
	movaps	xmm7, xmm4
	movss	xmm3, DWORD PTR [edx+4]
	movaps	xmm0, xmm6
	movss	xmm5, DWORD PTR [edx+8]
	movss	xmm1, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [edx]
	mulss	xmm0, xmm5
	mulss	xmm7, xmm3
	subss	xmm7, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, xmm5

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);

	mulss	xmm5, xmm4
	movss	DWORD PTR _LocalW$2$[ebp], xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm4
	movss	DWORD PTR _LocalW$1$[ebp], xmm7
	movss	xmm7, DWORD PTR _LocalW$2$[ebp]
	subss	xmm7, xmm0

; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);

	movss	xmm4, DWORD PTR __real@3f800000
	movaps	xmm0, xmm1
	mulss	xmm0, xmm3
	movss	DWORD PTR _LocalW$2$[ebp], xmm7
	movaps	xmm7, xmm2
	mulss	xmm2, xmm1
	mulss	xmm7, xmm6
	mulss	xmm6, xmm3
	subss	xmm7, xmm0
	addss	xmm6, xmm2
	movss	DWORD PTR _LocalW$3$[ebp], xmm7

; 159  : 
; 160  : 		*this = normalize(q);

	movss	xmm1, DWORD PTR _LocalW$3$[ebp]
	movss	xmm7, DWORD PTR _LocalW$1$[ebp]
	addss	xmm6, xmm5
	movss	xmm5, DWORD PTR _LocalW$2$[ebp]
	movaps	xmm0, xmm1
	mulss	xmm0, xmm1
	movaps	xmm3, xmm7
	movaps	xmm2, xmm5
	mulss	xmm3, xmm7
	addss	xmm6, xmm4
	mulss	xmm2, xmm5
	addss	xmm2, xmm3
	movaps	xmm1, xmm6
	mulss	xmm1, xmm6
	addss	xmm1, xmm0
	xorps	xmm0, xmm0
	addss	xmm1, xmm2
	sqrtss	xmm1, xmm1
	comiss	xmm0, xmm1
	jb	SHORT $LN18@tquat

; 161  : 	}

	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8

; 159  : 
; 160  : 		*this = normalize(q);

$LN18@tquat:
	divss	xmm4, xmm1

; 161  : 	}

	mov	eax, ecx
	movaps	xmm0, xmm4
	mulss	xmm6, xmm4
	mulss	xmm0, xmm7
	movss	DWORD PTR $T1[ebp+12], xmm6
	movss	DWORD PTR $T1[ebp], xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, xmm5
	movss	DWORD PTR $T1[ebp+4], xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR _LocalW$3$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tquat@M$00@glm@@QAE@ABU?$tvec3@M$00@1@0@Z ENDP	; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$00@glm@@QAE?AU?$tmat4x4@M$00@1@XZ
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@M$00@glm@@QAE?AU?$tmat4x4@M$00@1@XZ PROC	; glm::tquat<float,1>::operator glm::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 197  : 		return mat4_cast(*this);

	lea	eax, DWORD PTR $T1[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@ABU?$tquat@M$00@0@@Z ; glm::mat3_cast<float,1>
	add	esp, 8
	mov	ecx, esi
	push	eax
	call	??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>

; 198  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??B?$tquat@M$00@glm@@QAE?AU?$tmat4x4@M$00@1@XZ ENDP	; glm::tquat<float,1>::operator glm::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$00@glm@@QAE?AU?$tmat3x3@M$00@1@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@M$00@glm@@QAE?AU?$tmat3x3@M$00@1@XZ PROC	; glm::tquat<float,1>::operator glm::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 190  : 	{

	push	ebp
	mov	ebp, esp

; 191  : 		return mat3_cast(*this);

	push	ecx
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	??$mat3_cast@M$00@glm@@YA?AU?$tmat3x3@M$00@0@ABU?$tquat@M$00@0@@Z ; glm::mat3_cast<float,1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8

; 192  : 	}

	pop	ebp
	ret	4
??B?$tquat@M$00@glm@@QAE?AU?$tmat3x3@M$00@1@XZ ENDP	; glm::tquat<float,1>::operator glm::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QAE@ABM000@Z
_TEXT	SEGMENT
_w$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
??0?$tquat@M$00@glm@@QAE@ABM000@Z PROC			; glm::tquat<float,1>::tquat<float,1>, COMDAT
; _this$ = ecx

; 122  : 	{}

	push	ebp
	mov	ebp, esp

; 121  : 		: x(x), y(y), z(z), w(w)

	mov	eax, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax

; 122  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tquat@M$00@glm@@QAE@ABM000@Z ENDP			; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QAE@ABMABU?$tvec3@M$00@1@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@M$00@glm@@QAE@ABMABU?$tvec3@M$00@1@@Z PROC	; glm::tquat<float,1>::tquat<float,1>, COMDAT
; _this$ = ecx

; 117  : 	{}

	push	ebp
	mov	ebp, esp

; 116  : 		: x(v.x), y(v.y), z(v.z), w(s)

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax

; 117  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tquat@M$00@glm@@QAE@ABMABU?$tvec3@M$00@1@@Z ENDP	; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tquat@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tquat<float,1>::tquat<float,1>, COMDAT
; _this$ = ecx

; 112  : 	{}

	mov	eax, ecx
	ret	4
??0?$tquat@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tquat@M$00@glm@@QAE@XZ PROC			; glm::tquat<float,1>::tquat<float,1>, COMDAT
; _this$ = ecx

; 90   : 				: x(0), y(0), z(0), w(1)

	mov	DWORD PTR [ecx], 0

; 92   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	ret	0
??0?$tquat@M$00@glm@@QAE@XZ ENDP			; glm::tquat<float,1>::tquat<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$00@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@M$00@glm@@QBEABMH@Z PROC			; glm::tquat<float,1>::operator[], COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 82   : 	}

	pop	ebp
	ret	4
??A?$tquat@M$00@glm@@QBEABMH@Z ENDP			; glm::tquat<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$00@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@M$00@glm@@QAEAAMH@Z PROC			; glm::tquat<float,1>::operator[], COMDAT
; _this$ = ecx

; 72   : 	{

	push	ebp
	mov	ebp, esp

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 75   : 	}

	pop	ebp
	ret	4
??A?$tquat@M$00@glm@@QAEAAMH@Z ENDP			; glm::tquat<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@M$00@glm@@SAHXZ PROC			; glm::tquat<float,1>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tquat@M$00@glm@@SAHXZ ENDP			; glm::tquat<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -108						; size = 32
$T2 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_m$ = 8							; size = 4
??0?$tquat@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tquat<double,2>::tquat<double,2>, COMDAT
; _this$ = ecx

; 183  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 184  : 		*this = quat_cast(m);

	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	mov	esi, ecx
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+40]
	movups	XMMWORD PTR $T2[ebp], xmm2
	movsd	xmm2, QWORD PTR [eax+32]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR [eax+72]
	movq	QWORD PTR $T2[ebp+16], xmm1
	movsd	xmm1, QWORD PTR [eax+48]
	movups	XMMWORD PTR $T2[ebp+24], xmm2
	movsd	xmm2, QWORD PTR [eax+64]
	movq	QWORD PTR $T2[ebp+40], xmm1
	movsd	xmm1, QWORD PTR [eax+80]
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	unpcklpd xmm2, xmm0
	push	eax
	movups	XMMWORD PTR $T2[ebp+48], xmm2
	movq	QWORD PTR $T2[ebp+64], xmm1
	call	??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat3x3@N$01@0@@Z ; glm::quat_cast<double,2>
	movups	xmm0, XMMWORD PTR $T1[ebp]

; 185  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	mov	eax, esi
	xor	ecx, ebp
	movups	XMMWORD PTR [esi], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp+16]
	movups	XMMWORD PTR [esi+16], xmm0
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_m$ = 8							; size = 4
??0?$tquat@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tquat<double,2>::tquat<double,2>, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 178  : 		*this = quat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	push	DWORD PTR _m$[ebp]
	mov	esi, ecx
	push	eax
	call	??$quat_cast@N$01@glm@@YA?AU?$tquat@N$01@0@ABU?$tmat3x3@N$01@0@@Z ; glm::quat_cast<double,2>
	add	esp, 8
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [esi], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 179  : 	}

	mov	eax, esi
	movups	XMMWORD PTR [esi+16], xmm0
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QAE@ABU?$tvec3@N$01@1@@Z
_TEXT	SEGMENT
_c$ = -64						; size = 24
_s$ = -40						; size = 24
$T1 = -16						; size = 8
$T2 = -16						; size = 8
tv138 = -16						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
tv160 = -8						; size = 8
_eulerAngle$ = 8					; size = 4
??0?$tquat@N$01@glm@@QAE@ABU?$tvec3@N$01@1@@Z PROC	; glm::tquat<double,2>::tquat<double,2>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	movsd	xmm2, QWORD PTR __real@3fe0000000000000
	push	esi
	mov	esi, DWORD PTR _eulerAngle$[ebp]
	push	edi
	sub	esp, 8
	mov	edi, ecx
	movsd	xmm1, QWORD PTR [esi+8]
	movsd	xmm0, QWORD PTR [esi]
	mulsd	xmm1, xmm2
	mulsd	xmm0, xmm2
	movsd	QWORD PTR $T4[ebp], xmm1
	movsd	xmm1, QWORD PTR [esi+16]
	mulsd	xmm1, xmm2
	movsd	QWORD PTR [esp], xmm0
	movsd	QWORD PTR $T2[ebp], xmm1
	call	_cos
	movsd	xmm0, QWORD PTR $T4[ebp]
	fstp	QWORD PTR _c$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	movsd	xmm0, QWORD PTR $T2[ebp]
	fstp	QWORD PTR _c$[ebp+8]
	movsd	QWORD PTR [esp], xmm0
	call	_cos

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movsd	xmm2, QWORD PTR __real@3fe0000000000000
	movsd	xmm1, QWORD PTR [esi+8]
	movsd	xmm0, QWORD PTR [esi]
	mulsd	xmm1, xmm2
	mulsd	xmm0, xmm2
	fstp	QWORD PTR _c$[ebp+16]
	movsd	QWORD PTR $T1[ebp], xmm1
	movsd	xmm1, QWORD PTR [esi+16]
	mulsd	xmm1, xmm2
	movsd	QWORD PTR [esp], xmm0
	movsd	QWORD PTR $T3[ebp], xmm1
	call	_sin
	movsd	xmm0, QWORD PTR $T1[ebp]
	fstp	QWORD PTR _s$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	movsd	xmm0, QWORD PTR $T3[ebp]
	fstp	QWORD PTR _s$[ebp+8]
	movsd	QWORD PTR [esp], xmm0
	call	_sin

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;

	movsd	xmm7, QWORD PTR _s$[ebp+8]
	add	esp, 8
	movsd	xmm6, QWORD PTR _s$[ebp]
	movaps	xmm1, xmm7
	movsd	xmm0, QWORD PTR _c$[ebp+8]

; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	mov	eax, edi
	mulsd	xmm0, QWORD PTR _c$[ebp]
	movsd	xmm4, QWORD PTR _c$[ebp+16]
	mulsd	xmm7, QWORD PTR _c$[ebp]
	mulsd	xmm1, xmm6
	mulsd	xmm6, QWORD PTR _c$[ebp+8]
	movsd	QWORD PTR tv138[ebp], xmm0
	movsd	QWORD PTR tv160[ebp], xmm1
	mulsd	xmm0, xmm4
	fstp	QWORD PTR _s$[ebp+16]
	movsd	xmm5, QWORD PTR _s$[ebp+16]
	mulsd	xmm1, xmm5
	addsd	xmm1, xmm0
	movaps	xmm0, xmm7
	mulsd	xmm0, xmm5
	mulsd	xmm7, xmm4
	movsd	QWORD PTR [edi+24], xmm1
	movaps	xmm1, xmm6
	mulsd	xmm1, xmm4
	mulsd	xmm6, xmm5
	subsd	xmm1, xmm0
	movsd	xmm0, QWORD PTR tv138[ebp]
	mulsd	xmm0, xmm5
	addsd	xmm6, xmm7
	movsd	QWORD PTR [edi], xmm1
	movsd	xmm1, QWORD PTR tv160[ebp]
	mulsd	xmm1, xmm4
	movsd	QWORD PTR [edi+8], xmm6
	subsd	xmm0, xmm1
	movsd	QWORD PTR [edi+16], xmm0
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@N$01@glm@@QAE@ABU?$tvec3@N$01@1@@Z ENDP	; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QAE@ABU?$tvec3@N$01@1@0@Z
_TEXT	SEGMENT
$T1 = -56						; size = 32
_LocalW$1$ = -24					; size = 8
_LocalW$3$ = -16					; size = 8
_LocalW$2$ = -8						; size = 8
_u$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@N$01@glm@@QAE@ABU?$tvec3@N$01@1@0@Z PROC	; glm::tquat<double,2>::tquat<double,2>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	movsd	xmm4, QWORD PTR [eax+16]
	movsd	xmm6, QWORD PTR [eax+8]
	movaps	xmm7, xmm4
	movsd	xmm3, QWORD PTR [edx+8]
	movaps	xmm0, xmm6
	movsd	xmm5, QWORD PTR [edx+16]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [edx]
	mulsd	xmm0, xmm5
	mulsd	xmm7, xmm3
	subsd	xmm7, xmm0
	movaps	xmm0, xmm1
	mulsd	xmm0, xmm5

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);

	mulsd	xmm5, xmm4
	movsd	QWORD PTR _LocalW$1$[ebp], xmm7
	movsd	QWORD PTR _LocalW$2$[ebp], xmm0
	movaps	xmm0, xmm2
	movsd	xmm7, QWORD PTR _LocalW$2$[ebp]
	mulsd	xmm0, xmm4

; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);

	movsd	xmm4, QWORD PTR __real@3ff0000000000000
	subsd	xmm7, xmm0
	movaps	xmm0, xmm1
	mulsd	xmm0, xmm3
	movsd	QWORD PTR _LocalW$2$[ebp], xmm7
	movaps	xmm7, xmm2
	mulsd	xmm2, xmm1
	mulsd	xmm7, xmm6
	mulsd	xmm6, xmm3
	subsd	xmm7, xmm0
	addsd	xmm6, xmm2
	movsd	QWORD PTR _LocalW$3$[ebp], xmm7

; 159  : 
; 160  : 		*this = normalize(q);

	movsd	xmm1, QWORD PTR _LocalW$3$[ebp]
	movsd	xmm7, QWORD PTR _LocalW$1$[ebp]
	addsd	xmm6, xmm5
	movsd	xmm5, QWORD PTR _LocalW$2$[ebp]
	movaps	xmm0, xmm1
	mulsd	xmm0, xmm1
	movaps	xmm3, xmm7
	movaps	xmm2, xmm5
	mulsd	xmm3, xmm7
	addsd	xmm6, xmm4
	mulsd	xmm2, xmm5
	movaps	xmm1, xmm6
	addsd	xmm2, xmm3
	mulsd	xmm1, xmm6
	addsd	xmm1, xmm0
	xorps	xmm0, xmm0
	addsd	xmm1, xmm2
	sqrtsd	xmm1, xmm1
	comisd	xmm0, xmm1
	jb	SHORT $LN18@tquat

; 161  : 	}

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	mov	esp, ebp
	pop	ebp
	ret	8

; 159  : 
; 160  : 		*this = normalize(q);

$LN18@tquat:
	divsd	xmm4, xmm1

; 161  : 	}

	mov	eax, ecx
	movaps	xmm0, xmm4
	mulsd	xmm6, xmm4
	mulsd	xmm0, xmm7
	movsd	QWORD PTR $T1[ebp+24], xmm6
	movsd	QWORD PTR $T1[ebp], xmm0
	movaps	xmm0, xmm4
	mulsd	xmm0, xmm5
	movsd	QWORD PTR $T1[ebp+8], xmm0
	movaps	xmm0, xmm4
	mulsd	xmm0, QWORD PTR _LocalW$3$[ebp]
	movsd	QWORD PTR $T1[ebp+16], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	xmm1, XMMWORD PTR $T1[ebp+16]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tquat@N$01@glm@@QAE@ABU?$tvec3@N$01@1@0@Z ENDP	; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$01@glm@@QAE?AU?$tmat4x4@N$01@1@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@N$01@glm@@QAE?AU?$tmat4x4@N$01@1@XZ PROC	; glm::tquat<double,2>::operator glm::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 197  : 		return mat4_cast(*this);

	lea	eax, DWORD PTR $T1[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@ABU?$tquat@N$01@0@@Z ; glm::mat3_cast<double,2>

; 198  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [esi], xmm3
	add	esp, 8
	xor	ecx, ebp
	movups	XMMWORD PTR [esi+16], xmm3
	movups	XMMWORD PTR [esi+32], xmm3
	movups	XMMWORD PTR [esi+48], xmm3
	movups	XMMWORD PTR [esi+64], xmm3
	movups	XMMWORD PTR [esi+80], xmm3
	movups	XMMWORD PTR [esi+96], xmm3
	movups	XMMWORD PTR [esi+112], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [esi], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+16], xmm2
	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [esi+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+48], xmm2
	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm2, QWORD PTR [eax+64]
	mov	eax, esi
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [esi+64], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [esi+96], xmm0
	movups	XMMWORD PTR [esi+80], xmm2
	movups	XMMWORD PTR [esi+112], xmm1
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??B?$tquat@N$01@glm@@QAE?AU?$tmat4x4@N$01@1@XZ ENDP	; glm::tquat<double,2>::operator glm::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@N$01@glm@@QAE?AU?$tmat3x3@N$01@1@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@N$01@glm@@QAE?AU?$tmat3x3@N$01@1@XZ PROC	; glm::tquat<double,2>::operator glm::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 190  : 	{

	push	ebp
	mov	ebp, esp

; 191  : 		return mat3_cast(*this);

	push	ecx
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	??$mat3_cast@N$01@glm@@YA?AU?$tmat3x3@N$01@0@ABU?$tquat@N$01@0@@Z ; glm::mat3_cast<double,2>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8

; 192  : 	}

	pop	ebp
	ret	4
??B?$tquat@N$01@glm@@QAE?AU?$tmat3x3@N$01@1@XZ ENDP	; glm::tquat<double,2>::operator glm::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QAE@ABN000@Z
_TEXT	SEGMENT
_w$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
??0?$tquat@N$01@glm@@QAE@ABN000@Z PROC			; glm::tquat<double,2>::tquat<double,2>, COMDAT
; _this$ = ecx

; 122  : 	{}

	push	ebp
	mov	ebp, esp

; 121  : 		: x(x), y(y), z(z), w(w)

	mov	eax, DWORD PTR _x$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _y$[ebp]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _w$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 122  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tquat@N$01@glm@@QAE@ABN000@Z ENDP			; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QAE@ABNABU?$tvec3@N$01@1@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@N$01@glm@@QAE@ABNABU?$tvec3@N$01@1@@Z PROC	; glm::tquat<double,2>::tquat<double,2>, COMDAT
; _this$ = ecx

; 117  : 	{}

	push	ebp
	mov	ebp, esp

; 116  : 		: x(v.x), y(v.y), z(v.z), w(s)

	mov	eax, DWORD PTR _v$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR [eax+16]
	mov	eax, DWORD PTR _s$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax]

; 117  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	8
??0?$tquat@N$01@glm@@QAE@ABNABU?$tvec3@N$01@1@@Z ENDP	; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tquat@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tquat<double,2>::tquat<double,2>, COMDAT
; _this$ = ecx

; 112  : 	{}

	mov	eax, ecx
	ret	4
??0?$tquat@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tquat@N$01@glm@@QAE@XZ PROC			; glm::tquat<double,2>::tquat<double,2>, COMDAT
; _this$ = ecx

; 92   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx+24], xmm0
	ret	0
??0?$tquat@N$01@glm@@QAE@XZ ENDP			; glm::tquat<double,2>::tquat<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$01@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@N$01@glm@@QBEABNH@Z PROC			; glm::tquat<double,2>::operator[], COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 82   : 	}

	pop	ebp
	ret	4
??A?$tquat@N$01@glm@@QBEABNH@Z ENDP			; glm::tquat<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@N$01@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@N$01@glm@@QAEAANH@Z PROC			; glm::tquat<double,2>::operator[], COMDAT
; _this$ = ecx

; 72   : 	{

	push	ebp
	mov	ebp, esp

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 75   : 	}

	pop	ebp
	ret	4
??A?$tquat@N$01@glm@@QAEAANH@Z ENDP			; glm::tquat<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@N$01@glm@@SAHXZ PROC			; glm::tquat<double,2>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tquat@N$01@glm@@SAHXZ ENDP			; glm::tquat<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -56						; size = 16
$T2 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_m$ = 8							; size = 4
??0?$tquat@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tquat<float,2>::tquat<float,2>, COMDAT
; _this$ = ecx

; 183  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _m$[ebp]
	push	esi
	mov	esi, ecx

; 184  : 		*this = quat_cast(m);

	lea	ecx, DWORD PTR $T2[ebp]
	push	eax
	call	??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ; glm::tmat3x3<float,2>::tmat3x3<float,2>
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat3x3@M$01@0@@Z ; glm::quat_cast<float,2>
	movups	xmm0, XMMWORD PTR $T1[ebp]

; 185  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	mov	eax, esi
	xor	ecx, ebp
	movups	XMMWORD PTR [esi], xmm0
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tquat@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tquat<float,2>::tquat<float,2>, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 178  : 		*this = quat_cast(m);

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	push	DWORD PTR _m$[ebp]
	mov	esi, ecx
	push	eax
	call	??$quat_cast@M$01@glm@@YA?AU?$tquat@M$01@0@ABU?$tmat3x3@M$01@0@@Z ; glm::quat_cast<float,2>
	add	esp, 8
	movups	xmm0, XMMWORD PTR [eax]

; 179  : 	}

	mov	eax, esi
	movups	XMMWORD PTR [esi], xmm0
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QAE@ABU?$tvec3@M$01@1@@Z
_TEXT	SEGMENT
_c$2$ = -20						; size = 4
tv259 = -16						; size = 4
_s$1$ = -12						; size = 4
$T1 = -12						; size = 4
_c$3$ = -8						; size = 4
_c$1$ = -4						; size = 4
_s$2$ = 8						; size = 4
$T2 = 8							; size = 4
_eulerAngle$ = 8					; size = 4
??0?$tquat@M$01@glm@@QAE@ABU?$tvec3@M$01@1@@Z PROC	; glm::tquat<float,2>::tquat<float,2>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi

; 166  : 		tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));

	mov	esi, DWORD PTR _eulerAngle$[ebp]
	push	edi
	mov	edi, ecx
	movss	xmm2, DWORD PTR [esi]
	mulss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR [esi+4]
	mulss	xmm1, DWORD PTR __real@3f000000
	movaps	xmm0, xmm2
	movss	DWORD PTR $T1[ebp], xmm2
	movss	DWORD PTR $T2[ebp], xmm1
	call	___libm_sse2_cosf
	movss	DWORD PTR _c$1$[ebp], xmm0
	movss	xmm0, DWORD PTR $T2[ebp]
	call	___libm_sse2_cosf
	movss	DWORD PTR _c$2$[ebp], xmm0
	movss	xmm0, DWORD PTR [esi+8]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv259[ebp], xmm0
	call	___libm_sse2_cosf
	movss	DWORD PTR _c$3$[ebp], xmm0

; 167  : 		tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

	movss	xmm0, DWORD PTR $T1[ebp]
	call	___libm_sse2_sinf
	movss	DWORD PTR _s$1$[ebp], xmm0
	movss	xmm0, DWORD PTR $T2[ebp]
	call	___libm_sse2_sinf
	movss	DWORD PTR _s$2$[ebp], xmm0
	movss	xmm0, DWORD PTR tv259[ebp]
	call	___libm_sse2_sinf

; 168  : 		
; 169  : 		this->w = c.x * c.y * c.z + s.x * s.y * s.z;

	movss	xmm4, DWORD PTR _s$2$[ebp]
	movaps	xmm3, xmm0
	movss	xmm7, DWORD PTR _s$1$[ebp]
	movaps	xmm5, xmm4
	movss	xmm2, DWORD PTR _c$2$[ebp]

; 170  : 		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
; 171  : 		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
; 172  : 		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
; 173  : 	}

	mov	eax, edi
	mulss	xmm2, DWORD PTR _c$1$[ebp]
	mulss	xmm4, DWORD PTR _c$1$[ebp]
	movss	xmm6, DWORD PTR _c$3$[ebp]
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR _c$3$[ebp]
	mulss	xmm5, xmm7
	mulss	xmm7, DWORD PTR _c$2$[ebp]
	movaps	xmm1, xmm5
	mulss	xmm2, xmm3
	mulss	xmm1, xmm3
	mulss	xmm5, xmm6
	addss	xmm1, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, xmm3
	mulss	xmm4, xmm6
	subss	xmm2, xmm5
	movss	DWORD PTR [edi+12], xmm1
	movaps	xmm1, xmm7
	mulss	xmm1, xmm6
	mulss	xmm7, xmm3
	subss	xmm1, xmm0
	movss	DWORD PTR [edi+8], xmm2
	addss	xmm7, xmm4
	movss	DWORD PTR [edi], xmm1
	movss	DWORD PTR [edi+4], xmm7
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tquat@M$01@glm@@QAE@ABU?$tvec3@M$01@1@@Z ENDP	; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QAE@ABU?$tvec3@M$01@1@0@Z
_TEXT	SEGMENT
$T1 = -20						; size = 16
_LocalW$1$ = -4						; size = 4
_LocalW$2$ = 8						; size = 4
_u$ = 8							; size = 4
_LocalW$3$ = 12						; size = 4
_v$ = 12						; size = 4
??0?$tquat@M$01@glm@@QAE@ABU?$tvec3@M$01@1@0@Z PROC	; glm::tquat<float,2>::tquat<float,2>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 156  : 		tvec3<T, P> const LocalW(cross(u, v));

	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	movss	xmm4, DWORD PTR [eax+8]
	movss	xmm6, DWORD PTR [eax+4]
	movaps	xmm7, xmm4
	movss	xmm3, DWORD PTR [edx+4]
	movaps	xmm0, xmm6
	movss	xmm5, DWORD PTR [edx+8]
	movss	xmm1, DWORD PTR [eax]
	movss	xmm2, DWORD PTR [edx]
	mulss	xmm0, xmm5
	mulss	xmm7, xmm3
	subss	xmm7, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, xmm5

; 157  : 		T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);

	mulss	xmm5, xmm4
	movss	DWORD PTR _LocalW$2$[ebp], xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm4
	movss	DWORD PTR _LocalW$1$[ebp], xmm7
	movss	xmm7, DWORD PTR _LocalW$2$[ebp]
	subss	xmm7, xmm0

; 158  : 		tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);

	movss	xmm4, DWORD PTR __real@3f800000
	movaps	xmm0, xmm1
	mulss	xmm0, xmm3
	movss	DWORD PTR _LocalW$2$[ebp], xmm7
	movaps	xmm7, xmm2
	mulss	xmm2, xmm1
	mulss	xmm7, xmm6
	mulss	xmm6, xmm3
	subss	xmm7, xmm0
	addss	xmm6, xmm2
	movss	DWORD PTR _LocalW$3$[ebp], xmm7

; 159  : 
; 160  : 		*this = normalize(q);

	movss	xmm1, DWORD PTR _LocalW$3$[ebp]
	movss	xmm7, DWORD PTR _LocalW$1$[ebp]
	addss	xmm6, xmm5
	movss	xmm5, DWORD PTR _LocalW$2$[ebp]
	movaps	xmm0, xmm1
	mulss	xmm0, xmm1
	movaps	xmm3, xmm7
	movaps	xmm2, xmm5
	mulss	xmm3, xmm7
	addss	xmm6, xmm4
	mulss	xmm2, xmm5
	addss	xmm2, xmm3
	movaps	xmm1, xmm6
	mulss	xmm1, xmm6
	addss	xmm1, xmm0
	xorps	xmm0, xmm0
	addss	xmm1, xmm2
	sqrtss	xmm1, xmm1
	comiss	xmm0, xmm1
	jb	SHORT $LN18@tquat

; 161  : 	}

	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8

; 159  : 
; 160  : 		*this = normalize(q);

$LN18@tquat:
	divss	xmm4, xmm1

; 161  : 	}

	mov	eax, ecx
	movaps	xmm0, xmm4
	mulss	xmm6, xmm4
	mulss	xmm0, xmm7
	movss	DWORD PTR $T1[ebp+12], xmm6
	movss	DWORD PTR $T1[ebp], xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, xmm5
	movss	DWORD PTR $T1[ebp+4], xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR _LocalW$3$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tquat@M$01@glm@@QAE@ABU?$tvec3@M$01@1@0@Z ENDP	; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$01@glm@@QAE?AU?$tmat4x4@M$01@1@XZ
_TEXT	SEGMENT
$T1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@M$01@glm@@QAE?AU?$tmat4x4@M$01@1@XZ PROC	; glm::tquat<float,2>::operator glm::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 197  : 		return mat4_cast(*this);

	lea	eax, DWORD PTR $T1[ebp]
	push	ecx
	push	eax
	call	??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@ABU?$tquat@M$01@0@@Z ; glm::mat3_cast<float,2>
	add	esp, 8
	mov	ecx, esi
	push	eax
	call	??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>

; 198  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??B?$tquat@M$01@glm@@QAE?AU?$tmat4x4@M$01@1@XZ ENDP	; glm::tquat<float,2>::operator glm::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??B?$tquat@M$01@glm@@QAE?AU?$tmat3x3@M$01@1@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??B?$tquat@M$01@glm@@QAE?AU?$tmat3x3@M$01@1@XZ PROC	; glm::tquat<float,2>::operator glm::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 190  : 	{

	push	ebp
	mov	ebp, esp

; 191  : 		return mat3_cast(*this);

	push	ecx
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	??$mat3_cast@M$01@glm@@YA?AU?$tmat3x3@M$01@0@ABU?$tquat@M$01@0@@Z ; glm::mat3_cast<float,2>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8

; 192  : 	}

	pop	ebp
	ret	4
??B?$tquat@M$01@glm@@QAE?AU?$tmat3x3@M$01@1@XZ ENDP	; glm::tquat<float,2>::operator glm::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QAE@ABM000@Z
_TEXT	SEGMENT
_w$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
??0?$tquat@M$01@glm@@QAE@ABM000@Z PROC			; glm::tquat<float,2>::tquat<float,2>, COMDAT
; _this$ = ecx

; 122  : 	{}

	push	ebp
	mov	ebp, esp

; 121  : 		: x(x), y(y), z(z), w(w)

	mov	eax, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax

; 122  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tquat@M$01@glm@@QAE@ABM000@Z ENDP			; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QAE@ABMABU?$tvec3@M$01@1@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_v$ = 12						; size = 4
??0?$tquat@M$01@glm@@QAE@ABMABU?$tvec3@M$01@1@@Z PROC	; glm::tquat<float,2>::tquat<float,2>, COMDAT
; _this$ = ecx

; 117  : 	{}

	push	ebp
	mov	ebp, esp

; 116  : 		: x(v.x), y(v.y), z(v.z), w(s)

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax

; 117  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tquat@M$01@glm@@QAE@ABMABU?$tvec3@M$01@1@@Z ENDP	; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tquat@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tquat<float,2>::tquat<float,2>, COMDAT
; _this$ = ecx

; 112  : 	{}

	mov	eax, ecx
	ret	4
??0?$tquat@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tquat@M$01@glm@@QAE@XZ PROC			; glm::tquat<float,2>::tquat<float,2>, COMDAT
; _this$ = ecx

; 90   : 				: x(0), y(0), z(0), w(1)

	mov	DWORD PTR [ecx], 0

; 92   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 1065353216		; 3f800000H
	ret	0
??0?$tquat@M$01@glm@@QAE@XZ ENDP			; glm::tquat<float,2>::tquat<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$01@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@M$01@glm@@QBEABMH@Z PROC			; glm::tquat<float,2>::operator[], COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp

; 80   : 		assert(i >= 0 && i < this->length());
; 81   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 82   : 	}

	pop	ebp
	ret	4
??A?$tquat@M$01@glm@@QBEABMH@Z ENDP			; glm::tquat<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$01@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tquat@M$01@glm@@QAEAAMH@Z PROC			; glm::tquat<float,2>::operator[], COMDAT
; _this$ = ecx

; 72   : 	{

	push	ebp
	mov	ebp, esp

; 73   : 		assert(i >= 0 && i < this->length());
; 74   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 75   : 	}

	pop	ebp
	ret	4
??A?$tquat@M$01@glm@@QAEAAMH@Z ENDP			; glm::tquat<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@M$01@glm@@SAHXZ PROC			; glm::tquat<float,2>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tquat@M$01@glm@@SAHXZ ENDP			; glm::tquat<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x4@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<double,0>::operator--, COMDAT
; _this$ = ecx

; 394  : 	{

	push	ebp
	mov	ebp, esp
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx

; 395  : 		tmat4x4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, 32					; 00000020H
	push	esi
	push	edi

; 396  : 		--*this;

	movups	xmm0, XMMWORD PTR [edx]
	mov	esi, edx
	mov	edi, eax
	rep movsd
	subpd	xmm0, xmm1
	pop	edi
	pop	esi
	movups	XMMWORD PTR [edx], xmm0
	movups	xmm0, XMMWORD PTR [edx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0
	movups	xmm0, XMMWORD PTR [edx+96]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+96], xmm0
	movups	xmm0, XMMWORD PTR [edx+112]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+112], xmm0

; 397  : 		return Result;
; 398  : 	}

	pop	ebp
	ret	8
??F?$tmat4x4@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x4@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<double,0>::operator++, COMDAT
; _this$ = ecx

; 386  : 	{

	push	ebp
	mov	ebp, esp
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx

; 387  : 		tmat4x4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, 32					; 00000020H
	push	esi
	push	edi

; 388  : 		++*this;

	movups	xmm0, XMMWORD PTR [edx]
	mov	esi, edx
	mov	edi, eax
	rep movsd
	addpd	xmm0, xmm1
	pop	edi
	pop	esi
	movups	XMMWORD PTR [edx], xmm0
	movups	xmm0, XMMWORD PTR [edx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0
	movups	xmm0, XMMWORD PTR [edx+96]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+96], xmm0
	movups	xmm0, XMMWORD PTR [edx+112]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+112], xmm0

; 389  : 		return Result;
; 390  : 	}

	pop	ebp
	ret	8
??E?$tmat4x4@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x4@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x4<double,0>::operator--, COMDAT
; _this$ = ecx

; 377  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 378  : 		--this->value[1];
; 379  : 		--this->value[2];
; 380  : 		--this->value[3];
; 381  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx+96]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	xmm0, XMMWORD PTR [ecx+112]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+112], xmm0

; 382  : 	}

	ret	0
??F?$tmat4x4@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x4@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x4<double,0>::operator++, COMDAT
; _this$ = ecx

; 367  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 368  : 		++this->value[1];
; 369  : 		++this->value[2];
; 370  : 		++this->value[3];
; 371  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx+96]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	xmm0, XMMWORD PTR [ecx+112]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+112], xmm0

; 372  : 	}

	ret	0
??E?$tmat4x4@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z PROC	; glm::tmat4x4<double,0>::operator[], COMDAT
; _this$ = ecx

; 248  : 	{

	push	ebp
	mov	ebp, esp

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 251  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z ENDP	; glm::tmat4x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z PROC	; glm::tmat4x4<double,0>::operator[], COMDAT
; _this$ = ecx

; 241  : 	{

	push	ebp
	mov	ebp, esp

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 244  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z ENDP	; glm::tmat4x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@N$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<double,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x4@N$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp

; 231  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movups	XMMWORD PTR [ecx+96], xmm3
	movups	XMMWORD PTR [ecx+112], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 232  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+48], xmm2

; 233  : 		this->value[2] = col_type(m[2], 0);

	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm2, QWORD PTR [eax+64]
	unpcklpd xmm2, xmm3
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+64], xmm1

; 234  : 		this->value[3] = col_type(m[3], 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+80], xmm2
	movsd	xmm2, QWORD PTR [eax+72]
	movsd	xmm0, QWORD PTR [eax+80]
	movsd	xmm3, QWORD PTR [eax+88]

; 235  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	unpcklpd xmm3, xmm1
	movups	XMMWORD PTR [ecx+96], xmm2
	movups	XMMWORD PTR [ecx+112], xmm3
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 221  : 	{

	push	ebp
	mov	ebp, esp

; 222  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 223  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+48]
	movups	XMMWORD PTR [ecx+48], xmm0

; 224  : 		this->value[2] = m[2];

	movups	xmm0, XMMWORD PTR [eax+64]
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax+80]

; 225  : 		this->value[3] = col_type(0, 0, 0, 1);
; 226  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+80], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 212  : 	{

	push	ebp
	mov	ebp, esp

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);
; 216  : 		this->value[3] = col_type(0, 0, 0, 1);
; 217  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp

; 204  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 205  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+48]

; 206  : 		this->value[2] = col_type(0, 0, 1, 0);
; 207  : 		this->value[3] = col_type(0, 0, 0, 1);
; 208  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 194  : 	{

	push	ebp
	mov	ebp, esp

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);
; 199  : 	}

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp

; 186  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movups	XMMWORD PTR [ecx+96], xmm3
	movups	XMMWORD PTR [ecx+112], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 187  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);
; 189  : 		this->value[3] = col_type(0, 0, 0, 1);
; 190  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp

; 177  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movups	XMMWORD PTR [ecx+96], xmm3
	movups	XMMWORD PTR [ecx+112], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 178  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+48], xmm2

; 179  : 		this->value[2] = col_type(m[2], 0);

	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm2, QWORD PTR [eax+64]

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);
; 181  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+80], xmm2
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);
; 171  : 		this->value[3] = col_type(0, 0, 0, 1);
; 172  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@000@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp

; 81   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 82   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 83   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 84   : 		this->value[3] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 85   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+112], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@000@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABN000000000000000@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
_x3$ = 56						; size = 4
_y3$ = 60						; size = 4
_z3$ = 64						; size = 4
_w3$ = 68						; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABN000000000000000@Z PROC	; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	mov	eax, DWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movsd	xmm3, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _w0$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	eax, DWORD PTR _x1$[ebp]
	movups	XMMWORD PTR [ecx], xmm3
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+16], xmm2
	movsd	xmm3, QWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _w1$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	eax, DWORD PTR _x2$[ebp]
	movups	XMMWORD PTR [ecx+32], xmm3
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movsd	xmm3, QWORD PTR [eax]
	mov	eax, DWORD PTR _y2$[ebp]
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _w2$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	eax, DWORD PTR _x3$[ebp]
	movups	XMMWORD PTR [ecx+64], xmm3
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+80], xmm2
	movsd	xmm3, QWORD PTR [eax]
	mov	eax, DWORD PTR _y3$[ebp]
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _w3$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 70   : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+96], xmm3
	movups	XMMWORD PTR [ecx+112], xmm2
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x4@N$0A@@glm@@QAE@ABN000000000000000@Z ENDP	; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@ABN@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_s$ = 8							; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@ABN@Z PROC			; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 50   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	eax, DWORD PTR _s$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movups	XMMWORD PTR [ecx+96], xmm3
	movups	XMMWORD PTR [ecx+112], xmm3
	movsd	xmm0, QWORD PTR [eax]
	xorps	xmm2, xmm2
	movsd	QWORD PTR $T1[ebp], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+24], xmm3
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	movsd	xmm1, QWORD PTR [eax]
	movaps	xmm0, xmm3
	unpcklpd xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm2

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	movsd	xmm1, QWORD PTR [eax]
	xorps	xmm0, xmm0
	unpcklpd xmm1, xmm3
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	movsd	xmm0, QWORD PTR [eax]
	xorps	xmm1, xmm1
	unpcklpd xmm3, xmm0

; 55   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+96], xmm1
	movups	XMMWORD PTR [ecx+112], xmm3
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@ABN@Z ENDP			; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x4@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 46   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	ret	4
??0?$tmat4x4@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat4x4@N$0A@@glm@@QAE@XZ PROC			; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT
; _this$ = ecx

; 13   : 		{

	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);
; 16   : 				this->value[1] = col_type(0, 1, 0, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1, 0);
; 18   : 				this->value[3] = col_type(0, 0, 0, 1);
; 19   : #			endif
; 20   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	ret	0
??0?$tmat4x4@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x4@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<float,0>::operator--, COMDAT
; _this$ = ecx

; 394  : 	{

	push	ebp
	mov	ebp, esp

; 395  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0

; 396  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 397  : 		return Result;
; 398  : 	}

	pop	ebp
	ret	8
??F?$tmat4x4@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x4@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<float,0>::operator++, COMDAT
; _this$ = ecx

; 386  : 	{

	push	ebp
	mov	ebp, esp

; 387  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0

; 388  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 389  : 		return Result;
; 390  : 	}

	pop	ebp
	ret	8
??E?$tmat4x4@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x4<float,0>::operator--, COMDAT
; _this$ = ecx

; 377  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 378  : 		--this->value[1];
; 379  : 		--this->value[2];
; 380  : 		--this->value[3];
; 381  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 382  : 	}

	ret	0
??F?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x4<float,0>::operator++, COMDAT
; _this$ = ecx

; 367  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 368  : 		++this->value[1];
; 369  : 		++this->value[2];
; 370  : 		++this->value[3];
; 371  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 372  : 	}

	ret	0
??E?$tmat4x4@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z PROC	; glm::tmat4x4<float,0>::operator[], COMDAT
; _this$ = ecx

; 248  : 	{

	push	ebp
	mov	ebp, esp

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 251  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z ENDP	; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z PROC	; glm::tmat4x4<float,0>::operator[], COMDAT
; _this$ = ecx

; 241  : 	{

	push	ebp
	mov	ebp, esp

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 244  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ENDP	; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<float,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 231  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	mov	DWORD PTR $T4[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T4[ebp]

; 232  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T3[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 233  : 		this->value[2] = col_type(m[2], 0);

	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 234  : 		this->value[3] = col_type(m[3], 1);

	mov	DWORD PTR $T1[ebp+12], 1065353216	; 3f800000H
	movups	XMMWORD PTR [ecx+32], xmm0
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+40]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+44]

; 235  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 221  : 	{

	push	ebp
	mov	ebp, esp

; 222  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 223  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 224  : 		this->value[2] = m[2];

	movups	xmm0, XMMWORD PTR [eax+32]

; 225  : 		this->value[3] = col_type(0, 0, 0, 1);
; 226  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 212  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);
; 216  : 		this->value[3] = col_type(0, 0, 0, 1);
; 217  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp

; 204  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 205  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]

; 206  : 		this->value[2] = col_type(0, 0, 1, 0);
; 207  : 		this->value[3] = col_type(0, 0, 0, 1);
; 208  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 194  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);
; 199  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 186  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 187  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);
; 189  : 		this->value[3] = col_type(0, 0, 0, 1);
; 190  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 177  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 178  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 179  : 		this->value[2] = col_type(m[2], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);
; 181  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);
; 171  : 		this->value[3] = col_type(0, 0, 0, 1);
; 172  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@000@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp

; 81   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movups	xmm0, XMMWORD PTR [eax]

; 82   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 83   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 84   : 		this->value[3] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 85   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@000@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABM000000000000000@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
_x3$ = 56						; size = 4
_y3$ = 60						; size = 4
_z3$ = 64						; size = 4
_w3$ = 68						; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABM000000000000000@Z PROC	; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w0$[ebp]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	eax, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T4[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T4[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	eax, DWORD PTR _x2$[ebp]
	movss	DWORD PTR $T3[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T3[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y2$[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w2$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	eax, DWORD PTR _x3$[ebp]
	movss	DWORD PTR $T2[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y3$[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w3$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 70   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x4@M$0A@@glm@@QAE@ABM000000000000000@Z ENDP	; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_s$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABM@Z PROC			; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 50   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	DWORD PTR $T4[ebp+4], 0
	mov	DWORD PTR $T4[ebp+8], 0
	mov	DWORD PTR $T4[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T4[ebp]

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	mov	DWORD PTR $T3[ebp], 0
	mov	DWORD PTR $T3[ebp+8], 0
	movups	XMMWORD PTR [ecx], xmm0
	mov	DWORD PTR $T3[ebp+12], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR $T2[ebp+4], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	mov	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR $T1[ebp+4], 0
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	DWORD PTR $T1[ebp+8], 0
	movss	xmm0, DWORD PTR [eax]

; 55   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABM@Z ENDP			; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 46   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat4x4@M$0A@@glm@@QAE@XZ PROC			; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 13   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);
; 16   : 				this->value[1] = col_type(0, 1, 0, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1, 0);
; 18   : 				this->value[3] = col_type(0, 0, 0, 1);
; 19   : #			endif
; 20   : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	ret	0
??0?$tmat4x4@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x4@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<double,1>::operator--, COMDAT
; _this$ = ecx

; 394  : 	{

	push	ebp
	mov	ebp, esp
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx

; 395  : 		tmat4x4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, 32					; 00000020H
	push	esi
	push	edi

; 396  : 		--*this;

	movups	xmm0, XMMWORD PTR [edx]
	mov	esi, edx
	mov	edi, eax
	rep movsd
	subpd	xmm0, xmm1
	pop	edi
	pop	esi
	movups	XMMWORD PTR [edx], xmm0
	movups	xmm0, XMMWORD PTR [edx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0
	movups	xmm0, XMMWORD PTR [edx+96]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+96], xmm0
	movups	xmm0, XMMWORD PTR [edx+112]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+112], xmm0

; 397  : 		return Result;
; 398  : 	}

	pop	ebp
	ret	8
??F?$tmat4x4@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x4@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<double,1>::operator++, COMDAT
; _this$ = ecx

; 386  : 	{

	push	ebp
	mov	ebp, esp
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx

; 387  : 		tmat4x4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, 32					; 00000020H
	push	esi
	push	edi

; 388  : 		++*this;

	movups	xmm0, XMMWORD PTR [edx]
	mov	esi, edx
	mov	edi, eax
	rep movsd
	addpd	xmm0, xmm1
	pop	edi
	pop	esi
	movups	XMMWORD PTR [edx], xmm0
	movups	xmm0, XMMWORD PTR [edx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0
	movups	xmm0, XMMWORD PTR [edx+96]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+96], xmm0
	movups	xmm0, XMMWORD PTR [edx+112]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+112], xmm0

; 389  : 		return Result;
; 390  : 	}

	pop	ebp
	ret	8
??E?$tmat4x4@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x4@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x4<double,1>::operator--, COMDAT
; _this$ = ecx

; 377  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 378  : 		--this->value[1];
; 379  : 		--this->value[2];
; 380  : 		--this->value[3];
; 381  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx+96]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	xmm0, XMMWORD PTR [ecx+112]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+112], xmm0

; 382  : 	}

	ret	0
??F?$tmat4x4@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x4@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x4<double,1>::operator++, COMDAT
; _this$ = ecx

; 367  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 368  : 		++this->value[1];
; 369  : 		++this->value[2];
; 370  : 		++this->value[3];
; 371  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx+96]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	xmm0, XMMWORD PTR [ecx+112]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+112], xmm0

; 372  : 	}

	ret	0
??E?$tmat4x4@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z PROC	; glm::tmat4x4<double,1>::operator[], COMDAT
; _this$ = ecx

; 248  : 	{

	push	ebp
	mov	ebp, esp

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 251  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat4x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z PROC	; glm::tmat4x4<double,1>::operator[], COMDAT
; _this$ = ecx

; 241  : 	{

	push	ebp
	mov	ebp, esp

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 244  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat4x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@N$00@glm@@SAHXZ PROC			; glm::tmat4x4<double,1>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x4@N$00@glm@@SAHXZ ENDP			; glm::tmat4x4<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp

; 231  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movups	XMMWORD PTR [ecx+96], xmm3
	movups	XMMWORD PTR [ecx+112], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 232  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+48], xmm2

; 233  : 		this->value[2] = col_type(m[2], 0);

	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm2, QWORD PTR [eax+64]
	unpcklpd xmm2, xmm3
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+64], xmm1

; 234  : 		this->value[3] = col_type(m[3], 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+80], xmm2
	movsd	xmm2, QWORD PTR [eax+72]
	movsd	xmm0, QWORD PTR [eax+80]
	movsd	xmm3, QWORD PTR [eax+88]

; 235  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	unpcklpd xmm3, xmm1
	movups	XMMWORD PTR [ecx+96], xmm2
	movups	XMMWORD PTR [ecx+112], xmm3
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 221  : 	{

	push	ebp
	mov	ebp, esp

; 222  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 223  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+48]
	movups	XMMWORD PTR [ecx+48], xmm0

; 224  : 		this->value[2] = m[2];

	movups	xmm0, XMMWORD PTR [eax+64]
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax+80]

; 225  : 		this->value[3] = col_type(0, 0, 0, 1);
; 226  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+80], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 212  : 	{

	push	ebp
	mov	ebp, esp

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);
; 216  : 		this->value[3] = col_type(0, 0, 0, 1);
; 217  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp

; 204  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 205  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+48]

; 206  : 		this->value[2] = col_type(0, 0, 1, 0);
; 207  : 		this->value[3] = col_type(0, 0, 0, 1);
; 208  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 194  : 	{

	push	ebp
	mov	ebp, esp

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);
; 199  : 	}

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp

; 186  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movups	XMMWORD PTR [ecx+96], xmm3
	movups	XMMWORD PTR [ecx+112], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 187  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);
; 189  : 		this->value[3] = col_type(0, 0, 0, 1);
; 190  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp

; 177  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movups	XMMWORD PTR [ecx+96], xmm3
	movups	XMMWORD PTR [ecx+112], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 178  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+48], xmm2

; 179  : 		this->value[2] = col_type(m[2], 0);

	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm2, QWORD PTR [eax+64]

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);
; 181  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+80], xmm2
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);
; 171  : 		this->value[3] = col_type(0, 0, 0, 1);
; 172  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@000@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp

; 81   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 82   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 83   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 84   : 		this->value[3] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 85   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+112], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@000@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABN000000000000000@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
_x3$ = 56						; size = 4
_y3$ = 60						; size = 4
_z3$ = 64						; size = 4
_w3$ = 68						; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABN000000000000000@Z PROC	; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	mov	eax, DWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movsd	xmm3, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _w0$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	eax, DWORD PTR _x1$[ebp]
	movups	XMMWORD PTR [ecx], xmm3
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+16], xmm2
	movsd	xmm3, QWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _w1$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	eax, DWORD PTR _x2$[ebp]
	movups	XMMWORD PTR [ecx+32], xmm3
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movsd	xmm3, QWORD PTR [eax]
	mov	eax, DWORD PTR _y2$[ebp]
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _w2$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	eax, DWORD PTR _x3$[ebp]
	movups	XMMWORD PTR [ecx+64], xmm3
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+80], xmm2
	movsd	xmm3, QWORD PTR [eax]
	mov	eax, DWORD PTR _y3$[ebp]
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _w3$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 70   : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+96], xmm3
	movups	XMMWORD PTR [ecx+112], xmm2
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x4@N$00@glm@@QAE@ABN000000000000000@Z ENDP	; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@ABN@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_s$ = 8							; size = 4
??0?$tmat4x4@N$00@glm@@QAE@ABN@Z PROC			; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 50   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	eax, DWORD PTR _s$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movups	XMMWORD PTR [ecx+96], xmm3
	movups	XMMWORD PTR [ecx+112], xmm3
	movsd	xmm0, QWORD PTR [eax]
	xorps	xmm2, xmm2
	movsd	QWORD PTR $T1[ebp], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+24], xmm3
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	movsd	xmm1, QWORD PTR [eax]
	movaps	xmm0, xmm3
	unpcklpd xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm2

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	movsd	xmm1, QWORD PTR [eax]
	xorps	xmm0, xmm0
	unpcklpd xmm1, xmm3
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	movsd	xmm0, QWORD PTR [eax]
	xorps	xmm1, xmm1
	unpcklpd xmm3, xmm0

; 55   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+96], xmm1
	movups	XMMWORD PTR [ecx+112], xmm3
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@ABN@Z ENDP			; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x4@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 46   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	ret	4
??0?$tmat4x4@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat4x4@N$00@glm@@QAE@XZ PROC			; glm::tmat4x4<double,1>::tmat4x4<double,1>, COMDAT
; _this$ = ecx

; 13   : 		{

	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);
; 16   : 				this->value[1] = col_type(0, 1, 0, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1, 0);
; 18   : 				this->value[3] = col_type(0, 0, 0, 1);
; 19   : #			endif
; 20   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	ret	0
??0?$tmat4x4@N$00@glm@@QAE@XZ ENDP			; glm::tmat4x4<double,1>::tmat4x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x4@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<float,1>::operator--, COMDAT
; _this$ = ecx

; 394  : 	{

	push	ebp
	mov	ebp, esp

; 395  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0

; 396  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 397  : 		return Result;
; 398  : 	}

	pop	ebp
	ret	8
??F?$tmat4x4@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x4@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<float,1>::operator++, COMDAT
; _this$ = ecx

; 386  : 	{

	push	ebp
	mov	ebp, esp

; 387  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0

; 388  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 389  : 		return Result;
; 390  : 	}

	pop	ebp
	ret	8
??E?$tmat4x4@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x4@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x4<float,1>::operator--, COMDAT
; _this$ = ecx

; 377  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 378  : 		--this->value[1];
; 379  : 		--this->value[2];
; 380  : 		--this->value[3];
; 381  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 382  : 	}

	ret	0
??F?$tmat4x4@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x4@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x4<float,1>::operator++, COMDAT
; _this$ = ecx

; 367  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 368  : 		++this->value[1];
; 369  : 		++this->value[2];
; 370  : 		++this->value[3];
; 371  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 372  : 	}

	ret	0
??E?$tmat4x4@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z PROC	; glm::tmat4x4<float,1>::operator[], COMDAT
; _this$ = ecx

; 248  : 	{

	push	ebp
	mov	ebp, esp

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 251  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat4x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z PROC	; glm::tmat4x4<float,1>::operator[], COMDAT
; _this$ = ecx

; 241  : 	{

	push	ebp
	mov	ebp, esp

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 244  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat4x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$00@glm@@SAHXZ PROC			; glm::tmat4x4<float,1>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x4@M$00@glm@@SAHXZ ENDP			; glm::tmat4x4<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 231  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	mov	DWORD PTR $T4[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T4[ebp]

; 232  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T3[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 233  : 		this->value[2] = col_type(m[2], 0);

	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 234  : 		this->value[3] = col_type(m[3], 1);

	mov	DWORD PTR $T1[ebp+12], 1065353216	; 3f800000H
	movups	XMMWORD PTR [ecx+32], xmm0
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+40]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+44]

; 235  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 221  : 	{

	push	ebp
	mov	ebp, esp

; 222  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 223  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 224  : 		this->value[2] = m[2];

	movups	xmm0, XMMWORD PTR [eax+32]

; 225  : 		this->value[3] = col_type(0, 0, 0, 1);
; 226  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 212  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);
; 216  : 		this->value[3] = col_type(0, 0, 0, 1);
; 217  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp

; 204  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 205  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]

; 206  : 		this->value[2] = col_type(0, 0, 1, 0);
; 207  : 		this->value[3] = col_type(0, 0, 0, 1);
; 208  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 194  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);
; 199  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 186  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 187  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);
; 189  : 		this->value[3] = col_type(0, 0, 0, 1);
; 190  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 177  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 178  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 179  : 		this->value[2] = col_type(m[2], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);
; 181  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);
; 171  : 		this->value[3] = col_type(0, 0, 0, 1);
; 172  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@000@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp

; 81   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movups	xmm0, XMMWORD PTR [eax]

; 82   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 83   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 84   : 		this->value[3] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 85   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@000@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABM000000000000000@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
_x3$ = 56						; size = 4
_y3$ = 60						; size = 4
_z3$ = 64						; size = 4
_w3$ = 68						; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABM000000000000000@Z PROC	; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w0$[ebp]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	eax, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T4[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T4[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	eax, DWORD PTR _x2$[ebp]
	movss	DWORD PTR $T3[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T3[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y2$[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w2$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	eax, DWORD PTR _x3$[ebp]
	movss	DWORD PTR $T2[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y3$[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w3$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 70   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x4@M$00@glm@@QAE@ABM000000000000000@Z ENDP	; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@ABM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_s$ = 8							; size = 4
??0?$tmat4x4@M$00@glm@@QAE@ABM@Z PROC			; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 50   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	DWORD PTR $T4[ebp+4], 0
	mov	DWORD PTR $T4[ebp+8], 0
	mov	DWORD PTR $T4[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T4[ebp]

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	mov	DWORD PTR $T3[ebp], 0
	mov	DWORD PTR $T3[ebp+8], 0
	movups	XMMWORD PTR [ecx], xmm0
	mov	DWORD PTR $T3[ebp+12], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR $T2[ebp+4], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	mov	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR $T1[ebp+4], 0
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	DWORD PTR $T1[ebp+8], 0
	movss	xmm0, DWORD PTR [eax]

; 55   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@ABM@Z ENDP			; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x4@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 46   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	ret	4
??0?$tmat4x4@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat4x4@M$00@glm@@QAE@XZ PROC			; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT
; _this$ = ecx

; 13   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);
; 16   : 				this->value[1] = col_type(0, 1, 0, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1, 0);
; 18   : 				this->value[3] = col_type(0, 0, 0, 1);
; 19   : #			endif
; 20   : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	ret	0
??0?$tmat4x4@M$00@glm@@QAE@XZ ENDP			; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x4@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<double,2>::operator--, COMDAT
; _this$ = ecx

; 394  : 	{

	push	ebp
	mov	ebp, esp
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx

; 395  : 		tmat4x4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, 32					; 00000020H
	push	esi
	push	edi

; 396  : 		--*this;

	movups	xmm0, XMMWORD PTR [edx]
	mov	esi, edx
	mov	edi, eax
	rep movsd
	subpd	xmm0, xmm1
	pop	edi
	pop	esi
	movups	XMMWORD PTR [edx], xmm0
	movups	xmm0, XMMWORD PTR [edx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0
	movups	xmm0, XMMWORD PTR [edx+96]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+96], xmm0
	movups	xmm0, XMMWORD PTR [edx+112]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+112], xmm0

; 397  : 		return Result;
; 398  : 	}

	pop	ebp
	ret	8
??F?$tmat4x4@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x4@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<double,2>::operator++, COMDAT
; _this$ = ecx

; 386  : 	{

	push	ebp
	mov	ebp, esp
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	mov	edx, ecx

; 387  : 		tmat4x4<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, 32					; 00000020H
	push	esi
	push	edi

; 388  : 		++*this;

	movups	xmm0, XMMWORD PTR [edx]
	mov	esi, edx
	mov	edi, eax
	rep movsd
	addpd	xmm0, xmm1
	pop	edi
	pop	esi
	movups	XMMWORD PTR [edx], xmm0
	movups	xmm0, XMMWORD PTR [edx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+64], xmm0
	movups	xmm0, XMMWORD PTR [edx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+80], xmm0
	movups	xmm0, XMMWORD PTR [edx+96]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+96], xmm0
	movups	xmm0, XMMWORD PTR [edx+112]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [edx+112], xmm0

; 389  : 		return Result;
; 390  : 	}

	pop	ebp
	ret	8
??E?$tmat4x4@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x4@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x4<double,2>::operator--, COMDAT
; _this$ = ecx

; 377  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 378  : 		--this->value[1];
; 379  : 		--this->value[2];
; 380  : 		--this->value[3];
; 381  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx+96]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	xmm0, XMMWORD PTR [ecx+112]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+112], xmm0

; 382  : 	}

	ret	0
??F?$tmat4x4@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x4@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x4<double,2>::operator++, COMDAT
; _this$ = ecx

; 367  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 368  : 		++this->value[1];
; 369  : 		++this->value[2];
; 370  : 		++this->value[3];
; 371  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx+96]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	xmm0, XMMWORD PTR [ecx+112]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+112], xmm0

; 372  : 	}

	ret	0
??E?$tmat4x4@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z PROC	; glm::tmat4x4<double,2>::operator[], COMDAT
; _this$ = ecx

; 248  : 	{

	push	ebp
	mov	ebp, esp

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 251  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat4x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z PROC	; glm::tmat4x4<double,2>::operator[], COMDAT
; _this$ = ecx

; 241  : 	{

	push	ebp
	mov	ebp, esp

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 244  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat4x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@N$01@glm@@SAHXZ PROC			; glm::tmat4x4<double,2>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x4@N$01@glm@@SAHXZ ENDP			; glm::tmat4x4<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp

; 231  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movups	XMMWORD PTR [ecx+96], xmm3
	movups	XMMWORD PTR [ecx+112], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 232  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+48], xmm2

; 233  : 		this->value[2] = col_type(m[2], 0);

	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm2, QWORD PTR [eax+64]
	unpcklpd xmm2, xmm3
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+64], xmm1

; 234  : 		this->value[3] = col_type(m[3], 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+80], xmm2
	movsd	xmm2, QWORD PTR [eax+72]
	movsd	xmm0, QWORD PTR [eax+80]
	movsd	xmm3, QWORD PTR [eax+88]

; 235  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	unpcklpd xmm3, xmm1
	movups	XMMWORD PTR [ecx+96], xmm2
	movups	XMMWORD PTR [ecx+112], xmm3
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 221  : 	{

	push	ebp
	mov	ebp, esp

; 222  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 223  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+48]
	movups	XMMWORD PTR [ecx+48], xmm0

; 224  : 		this->value[2] = m[2];

	movups	xmm0, XMMWORD PTR [eax+64]
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax+80]

; 225  : 		this->value[3] = col_type(0, 0, 0, 1);
; 226  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+80], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 212  : 	{

	push	ebp
	mov	ebp, esp

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);
; 216  : 		this->value[3] = col_type(0, 0, 0, 1);
; 217  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp

; 204  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 205  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+48]

; 206  : 		this->value[2] = col_type(0, 0, 1, 0);
; 207  : 		this->value[3] = col_type(0, 0, 0, 1);
; 208  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 194  : 	{

	push	ebp
	mov	ebp, esp

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);
; 199  : 	}

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp

; 186  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movups	XMMWORD PTR [ecx+96], xmm3
	movups	XMMWORD PTR [ecx+112], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 187  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);
; 189  : 		this->value[3] = col_type(0, 0, 0, 1);
; 190  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp

; 177  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movups	XMMWORD PTR [ecx+96], xmm3
	movups	XMMWORD PTR [ecx+112], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 178  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+48], xmm2

; 179  : 		this->value[2] = col_type(m[2], 0);

	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm2, QWORD PTR [eax+64]

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);
; 181  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+80], xmm2
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);
; 171  : 		this->value[3] = col_type(0, 0, 0, 1);
; 172  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@000@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp

; 81   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 82   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 83   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 84   : 		this->value[3] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 85   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+112], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@000@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABN000000000000000@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
_x3$ = 56						; size = 4
_y3$ = 60						; size = 4
_z3$ = 64						; size = 4
_w3$ = 68						; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABN000000000000000@Z PROC	; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	mov	eax, DWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movsd	xmm3, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _w0$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	eax, DWORD PTR _x1$[ebp]
	movups	XMMWORD PTR [ecx], xmm3
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+16], xmm2
	movsd	xmm3, QWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _w1$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	eax, DWORD PTR _x2$[ebp]
	movups	XMMWORD PTR [ecx+32], xmm3
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movsd	xmm3, QWORD PTR [eax]
	mov	eax, DWORD PTR _y2$[ebp]
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _w2$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	eax, DWORD PTR _x3$[ebp]
	movups	XMMWORD PTR [ecx+64], xmm3
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+80], xmm2
	movsd	xmm3, QWORD PTR [eax]
	mov	eax, DWORD PTR _y3$[ebp]
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _w3$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 70   : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+96], xmm3
	movups	XMMWORD PTR [ecx+112], xmm2
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x4@N$01@glm@@QAE@ABN000000000000000@Z ENDP	; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@ABN@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_s$ = 8							; size = 4
??0?$tmat4x4@N$01@glm@@QAE@ABN@Z PROC			; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 50   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	eax, DWORD PTR _s$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movups	XMMWORD PTR [ecx+96], xmm3
	movups	XMMWORD PTR [ecx+112], xmm3
	movsd	xmm0, QWORD PTR [eax]
	xorps	xmm2, xmm2
	movsd	QWORD PTR $T1[ebp], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movsd	QWORD PTR $T1[ebp+24], xmm3
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	movsd	xmm1, QWORD PTR [eax]
	movaps	xmm0, xmm3
	unpcklpd xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm2

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	movsd	xmm1, QWORD PTR [eax]
	xorps	xmm0, xmm0
	unpcklpd xmm1, xmm3
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	movsd	xmm0, QWORD PTR [eax]
	xorps	xmm1, xmm1
	unpcklpd xmm3, xmm0

; 55   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+96], xmm1
	movups	XMMWORD PTR [ecx+112], xmm3
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@ABN@Z ENDP			; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x4@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 46   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	ret	4
??0?$tmat4x4@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat4x4@N$01@glm@@QAE@XZ PROC			; glm::tmat4x4<double,2>::tmat4x4<double,2>, COMDAT
; _this$ = ecx

; 13   : 		{

	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);
; 16   : 				this->value[1] = col_type(0, 1, 0, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1, 0);
; 18   : 				this->value[3] = col_type(0, 0, 0, 1);
; 19   : #			endif
; 20   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+96], xmm0
	movups	XMMWORD PTR [ecx+112], xmm1
	ret	0
??0?$tmat4x4@N$01@glm@@QAE@XZ ENDP			; glm::tmat4x4<double,2>::tmat4x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x4@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<float,2>::operator--, COMDAT
; _this$ = ecx

; 394  : 	{

	push	ebp
	mov	ebp, esp

; 395  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0

; 396  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 397  : 		return Result;
; 398  : 	}

	pop	ebp
	ret	8
??F?$tmat4x4@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x4@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x4<float,2>::operator++, COMDAT
; _this$ = ecx

; 386  : 	{

	push	ebp
	mov	ebp, esp

; 387  : 		tmat4x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0

; 388  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 389  : 		return Result;
; 390  : 	}

	pop	ebp
	ret	8
??E?$tmat4x4@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??F?$tmat4x4@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x4@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x4<float,2>::operator--, COMDAT
; _this$ = ecx

; 377  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 378  : 		--this->value[1];
; 379  : 		--this->value[2];
; 380  : 		--this->value[3];
; 381  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 382  : 	}

	ret	0
??F?$tmat4x4@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??E?$tmat4x4@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x4@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x4<float,2>::operator++, COMDAT
; _this$ = ecx

; 367  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 368  : 		++this->value[1];
; 369  : 		++this->value[2];
; 370  : 		++this->value[3];
; 371  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 372  : 	}

	ret	0
??E?$tmat4x4@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z PROC	; glm::tmat4x4<float,2>::operator[], COMDAT
; _this$ = ecx

; 248  : 	{

	push	ebp
	mov	ebp, esp

; 249  : 		assert(i < this->length());
; 250  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 251  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat4x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z PROC	; glm::tmat4x4<float,2>::operator[], COMDAT
; _this$ = ecx

; 241  : 	{

	push	ebp
	mov	ebp, esp

; 242  : 		assert(i < this->length());
; 243  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 244  : 	}

	pop	ebp
	ret	4
??A?$tmat4x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat4x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$01@glm@@SAHXZ PROC			; glm::tmat4x4<float,2>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x4@M$01@glm@@SAHXZ ENDP			; glm::tmat4x4<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 231  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	mov	DWORD PTR $T4[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T4[ebp]

; 232  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T3[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 233  : 		this->value[2] = col_type(m[2], 0);

	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 234  : 		this->value[3] = col_type(m[3], 1);

	mov	DWORD PTR $T1[ebp+12], 1065353216	; 3f800000H
	movups	XMMWORD PTR [ecx+32], xmm0
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+40]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+44]

; 235  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 221  : 	{

	push	ebp
	mov	ebp, esp

; 222  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 223  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 224  : 		this->value[2] = m[2];

	movups	xmm0, XMMWORD PTR [eax+32]

; 225  : 		this->value[3] = col_type(0, 0, 0, 1);
; 226  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 212  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);
; 216  : 		this->value[3] = col_type(0, 0, 0, 1);
; 217  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 203  : 	{

	push	ebp
	mov	ebp, esp

; 204  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 205  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]

; 206  : 		this->value[2] = col_type(0, 0, 1, 0);
; 207  : 		this->value[3] = col_type(0, 0, 0, 1);
; 208  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 194  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);
; 199  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 186  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 187  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);
; 189  : 		this->value[3] = col_type(0, 0, 0, 1);
; 190  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 177  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 178  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 179  : 		this->value[2] = col_type(m[2], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);
; 181  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);
; 171  : 		this->value[3] = col_type(0, 0, 0, 1);
; 172  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@000@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 80   : 	{

	push	ebp
	mov	ebp, esp

; 81   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movups	xmm0, XMMWORD PTR [eax]

; 82   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 83   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 84   : 		this->value[3] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 85   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@000@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABM000000000000000@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
_x3$ = 56						; size = 4
_y3$ = 60						; size = 4
_z3$ = 64						; size = 4
_w3$ = 68						; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABM000000000000000@Z PROC	; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T4[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w0$[ebp]
	movss	DWORD PTR $T4[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	eax, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T4[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T4[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	eax, DWORD PTR _x2$[ebp]
	movss	DWORD PTR $T3[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T3[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y2$[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w2$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	eax, DWORD PTR _x3$[ebp]
	movss	DWORD PTR $T2[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y3$[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _w3$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR [eax]

; 70   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x4@M$01@glm@@QAE@ABM000000000000000@Z ENDP	; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@ABM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
$T4 = -16						; size = 16
_s$ = 8							; size = 4
??0?$tmat4x4@M$01@glm@@QAE@ABM@Z PROC			; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 50   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T4[ebp], xmm0
	mov	DWORD PTR $T4[ebp+4], 0
	mov	DWORD PTR $T4[ebp+8], 0
	mov	DWORD PTR $T4[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T4[ebp]

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	mov	DWORD PTR $T3[ebp], 0
	mov	DWORD PTR $T3[ebp+8], 0
	movups	XMMWORD PTR [ecx], xmm0
	mov	DWORD PTR $T3[ebp+12], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR $T2[ebp+4], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	mov	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR $T1[ebp+4], 0
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	DWORD PTR $T1[ebp+8], 0
	movss	xmm0, DWORD PTR [eax]

; 55   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@ABM@Z ENDP			; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x4@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 46   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	ret	4
??0?$tmat4x4@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat4x4@M$01@glm@@QAE@XZ PROC			; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT
; _this$ = ecx

; 13   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);
; 16   : 				this->value[1] = col_type(0, 1, 0, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1, 0);
; 18   : 				this->value[3] = col_type(0, 0, 0, 1);
; 19   : #			endif
; 20   : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	ret	0
??0?$tmat4x4@M$01@glm@@QAE@XZ ENDP			; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x3@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<double,0>::operator--, COMDAT
; _this$ = ecx

; 346  : 	{

	push	ebp
	mov	ebp, esp

; 347  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 348  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	movups	XMMWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	movups	XMMWORD PTR [eax+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 349  : 		return Result;
; 350  : 	}

	pop	ebp
	ret	8
??F?$tmat4x3@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x3@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<double,0>::operator++, COMDAT
; _this$ = ecx

; 338  : 	{

	push	ebp
	mov	ebp, esp

; 339  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 340  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	movups	XMMWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	movups	XMMWORD PTR [eax+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 341  : 		return Result;
; 342  : 	}

	pop	ebp
	ret	8
??E?$tmat4x3@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x3@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x3<double,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 334  : 	}

	ret	0
??F?$tmat4x3@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x3@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x3<double,0>::operator++, COMDAT
; _this$ = ecx

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 324  : 	}

	ret	0
??E?$tmat4x3@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z PROC	; glm::tmat4x3<double,0>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z ENDP	; glm::tmat4x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z PROC	; glm::tmat4x3<double,0>::operator[], COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 214  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z ENDP	; glm::tmat4x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@N$0A@@glm@@SAHXZ PROC			; glm::tmat4x3<double,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x3@N$0A@@glm@@SAHXZ ENDP			; glm::tmat4x3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 200  : 	{

	push	ebp
	mov	ebp, esp

; 201  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 202  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1

; 203  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm2, QWORD PTR [eax+64]
	movsd	xmm1, QWORD PTR [eax+80]

; 204  : 		this->value[3] = col_type(0);
; 205  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm3
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp

; 192  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm3

; 193  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1

; 194  : 		this->value[2] = col_type(m[2], 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movq	QWORD PTR [ecx+40], xmm3
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1

; 195  : 		this->value[3] = col_type(m[3], 0);

	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm0, QWORD PTR [eax+56]

; 196  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+72], xmm1
	movq	QWORD PTR [ecx+88], xmm3
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp

; 183  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 184  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]

; 185  : 		this->value[2] = col_type(0, 0, 1);
; 186  : 		this->value[3] = col_type(0);
; 187  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm3
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp

; 174  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm3

; 175  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1

; 176  : 		this->value[2] = col_type(m[2], 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movq	QWORD PTR [ecx+40], xmm3
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]

; 177  : 		this->value[3] = col_type(0);
; 178  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm3
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp

; 165  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm2
	movups	xmm0, XMMWORD PTR [eax]
	movq	xmm1, QWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movq	QWORD PTR [ecx+16], xmm1

; 166  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	movq	xmm1, QWORD PTR [eax+40]

; 167  : 		this->value[2] = col_type(0, 0, 1);
; 168  : 		this->value[3] = col_type(0);
; 169  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+24], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm2
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp

; 156  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 157  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1

; 158  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm2, QWORD PTR [eax+64]
	movsd	xmm1, QWORD PTR [eax+80]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1

; 159  : 		this->value[3] = col_type(m[3]);

	movsd	xmm2, QWORD PTR [eax+96]
	movsd	xmm0, QWORD PTR [eax+104]
	movsd	xmm1, QWORD PTR [eax+112]

; 160  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+72], xmm2
	movq	QWORD PTR [ecx+88], xmm1
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp

; 147  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm2
	movups	xmm0, XMMWORD PTR [eax]
	movq	xmm1, QWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movq	QWORD PTR [ecx+16], xmm1

; 148  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	movq	xmm1, QWORD PTR [eax+40]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	QWORD PTR [ecx+40], xmm1

; 149  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+48]
	movq	xmm1, QWORD PTR [eax+64]

; 150  : 		this->value[3] = col_type(0);
; 151  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+88], xmm2
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp

; 138  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 139  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]

; 140  : 		this->value[2] = col_type(0, 0, 1);
; 141  : 		this->value[3] = col_type(0);
; 142  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+40], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm2
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@000@Z PROC ; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 80   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	QWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 81   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movq	QWORD PTR [ecx+40], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 82   : 		this->value[3] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	movq	QWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 83   : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+88], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@000@Z ENDP ; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABN00000000000@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
_x3$ = 44						; size = 4
_y3$ = 48						; size = 4
_z3$ = 52						; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABN00000000000@Z PROC	; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 63   : 	{

	push	ebp
	mov	ebp, esp

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	mov	eax, DWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm1, QWORD PTR [eax]

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	eax, DWORD PTR _x1$[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm1, QWORD PTR [eax]

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	eax, DWORD PTR _x2$[ebp]
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _y2$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm1, QWORD PTR [eax]

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	eax, DWORD PTR _x3$[ebp]
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _y3$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm1, QWORD PTR [eax]

; 68   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+72], xmm2
	movq	QWORD PTR [ecx+88], xmm1
	pop	ebp
	ret	48					; 00000030H
??0?$tmat4x3@N$0A@@glm@@QAE@ABN00000000000@Z ENDP	; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@ABN@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_s$ = 8							; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@ABN@Z PROC			; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 49   : 		this->value[0] = col_type(s, 0, 0);

	mov	eax, DWORD PTR _s$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm2
	movsd	xmm0, QWORD PTR [eax]
	xorps	xmm1, xmm1
	movsd	QWORD PTR $T1[ebp], xmm0
	movups	XMMWORD PTR $T1[ebp+8], xmm1
	movups	xmm0, XMMWORD PTR $T1[ebp]
	unpckhpd xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movq	QWORD PTR [ecx+16], xmm1

; 50   : 		this->value[1] = col_type(0, s, 0);

	movaps	xmm0, xmm2
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm0, xmm1
	movups	XMMWORD PTR [ecx+24], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+40], xmm2

; 51   : 		this->value[2] = col_type(0, 0, s);

	movsd	xmm1, QWORD PTR [eax]

; 52   : 		this->value[3] = col_type(0, 0, 0);
; 53   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm2
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@ABN@Z ENDP			; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x3@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 44   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	ret	4
??0?$tmat4x3@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat4x3@N$0A@@glm@@QAE@XZ PROC			; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm2, xmm2

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000

; 16   : 				this->value[3] = col_type(0, 0, 0);
; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm2
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+24], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+40], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm2
	ret	0
??0?$tmat4x3@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x3@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<float,0>::operator--, COMDAT
; _this$ = ecx

; 346  : 	{

	push	ebp
	mov	ebp, esp

; 347  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 348  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 349  : 		return Result;
; 350  : 	}

	pop	ebp
	ret	8
??F?$tmat4x3@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x3@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<float,0>::operator++, COMDAT
; _this$ = ecx

; 338  : 	{

	push	ebp
	mov	ebp, esp

; 339  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 340  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 341  : 		return Result;
; 342  : 	}

	pop	ebp
	ret	8
??E?$tmat4x3@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x3<float,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 334  : 	}

	ret	0
??F?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x3<float,0>::operator++, COMDAT
; _this$ = ecx

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 324  : 	}

	ret	0
??E?$tmat4x3@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z PROC	; glm::tmat4x3<float,0>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z ENDP	; glm::tmat4x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z PROC	; glm::tmat4x3<float,0>::operator[], COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 214  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z ENDP	; glm::tmat4x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x3<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 200  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx
	xorps	xmm3, xmm3

; 201  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]

; 202  : 		this->value[1] = col_type(m[1]);
; 203  : 		this->value[2] = col_type(m[2]);
; 204  : 		this->value[3] = col_type(0);

	unpcklps xmm3, xmm3
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T4[ebp+8], xmm0
	mov	eax, DWORD PTR $T4[ebp+8]
	mov	DWORD PTR [edx+8], eax
	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+12], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [edx+20], eax
	movss	xmm2, DWORD PTR [ecx+32]
	movss	xmm1, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [ecx+40]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+24], xmm2
	mov	DWORD PTR [edx+32], eax
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm3
	mov	DWORD PTR [edx+44], eax

; 205  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 192  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T4[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T4[ebp+8]

; 193  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T3[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 194  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm1, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR [ecx+20]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+24], xmm1
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+32], eax

; 195  : 		this->value[3] = col_type(m[3], 0);

	movss	xmm1, DWORD PTR [ecx+24]
	movss	xmm0, DWORD PTR [ecx+28]
	unpcklps xmm1, xmm0
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm1
	mov	DWORD PTR [edx+44], eax

; 196  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx
	xorps	xmm3, xmm3

; 183  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	mov	eax, DWORD PTR $T4[ebp+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	mov	DWORD PTR [edx+8], eax

; 184  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	DWORD PTR $T3[ebp+8], xmm0

; 185  : 		this->value[2] = col_type(0, 0, 1);

	movaps	xmm0, xmm3
	mov	eax, DWORD PTR $T3[ebp+8]
	unpcklps xmm2, xmm1
	unpcklps xmm0, xmm3
	movq	QWORD PTR [edx+12], xmm2
	mov	DWORD PTR [edx+20], eax
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+8]
	movq	QWORD PTR [edx+24], xmm0
	mov	DWORD PTR [edx+32], eax

; 186  : 		this->value[3] = col_type(0);

	unpcklps xmm3, xmm3
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm3
	mov	DWORD PTR [edx+44], eax

; 187  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 174  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T4[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR $T4[ebp+8]

; 175  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T3[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 176  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm1, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR [ecx+20]
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+24], xmm1
	mov	DWORD PTR [edx+32], eax

; 177  : 		this->value[3] = col_type(0);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm2
	mov	DWORD PTR [edx+44], eax

; 178  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 165  : 		this->value[0] = col_type(m[0]);
; 166  : 		this->value[1] = col_type(m[1]);
; 167  : 		this->value[2] = col_type(0, 0, 1);

	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm1, xmm1
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movq	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+8]
	movq	QWORD PTR [edx], xmm0
	mov	DWORD PTR [edx+8], eax
	movq	xmm0, QWORD PTR [ecx+12]
	mov	eax, DWORD PTR [ecx+20]
	movq	QWORD PTR [edx+12], xmm0
	movaps	xmm0, xmm1
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm0, xmm1
	movq	QWORD PTR [edx+24], xmm0
	mov	DWORD PTR [edx+32], eax

; 168  : 		this->value[3] = col_type(0);

	unpcklps xmm1, xmm1
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm1
	mov	DWORD PTR [edx+44], eax

; 169  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 156  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T4[ebp+8], xmm0
	mov	eax, DWORD PTR $T4[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 157  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+12], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [edx+20], eax

; 158  : 		this->value[2] = col_type(m[2]);

	movss	xmm2, DWORD PTR [ecx+32]
	movss	xmm1, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [ecx+40]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+24], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+32], eax

; 159  : 		this->value[3] = col_type(m[3]);

	movss	xmm2, DWORD PTR [ecx+48]
	movss	xmm1, DWORD PTR [ecx+52]
	movss	xmm0, DWORD PTR [ecx+56]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm2
	mov	DWORD PTR [edx+44], eax

; 160  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 147  : 		this->value[0] = col_type(m[0]);
; 148  : 		this->value[1] = col_type(m[1]);
; 149  : 		this->value[2] = col_type(m[2]);
; 150  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm1, xmm1
	unpcklps xmm1, xmm1
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movq	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+8]
	movq	QWORD PTR [edx], xmm0
	mov	DWORD PTR [edx+8], eax
	movq	xmm0, QWORD PTR [ecx+12]
	mov	eax, DWORD PTR [ecx+20]
	movq	QWORD PTR [edx+12], xmm0
	mov	DWORD PTR [edx+20], eax
	movq	xmm0, QWORD PTR [ecx+24]
	mov	eax, DWORD PTR [ecx+32]
	movq	QWORD PTR [edx+24], xmm0
	mov	DWORD PTR [edx+32], eax
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm1
	mov	DWORD PTR [edx+44], eax

; 151  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 138  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T4[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR $T4[ebp+8]

; 139  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR $T3[ebp+8]
	unpcklps xmm1, xmm0

; 140  : 		this->value[2] = col_type(0, 0, 1);

	movaps	xmm0, xmm2
	unpcklps xmm0, xmm2
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+8]
	movq	QWORD PTR [edx+24], xmm0
	mov	DWORD PTR [edx+32], eax

; 141  : 		this->value[3] = col_type(0);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm2
	mov	DWORD PTR [edx+44], eax

; 142  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@000@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 80   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+20], eax

; 81   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+24], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+32], eax

; 82   : 		this->value[3] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+36], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+44], eax

; 83   : 	}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@000@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABM00000000000@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
_x3$ = 44						; size = 4
_y3$ = 48						; size = 4
_z3$ = 52						; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABM00000000000@Z PROC	; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 63   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm2, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	unpcklps xmm2, xmm1
	movss	xmm0, DWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm2
	movss	DWORD PTR $T4[ebp+8], xmm0
	mov	eax, DWORD PTR $T4[ebp+8]
	mov	DWORD PTR [ecx+8], eax

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	eax, DWORD PTR _x1$[ebp]
	movss	xmm2, DWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	unpcklps xmm2, xmm1
	movss	xmm0, DWORD PTR [eax]
	movq	QWORD PTR [ecx+12], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [ecx+20], eax

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	eax, DWORD PTR _x2$[ebp]
	movss	xmm2, DWORD PTR [eax]
	mov	eax, DWORD PTR _y2$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	unpcklps xmm2, xmm1
	movss	xmm0, DWORD PTR [eax]
	movq	QWORD PTR [ecx+24], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [ecx+32], eax

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	eax, DWORD PTR _x3$[ebp]
	movss	xmm2, DWORD PTR [eax]
	mov	eax, DWORD PTR _y3$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	unpcklps xmm2, xmm1
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+36], xmm2
	mov	DWORD PTR [ecx+44], eax

; 68   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat4x3@M$0A@@glm@@QAE@ABM00000000000@Z ENDP	; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@ABM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_s$ = 8							; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@ABM@Z PROC			; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 49   : 		this->value[0] = col_type(s, 0, 0);

	mov	DWORD PTR $T4[ebp+8], 0
	mov	ecx, DWORD PTR _s$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR $T4[ebp+8]

; 50   : 		this->value[1] = col_type(0, s, 0);

	movaps	xmm1, xmm2
	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm0, DWORD PTR [ecx]
	unpcklps xmm0, xmm2
	movq	QWORD PTR [edx], xmm0
	mov	DWORD PTR [edx+8], eax
	movss	xmm0, DWORD PTR [ecx]
	mov	eax, DWORD PTR $T3[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 51   : 		this->value[2] = col_type(0, 0, s);

	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movaps	xmm0, xmm2
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm0, xmm2
	movq	QWORD PTR [edx+24], xmm0
	mov	DWORD PTR [edx+32], eax

; 52   : 		this->value[3] = col_type(0, 0, 0);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm2
	mov	DWORD PTR [edx+44], eax

; 53   : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@ABM@Z ENDP			; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x3@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 44   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	ret	4
??0?$tmat4x3@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
??0?$tmat4x3@M$0A@@glm@@QAE@XZ PROC			; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	movss	xmm1, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	DWORD PTR [ecx], 0
	movaps	xmm0, xmm1
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	unpcklps xmm0, xmm2
	movq	QWORD PTR [ecx], xmm0

; 14   : 				this->value[1] = col_type(0, 1, 0);

	movaps	xmm0, xmm2
	unpcklps xmm0, xmm1
	movq	QWORD PTR [ecx+12], xmm0

; 15   : 				this->value[2] = col_type(0, 0, 1);

	movaps	xmm0, xmm2
	mov	DWORD PTR $T4[ebp+8], 0
	mov	eax, DWORD PTR $T4[ebp+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T3[ebp+8], 0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [ecx+20], eax
	unpcklps xmm0, xmm2
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+8]
	movq	QWORD PTR [ecx+24], xmm0
	mov	DWORD PTR [ecx+32], eax

; 16   : 				this->value[3] = col_type(0, 0, 0);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+36], xmm2
	mov	DWORD PTR [ecx+44], eax

; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x3@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x3@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<double,1>::operator--, COMDAT
; _this$ = ecx

; 346  : 	{

	push	ebp
	mov	ebp, esp

; 347  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 348  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	movups	XMMWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	movups	XMMWORD PTR [eax+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 349  : 		return Result;
; 350  : 	}

	pop	ebp
	ret	8
??F?$tmat4x3@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x3@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<double,1>::operator++, COMDAT
; _this$ = ecx

; 338  : 	{

	push	ebp
	mov	ebp, esp

; 339  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 340  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	movups	XMMWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	movups	XMMWORD PTR [eax+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 341  : 		return Result;
; 342  : 	}

	pop	ebp
	ret	8
??E?$tmat4x3@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x3@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x3<double,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 334  : 	}

	ret	0
??F?$tmat4x3@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x3@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x3<double,1>::operator++, COMDAT
; _this$ = ecx

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 324  : 	}

	ret	0
??E?$tmat4x3@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z PROC	; glm::tmat4x3<double,1>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat4x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z PROC	; glm::tmat4x3<double,1>::operator[], COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 214  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat4x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@N$00@glm@@SAHXZ PROC			; glm::tmat4x3<double,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x3@N$00@glm@@SAHXZ ENDP			; glm::tmat4x3<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 200  : 	{

	push	ebp
	mov	ebp, esp

; 201  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 202  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1

; 203  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm2, QWORD PTR [eax+64]
	movsd	xmm1, QWORD PTR [eax+80]

; 204  : 		this->value[3] = col_type(0);
; 205  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm3
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp

; 192  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm3

; 193  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1

; 194  : 		this->value[2] = col_type(m[2], 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movq	QWORD PTR [ecx+40], xmm3
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1

; 195  : 		this->value[3] = col_type(m[3], 0);

	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm0, QWORD PTR [eax+56]

; 196  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+72], xmm1
	movq	QWORD PTR [ecx+88], xmm3
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp

; 183  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 184  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]

; 185  : 		this->value[2] = col_type(0, 0, 1);
; 186  : 		this->value[3] = col_type(0);
; 187  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm3
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp

; 174  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm3

; 175  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1

; 176  : 		this->value[2] = col_type(m[2], 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movq	QWORD PTR [ecx+40], xmm3
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]

; 177  : 		this->value[3] = col_type(0);
; 178  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm3
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp

; 165  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm2
	movups	xmm0, XMMWORD PTR [eax]
	movq	xmm1, QWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movq	QWORD PTR [ecx+16], xmm1

; 166  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	movq	xmm1, QWORD PTR [eax+40]

; 167  : 		this->value[2] = col_type(0, 0, 1);
; 168  : 		this->value[3] = col_type(0);
; 169  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+24], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm2
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp

; 156  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 157  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1

; 158  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm2, QWORD PTR [eax+64]
	movsd	xmm1, QWORD PTR [eax+80]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1

; 159  : 		this->value[3] = col_type(m[3]);

	movsd	xmm2, QWORD PTR [eax+96]
	movsd	xmm0, QWORD PTR [eax+104]
	movsd	xmm1, QWORD PTR [eax+112]

; 160  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+72], xmm2
	movq	QWORD PTR [ecx+88], xmm1
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp

; 147  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm2
	movups	xmm0, XMMWORD PTR [eax]
	movq	xmm1, QWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movq	QWORD PTR [ecx+16], xmm1

; 148  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	movq	xmm1, QWORD PTR [eax+40]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	QWORD PTR [ecx+40], xmm1

; 149  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+48]
	movq	xmm1, QWORD PTR [eax+64]

; 150  : 		this->value[3] = col_type(0);
; 151  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+88], xmm2
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp

; 138  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 139  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]

; 140  : 		this->value[2] = col_type(0, 0, 1);
; 141  : 		this->value[3] = col_type(0);
; 142  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+40], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm2
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@000@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 80   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	QWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 81   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movq	QWORD PTR [ecx+40], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 82   : 		this->value[3] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	movq	QWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 83   : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+88], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@000@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABN00000000000@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
_x3$ = 44						; size = 4
_y3$ = 48						; size = 4
_z3$ = 52						; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABN00000000000@Z PROC	; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 63   : 	{

	push	ebp
	mov	ebp, esp

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	mov	eax, DWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm1, QWORD PTR [eax]

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	eax, DWORD PTR _x1$[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm1, QWORD PTR [eax]

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	eax, DWORD PTR _x2$[ebp]
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _y2$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm1, QWORD PTR [eax]

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	eax, DWORD PTR _x3$[ebp]
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _y3$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm1, QWORD PTR [eax]

; 68   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+72], xmm2
	movq	QWORD PTR [ecx+88], xmm1
	pop	ebp
	ret	48					; 00000030H
??0?$tmat4x3@N$00@glm@@QAE@ABN00000000000@Z ENDP	; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@ABN@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_s$ = 8							; size = 4
??0?$tmat4x3@N$00@glm@@QAE@ABN@Z PROC			; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 49   : 		this->value[0] = col_type(s, 0, 0);

	mov	eax, DWORD PTR _s$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm2
	movsd	xmm0, QWORD PTR [eax]
	xorps	xmm1, xmm1
	movsd	QWORD PTR $T1[ebp], xmm0
	movups	XMMWORD PTR $T1[ebp+8], xmm1
	movups	xmm0, XMMWORD PTR $T1[ebp]
	unpckhpd xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movq	QWORD PTR [ecx+16], xmm1

; 50   : 		this->value[1] = col_type(0, s, 0);

	movaps	xmm0, xmm2
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm0, xmm1
	movups	XMMWORD PTR [ecx+24], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+40], xmm2

; 51   : 		this->value[2] = col_type(0, 0, s);

	movsd	xmm1, QWORD PTR [eax]

; 52   : 		this->value[3] = col_type(0, 0, 0);
; 53   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm2
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@ABN@Z ENDP			; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x3@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 44   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	ret	4
??0?$tmat4x3@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat4x3@N$00@glm@@QAE@XZ PROC			; glm::tmat4x3<double,1>::tmat4x3<double,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm2, xmm2

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000

; 16   : 				this->value[3] = col_type(0, 0, 0);
; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm2
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+24], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+40], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm2
	ret	0
??0?$tmat4x3@N$00@glm@@QAE@XZ ENDP			; glm::tmat4x3<double,1>::tmat4x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x3@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<float,1>::operator--, COMDAT
; _this$ = ecx

; 346  : 	{

	push	ebp
	mov	ebp, esp

; 347  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 348  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 349  : 		return Result;
; 350  : 	}

	pop	ebp
	ret	8
??F?$tmat4x3@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x3@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<float,1>::operator++, COMDAT
; _this$ = ecx

; 338  : 	{

	push	ebp
	mov	ebp, esp

; 339  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 340  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 341  : 		return Result;
; 342  : 	}

	pop	ebp
	ret	8
??E?$tmat4x3@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x3@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x3<float,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 334  : 	}

	ret	0
??F?$tmat4x3@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x3@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x3<float,1>::operator++, COMDAT
; _this$ = ecx

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 324  : 	}

	ret	0
??E?$tmat4x3@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z PROC	; glm::tmat4x3<float,1>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat4x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z PROC	; glm::tmat4x3<float,1>::operator[], COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 214  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat4x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@M$00@glm@@SAHXZ PROC			; glm::tmat4x3<float,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x3@M$00@glm@@SAHXZ ENDP			; glm::tmat4x3<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 200  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx
	xorps	xmm3, xmm3

; 201  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]

; 202  : 		this->value[1] = col_type(m[1]);
; 203  : 		this->value[2] = col_type(m[2]);
; 204  : 		this->value[3] = col_type(0);

	unpcklps xmm3, xmm3
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T4[ebp+8], xmm0
	mov	eax, DWORD PTR $T4[ebp+8]
	mov	DWORD PTR [edx+8], eax
	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+12], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [edx+20], eax
	movss	xmm2, DWORD PTR [ecx+32]
	movss	xmm1, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [ecx+40]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+24], xmm2
	mov	DWORD PTR [edx+32], eax
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm3
	mov	DWORD PTR [edx+44], eax

; 205  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 192  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T4[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T4[ebp+8]

; 193  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T3[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 194  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm1, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR [ecx+20]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+24], xmm1
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+32], eax

; 195  : 		this->value[3] = col_type(m[3], 0);

	movss	xmm1, DWORD PTR [ecx+24]
	movss	xmm0, DWORD PTR [ecx+28]
	unpcklps xmm1, xmm0
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm1
	mov	DWORD PTR [edx+44], eax

; 196  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx
	xorps	xmm3, xmm3

; 183  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	mov	eax, DWORD PTR $T4[ebp+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	mov	DWORD PTR [edx+8], eax

; 184  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	DWORD PTR $T3[ebp+8], xmm0

; 185  : 		this->value[2] = col_type(0, 0, 1);

	movaps	xmm0, xmm3
	mov	eax, DWORD PTR $T3[ebp+8]
	unpcklps xmm2, xmm1
	unpcklps xmm0, xmm3
	movq	QWORD PTR [edx+12], xmm2
	mov	DWORD PTR [edx+20], eax
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+8]
	movq	QWORD PTR [edx+24], xmm0
	mov	DWORD PTR [edx+32], eax

; 186  : 		this->value[3] = col_type(0);

	unpcklps xmm3, xmm3
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm3
	mov	DWORD PTR [edx+44], eax

; 187  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 174  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T4[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR $T4[ebp+8]

; 175  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T3[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 176  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm1, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR [ecx+20]
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+24], xmm1
	mov	DWORD PTR [edx+32], eax

; 177  : 		this->value[3] = col_type(0);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm2
	mov	DWORD PTR [edx+44], eax

; 178  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 165  : 		this->value[0] = col_type(m[0]);
; 166  : 		this->value[1] = col_type(m[1]);
; 167  : 		this->value[2] = col_type(0, 0, 1);

	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm1, xmm1
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movq	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+8]
	movq	QWORD PTR [edx], xmm0
	mov	DWORD PTR [edx+8], eax
	movq	xmm0, QWORD PTR [ecx+12]
	mov	eax, DWORD PTR [ecx+20]
	movq	QWORD PTR [edx+12], xmm0
	movaps	xmm0, xmm1
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm0, xmm1
	movq	QWORD PTR [edx+24], xmm0
	mov	DWORD PTR [edx+32], eax

; 168  : 		this->value[3] = col_type(0);

	unpcklps xmm1, xmm1
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm1
	mov	DWORD PTR [edx+44], eax

; 169  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 156  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T4[ebp+8], xmm0
	mov	eax, DWORD PTR $T4[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 157  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+12], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [edx+20], eax

; 158  : 		this->value[2] = col_type(m[2]);

	movss	xmm2, DWORD PTR [ecx+32]
	movss	xmm1, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [ecx+40]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+24], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+32], eax

; 159  : 		this->value[3] = col_type(m[3]);

	movss	xmm2, DWORD PTR [ecx+48]
	movss	xmm1, DWORD PTR [ecx+52]
	movss	xmm0, DWORD PTR [ecx+56]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm2
	mov	DWORD PTR [edx+44], eax

; 160  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 147  : 		this->value[0] = col_type(m[0]);
; 148  : 		this->value[1] = col_type(m[1]);
; 149  : 		this->value[2] = col_type(m[2]);
; 150  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm1, xmm1
	unpcklps xmm1, xmm1
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movq	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+8]
	movq	QWORD PTR [edx], xmm0
	mov	DWORD PTR [edx+8], eax
	movq	xmm0, QWORD PTR [ecx+12]
	mov	eax, DWORD PTR [ecx+20]
	movq	QWORD PTR [edx+12], xmm0
	mov	DWORD PTR [edx+20], eax
	movq	xmm0, QWORD PTR [ecx+24]
	mov	eax, DWORD PTR [ecx+32]
	movq	QWORD PTR [edx+24], xmm0
	mov	DWORD PTR [edx+32], eax
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm1
	mov	DWORD PTR [edx+44], eax

; 151  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 138  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T4[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR $T4[ebp+8]

; 139  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR $T3[ebp+8]
	unpcklps xmm1, xmm0

; 140  : 		this->value[2] = col_type(0, 0, 1);

	movaps	xmm0, xmm2
	unpcklps xmm0, xmm2
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+8]
	movq	QWORD PTR [edx+24], xmm0
	mov	DWORD PTR [edx+32], eax

; 141  : 		this->value[3] = col_type(0);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm2
	mov	DWORD PTR [edx+44], eax

; 142  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@000@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 80   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+20], eax

; 81   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+24], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+32], eax

; 82   : 		this->value[3] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+36], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+44], eax

; 83   : 	}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@000@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABM00000000000@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
_x3$ = 44						; size = 4
_y3$ = 48						; size = 4
_z3$ = 52						; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABM00000000000@Z PROC	; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 63   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm2, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	unpcklps xmm2, xmm1
	movss	xmm0, DWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm2
	movss	DWORD PTR $T4[ebp+8], xmm0
	mov	eax, DWORD PTR $T4[ebp+8]
	mov	DWORD PTR [ecx+8], eax

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	eax, DWORD PTR _x1$[ebp]
	movss	xmm2, DWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	unpcklps xmm2, xmm1
	movss	xmm0, DWORD PTR [eax]
	movq	QWORD PTR [ecx+12], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [ecx+20], eax

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	eax, DWORD PTR _x2$[ebp]
	movss	xmm2, DWORD PTR [eax]
	mov	eax, DWORD PTR _y2$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	unpcklps xmm2, xmm1
	movss	xmm0, DWORD PTR [eax]
	movq	QWORD PTR [ecx+24], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [ecx+32], eax

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	eax, DWORD PTR _x3$[ebp]
	movss	xmm2, DWORD PTR [eax]
	mov	eax, DWORD PTR _y3$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	unpcklps xmm2, xmm1
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+36], xmm2
	mov	DWORD PTR [ecx+44], eax

; 68   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat4x3@M$00@glm@@QAE@ABM00000000000@Z ENDP	; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@ABM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_s$ = 8							; size = 4
??0?$tmat4x3@M$00@glm@@QAE@ABM@Z PROC			; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 49   : 		this->value[0] = col_type(s, 0, 0);

	mov	DWORD PTR $T4[ebp+8], 0
	mov	ecx, DWORD PTR _s$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR $T4[ebp+8]

; 50   : 		this->value[1] = col_type(0, s, 0);

	movaps	xmm1, xmm2
	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm0, DWORD PTR [ecx]
	unpcklps xmm0, xmm2
	movq	QWORD PTR [edx], xmm0
	mov	DWORD PTR [edx+8], eax
	movss	xmm0, DWORD PTR [ecx]
	mov	eax, DWORD PTR $T3[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 51   : 		this->value[2] = col_type(0, 0, s);

	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movaps	xmm0, xmm2
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm0, xmm2
	movq	QWORD PTR [edx+24], xmm0
	mov	DWORD PTR [edx+32], eax

; 52   : 		this->value[3] = col_type(0, 0, 0);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm2
	mov	DWORD PTR [edx+44], eax

; 53   : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@ABM@Z ENDP			; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x3@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 44   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	ret	4
??0?$tmat4x3@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
??0?$tmat4x3@M$00@glm@@QAE@XZ PROC			; glm::tmat4x3<float,1>::tmat4x3<float,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	movss	xmm1, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	DWORD PTR [ecx], 0
	movaps	xmm0, xmm1
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	unpcklps xmm0, xmm2
	movq	QWORD PTR [ecx], xmm0

; 14   : 				this->value[1] = col_type(0, 1, 0);

	movaps	xmm0, xmm2
	unpcklps xmm0, xmm1
	movq	QWORD PTR [ecx+12], xmm0

; 15   : 				this->value[2] = col_type(0, 0, 1);

	movaps	xmm0, xmm2
	mov	DWORD PTR $T4[ebp+8], 0
	mov	eax, DWORD PTR $T4[ebp+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T3[ebp+8], 0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [ecx+20], eax
	unpcklps xmm0, xmm2
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+8]
	movq	QWORD PTR [ecx+24], xmm0
	mov	DWORD PTR [ecx+32], eax

; 16   : 				this->value[3] = col_type(0, 0, 0);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+36], xmm2
	mov	DWORD PTR [ecx+44], eax

; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x3@M$00@glm@@QAE@XZ ENDP			; glm::tmat4x3<float,1>::tmat4x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x3@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<double,2>::operator--, COMDAT
; _this$ = ecx

; 346  : 	{

	push	ebp
	mov	ebp, esp

; 347  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 348  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	movups	XMMWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	movups	XMMWORD PTR [eax+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 349  : 		return Result;
; 350  : 	}

	pop	ebp
	ret	8
??F?$tmat4x3@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x3@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<double,2>::operator++, COMDAT
; _this$ = ecx

; 338  : 	{

	push	ebp
	mov	ebp, esp

; 339  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 340  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	movups	XMMWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	movups	XMMWORD PTR [eax+80], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 341  : 		return Result;
; 342  : 	}

	pop	ebp
	ret	8
??E?$tmat4x3@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x3@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x3<double,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 334  : 	}

	ret	0
??F?$tmat4x3@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x3@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x3<double,2>::operator++, COMDAT
; _this$ = ecx

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 324  : 	}

	ret	0
??E?$tmat4x3@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z PROC	; glm::tmat4x3<double,2>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat4x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z PROC	; glm::tmat4x3<double,2>::operator[], COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 214  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat4x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@N$01@glm@@SAHXZ PROC			; glm::tmat4x3<double,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x3@N$01@glm@@SAHXZ ENDP			; glm::tmat4x3<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 200  : 	{

	push	ebp
	mov	ebp, esp

; 201  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 202  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1

; 203  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm2, QWORD PTR [eax+64]
	movsd	xmm1, QWORD PTR [eax+80]

; 204  : 		this->value[3] = col_type(0);
; 205  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm3
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp

; 192  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm3

; 193  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1

; 194  : 		this->value[2] = col_type(m[2], 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movq	QWORD PTR [ecx+40], xmm3
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1

; 195  : 		this->value[3] = col_type(m[3], 0);

	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm0, QWORD PTR [eax+56]

; 196  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+72], xmm1
	movq	QWORD PTR [ecx+88], xmm3
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp

; 183  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 184  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]

; 185  : 		this->value[2] = col_type(0, 0, 1);
; 186  : 		this->value[3] = col_type(0);
; 187  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm3
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp

; 174  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm3

; 175  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1

; 176  : 		this->value[2] = col_type(m[2], 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movq	QWORD PTR [ecx+40], xmm3
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]

; 177  : 		this->value[3] = col_type(0);
; 178  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm3
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp

; 165  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm2
	movups	xmm0, XMMWORD PTR [eax]
	movq	xmm1, QWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movq	QWORD PTR [ecx+16], xmm1

; 166  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	movq	xmm1, QWORD PTR [eax+40]

; 167  : 		this->value[2] = col_type(0, 0, 1);
; 168  : 		this->value[3] = col_type(0);
; 169  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+24], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm2
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp

; 156  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 157  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1

; 158  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm2, QWORD PTR [eax+64]
	movsd	xmm1, QWORD PTR [eax+80]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1

; 159  : 		this->value[3] = col_type(m[3]);

	movsd	xmm2, QWORD PTR [eax+96]
	movsd	xmm0, QWORD PTR [eax+104]
	movsd	xmm1, QWORD PTR [eax+112]

; 160  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+72], xmm2
	movq	QWORD PTR [ecx+88], xmm1
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp

; 147  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm2
	movups	xmm0, XMMWORD PTR [eax]
	movq	xmm1, QWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movq	QWORD PTR [ecx+16], xmm1

; 148  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	movq	xmm1, QWORD PTR [eax+40]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	QWORD PTR [ecx+40], xmm1

; 149  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+48]
	movq	xmm1, QWORD PTR [eax+64]

; 150  : 		this->value[3] = col_type(0);
; 151  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+88], xmm2
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp

; 138  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 139  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]

; 140  : 		this->value[2] = col_type(0, 0, 1);
; 141  : 		this->value[3] = col_type(0);
; 142  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+40], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm2
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@000@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 80   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	QWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 81   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movq	QWORD PTR [ecx+40], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 82   : 		this->value[3] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	movq	QWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 83   : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+88], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@000@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABN00000000000@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
_x3$ = 44						; size = 4
_y3$ = 48						; size = 4
_z3$ = 52						; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABN00000000000@Z PROC	; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 63   : 	{

	push	ebp
	mov	ebp, esp

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	mov	eax, DWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm1, QWORD PTR [eax]

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	eax, DWORD PTR _x1$[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm1, QWORD PTR [eax]

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	eax, DWORD PTR _x2$[ebp]
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _y2$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm1, QWORD PTR [eax]

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	eax, DWORD PTR _x3$[ebp]
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	movsd	xmm2, QWORD PTR [eax]
	mov	eax, DWORD PTR _y3$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm1, QWORD PTR [eax]

; 68   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+72], xmm2
	movq	QWORD PTR [ecx+88], xmm1
	pop	ebp
	ret	48					; 00000030H
??0?$tmat4x3@N$01@glm@@QAE@ABN00000000000@Z ENDP	; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@ABN@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_s$ = 8							; size = 4
??0?$tmat4x3@N$01@glm@@QAE@ABN@Z PROC			; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 49   : 		this->value[0] = col_type(s, 0, 0);

	mov	eax, DWORD PTR _s$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm2
	movsd	xmm0, QWORD PTR [eax]
	xorps	xmm1, xmm1
	movsd	QWORD PTR $T1[ebp], xmm0
	movups	XMMWORD PTR $T1[ebp+8], xmm1
	movups	xmm0, XMMWORD PTR $T1[ebp]
	unpckhpd xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movq	QWORD PTR [ecx+16], xmm1

; 50   : 		this->value[1] = col_type(0, s, 0);

	movaps	xmm0, xmm2
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm0, xmm1
	movups	XMMWORD PTR [ecx+24], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+40], xmm2

; 51   : 		this->value[2] = col_type(0, 0, s);

	movsd	xmm1, QWORD PTR [eax]

; 52   : 		this->value[3] = col_type(0, 0, 0);
; 53   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm2
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@ABN@Z ENDP			; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x3@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 44   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	ret	4
??0?$tmat4x3@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat4x3@N$01@glm@@QAE@XZ PROC			; glm::tmat4x3<double,2>::tmat4x3<double,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm2, xmm2

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000

; 16   : 				this->value[3] = col_type(0, 0, 0);
; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm2
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+24], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+72], xmm0
	movq	QWORD PTR [ecx+40], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	movq	QWORD PTR [ecx+88], xmm2
	ret	0
??0?$tmat4x3@N$01@glm@@QAE@XZ ENDP			; glm::tmat4x3<double,2>::tmat4x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x3@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<float,2>::operator--, COMDAT
; _this$ = ecx

; 346  : 	{

	push	ebp
	mov	ebp, esp

; 347  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 348  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 349  : 		return Result;
; 350  : 	}

	pop	ebp
	ret	8
??F?$tmat4x3@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x3@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x3<float,2>::operator++, COMDAT
; _this$ = ecx

; 338  : 	{

	push	ebp
	mov	ebp, esp

; 339  : 		tmat4x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 340  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 341  : 		return Result;
; 342  : 	}

	pop	ebp
	ret	8
??E?$tmat4x3@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??F?$tmat4x3@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x3@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x3<float,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 330  : 		--this->value[1];
; 331  : 		--this->value[2];
; 332  : 		--this->value[3];
; 333  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 334  : 	}

	ret	0
??F?$tmat4x3@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??E?$tmat4x3@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x3@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x3<float,2>::operator++, COMDAT
; _this$ = ecx

; 319  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 320  : 		++this->value[1];
; 321  : 		++this->value[2];
; 322  : 		++this->value[3];
; 323  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 324  : 	}

	ret	0
??E?$tmat4x3@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z PROC	; glm::tmat4x3<float,2>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat4x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z PROC	; glm::tmat4x3<float,2>::operator[], COMDAT
; _this$ = ecx

; 211  : 	{

	push	ebp
	mov	ebp, esp

; 212  : 		assert(i < this->length());
; 213  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 214  : 	}

	pop	ebp
	ret	4
??A?$tmat4x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat4x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@M$01@glm@@SAHXZ PROC			; glm::tmat4x3<float,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x3@M$01@glm@@SAHXZ ENDP			; glm::tmat4x3<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 200  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx
	xorps	xmm3, xmm3

; 201  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]

; 202  : 		this->value[1] = col_type(m[1]);
; 203  : 		this->value[2] = col_type(m[2]);
; 204  : 		this->value[3] = col_type(0);

	unpcklps xmm3, xmm3
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T4[ebp+8], xmm0
	mov	eax, DWORD PTR $T4[ebp+8]
	mov	DWORD PTR [edx+8], eax
	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+12], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [edx+20], eax
	movss	xmm2, DWORD PTR [ecx+32]
	movss	xmm1, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [ecx+40]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+24], xmm2
	mov	DWORD PTR [edx+32], eax
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm3
	mov	DWORD PTR [edx+44], eax

; 205  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 192  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T4[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T4[ebp+8]

; 193  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T3[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 194  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm1, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR [ecx+20]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+24], xmm1
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+32], eax

; 195  : 		this->value[3] = col_type(m[3], 0);

	movss	xmm1, DWORD PTR [ecx+24]
	movss	xmm0, DWORD PTR [ecx+28]
	unpcklps xmm1, xmm0
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm1
	mov	DWORD PTR [edx+44], eax

; 196  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx
	xorps	xmm3, xmm3

; 183  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR $T4[ebp+8], xmm0
	mov	eax, DWORD PTR $T4[ebp+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	mov	DWORD PTR [edx+8], eax

; 184  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	DWORD PTR $T3[ebp+8], xmm0

; 185  : 		this->value[2] = col_type(0, 0, 1);

	movaps	xmm0, xmm3
	mov	eax, DWORD PTR $T3[ebp+8]
	unpcklps xmm2, xmm1
	unpcklps xmm0, xmm3
	movq	QWORD PTR [edx+12], xmm2
	mov	DWORD PTR [edx+20], eax
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+8]
	movq	QWORD PTR [edx+24], xmm0
	mov	DWORD PTR [edx+32], eax

; 186  : 		this->value[3] = col_type(0);

	unpcklps xmm3, xmm3
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm3
	mov	DWORD PTR [edx+44], eax

; 187  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 174  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T4[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR $T4[ebp+8]

; 175  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T3[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 176  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm1, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR [ecx+20]
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+24], xmm1
	mov	DWORD PTR [edx+32], eax

; 177  : 		this->value[3] = col_type(0);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm2
	mov	DWORD PTR [edx+44], eax

; 178  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 165  : 		this->value[0] = col_type(m[0]);
; 166  : 		this->value[1] = col_type(m[1]);
; 167  : 		this->value[2] = col_type(0, 0, 1);

	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm1, xmm1
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movq	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+8]
	movq	QWORD PTR [edx], xmm0
	mov	DWORD PTR [edx+8], eax
	movq	xmm0, QWORD PTR [ecx+12]
	mov	eax, DWORD PTR [ecx+20]
	movq	QWORD PTR [edx+12], xmm0
	movaps	xmm0, xmm1
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm0, xmm1
	movq	QWORD PTR [edx+24], xmm0
	mov	DWORD PTR [edx+32], eax

; 168  : 		this->value[3] = col_type(0);

	unpcklps xmm1, xmm1
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm1
	mov	DWORD PTR [edx+44], eax

; 169  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 156  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T4[ebp+8], xmm0
	mov	eax, DWORD PTR $T4[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 157  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+12], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [edx+20], eax

; 158  : 		this->value[2] = col_type(m[2]);

	movss	xmm2, DWORD PTR [ecx+32]
	movss	xmm1, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [ecx+40]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+24], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+32], eax

; 159  : 		this->value[3] = col_type(m[3]);

	movss	xmm2, DWORD PTR [ecx+48]
	movss	xmm1, DWORD PTR [ecx+52]
	movss	xmm0, DWORD PTR [ecx+56]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm2
	mov	DWORD PTR [edx+44], eax

; 160  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 147  : 		this->value[0] = col_type(m[0]);
; 148  : 		this->value[1] = col_type(m[1]);
; 149  : 		this->value[2] = col_type(m[2]);
; 150  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm1, xmm1
	unpcklps xmm1, xmm1
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movq	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+8]
	movq	QWORD PTR [edx], xmm0
	mov	DWORD PTR [edx+8], eax
	movq	xmm0, QWORD PTR [ecx+12]
	mov	eax, DWORD PTR [ecx+20]
	movq	QWORD PTR [edx+12], xmm0
	mov	DWORD PTR [edx+20], eax
	movq	xmm0, QWORD PTR [ecx+24]
	mov	eax, DWORD PTR [ecx+32]
	movq	QWORD PTR [edx+24], xmm0
	mov	DWORD PTR [edx+32], eax
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm1
	mov	DWORD PTR [edx+44], eax

; 151  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 138  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T4[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR $T4[ebp+8]

; 139  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm0, DWORD PTR [ecx+12]
	movss	xmm1, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR $T3[ebp+8]
	unpcklps xmm1, xmm0

; 140  : 		this->value[2] = col_type(0, 0, 1);

	movaps	xmm0, xmm2
	unpcklps xmm0, xmm2
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+8]
	movq	QWORD PTR [edx+24], xmm0
	mov	DWORD PTR [edx+32], eax

; 141  : 		this->value[3] = col_type(0);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm2
	mov	DWORD PTR [edx+44], eax

; 142  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@000@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 80   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+20], eax

; 81   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+24], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+32], eax

; 82   : 		this->value[3] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+36], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+44], eax

; 83   : 	}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@000@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABM00000000000@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
_x3$ = 44						; size = 4
_y3$ = 48						; size = 4
_z3$ = 52						; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABM00000000000@Z PROC	; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 63   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 64   : 		this->value[0] = col_type(x0, y0, z0);

	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm2, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mov	eax, DWORD PTR _z0$[ebp]
	unpcklps xmm2, xmm1
	movss	xmm0, DWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm2
	movss	DWORD PTR $T4[ebp+8], xmm0
	mov	eax, DWORD PTR $T4[ebp+8]
	mov	DWORD PTR [ecx+8], eax

; 65   : 		this->value[1] = col_type(x1, y1, z1);

	mov	eax, DWORD PTR _x1$[ebp]
	movss	xmm2, DWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mov	eax, DWORD PTR _z1$[ebp]
	unpcklps xmm2, xmm1
	movss	xmm0, DWORD PTR [eax]
	movq	QWORD PTR [ecx+12], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [ecx+20], eax

; 66   : 		this->value[2] = col_type(x2, y2, z2);

	mov	eax, DWORD PTR _x2$[ebp]
	movss	xmm2, DWORD PTR [eax]
	mov	eax, DWORD PTR _y2$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mov	eax, DWORD PTR _z2$[ebp]
	unpcklps xmm2, xmm1
	movss	xmm0, DWORD PTR [eax]
	movq	QWORD PTR [ecx+24], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [ecx+32], eax

; 67   : 		this->value[3] = col_type(x3, y3, z3);

	mov	eax, DWORD PTR _x3$[ebp]
	movss	xmm2, DWORD PTR [eax]
	mov	eax, DWORD PTR _y3$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mov	eax, DWORD PTR _z3$[ebp]
	unpcklps xmm2, xmm1
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+36], xmm2
	mov	DWORD PTR [ecx+44], eax

; 68   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat4x3@M$01@glm@@QAE@ABM00000000000@Z ENDP	; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@ABM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
_s$ = 8							; size = 4
??0?$tmat4x3@M$01@glm@@QAE@ABM@Z PROC			; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 49   : 		this->value[0] = col_type(s, 0, 0);

	mov	DWORD PTR $T4[ebp+8], 0
	mov	ecx, DWORD PTR _s$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR $T4[ebp+8]

; 50   : 		this->value[1] = col_type(0, s, 0);

	movaps	xmm1, xmm2
	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	movss	xmm0, DWORD PTR [ecx]
	unpcklps xmm0, xmm2
	movq	QWORD PTR [edx], xmm0
	mov	DWORD PTR [edx+8], eax
	movss	xmm0, DWORD PTR [ecx]
	mov	eax, DWORD PTR $T3[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 51   : 		this->value[2] = col_type(0, 0, s);

	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movaps	xmm0, xmm2
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm0, xmm2
	movq	QWORD PTR [edx+24], xmm0
	mov	DWORD PTR [edx+32], eax

; 52   : 		this->value[3] = col_type(0, 0, 0);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+36], xmm2
	mov	DWORD PTR [edx+44], eax

; 53   : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@ABM@Z ENDP			; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x3@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 44   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	ret	4
??0?$tmat4x3@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
$T4 = -12						; size = 12
??0?$tmat4x3@M$01@glm@@QAE@XZ PROC			; glm::tmat4x3<float,2>::tmat4x3<float,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	movss	xmm1, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	DWORD PTR [ecx], 0
	movaps	xmm0, xmm1
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	unpcklps xmm0, xmm2
	movq	QWORD PTR [ecx], xmm0

; 14   : 				this->value[1] = col_type(0, 1, 0);

	movaps	xmm0, xmm2
	unpcklps xmm0, xmm1
	movq	QWORD PTR [ecx+12], xmm0

; 15   : 				this->value[2] = col_type(0, 0, 1);

	movaps	xmm0, xmm2
	mov	DWORD PTR $T4[ebp+8], 0
	mov	eax, DWORD PTR $T4[ebp+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T3[ebp+8], 0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [ecx+20], eax
	unpcklps xmm0, xmm2
	mov	DWORD PTR $T2[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+8]
	movq	QWORD PTR [ecx+24], xmm0
	mov	DWORD PTR [ecx+32], eax

; 16   : 				this->value[3] = col_type(0, 0, 0);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+36], xmm2
	mov	DWORD PTR [ecx+44], eax

; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x3@M$01@glm@@QAE@XZ ENDP			; glm::tmat4x3<float,2>::tmat4x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x2@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<double,0>::operator--, COMDAT
; _this$ = ecx

; 353  : 	{

	push	ebp
	mov	ebp, esp

; 354  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 355  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 356  : 		return Result;
; 357  : 	}

	pop	ebp
	ret	8
??F?$tmat4x2@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x2@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<double,0>::operator++, COMDAT
; _this$ = ecx

; 345  : 	{

	push	ebp
	mov	ebp, esp

; 346  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 347  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 348  : 		return Result;
; 349  : 	}

	pop	ebp
	ret	8
??E?$tmat4x2@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x2@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x2<double,0>::operator--, COMDAT
; _this$ = ecx

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 341  : 	}

	ret	0
??F?$tmat4x2@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x2@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x2<double,0>::operator++, COMDAT
; _this$ = ecx

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 331  : 	}

	ret	0
??E?$tmat4x2@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z PROC	; glm::tmat4x2<double,0>::operator[], COMDAT
; _this$ = ecx

; 225  : 	{

	push	ebp
	mov	ebp, esp

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 228  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z ENDP	; glm::tmat4x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z PROC	; glm::tmat4x2<double,0>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z ENDP	; glm::tmat4x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@N$0A@@glm@@SAHXZ PROC			; glm::tmat4x2<double,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x2@N$0A@@glm@@SAHXZ ENDP			; glm::tmat4x2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 207  : 	{

	push	ebp
	mov	ebp, esp

; 208  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 209  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 210  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm1, QWORD PTR [eax+64]

; 211  : 		this->value[3] = col_type(0);
; 212  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp

; 199  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 200  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 201  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1

; 202  : 		this->value[3] = col_type(m[3]);

	movsd	xmm1, QWORD PTR [eax+72]
	movsd	xmm0, QWORD PTR [eax+80]

; 203  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 191  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]

; 192  : 		this->value[2] = col_type(0);
; 193  : 		this->value[3] = col_type(0);
; 194  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp

; 181  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 182  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 183  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+32]

; 184  : 		this->value[3] = col_type(0);
; 185  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp

; 172  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 173  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]

; 174  : 		this->value[2] = col_type(0);
; 175  : 		this->value[3] = col_type(0);
; 176  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp

; 163  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 164  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 165  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm1, QWORD PTR [eax+64]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1

; 166  : 		this->value[3] = col_type(m[3]);

	movsd	xmm1, QWORD PTR [eax+96]
	movsd	xmm0, QWORD PTR [eax+104]

; 167  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 153  : 	{

	push	ebp
	mov	ebp, esp

; 154  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 155  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 156  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]

; 157  : 		this->value[3] = col_type(0);
; 158  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 146  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+16]

; 147  : 		this->value[2] = col_type(0);
; 148  : 		this->value[3] = col_type(0);
; 149  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@000@Z PROC ; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 85   : 	{

	push	ebp
	mov	ebp, esp

; 86   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 87   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 88   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 89   : 		this->value[3] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 90   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@000@Z ENDP ; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@NNNNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_x1$ = 24						; size = 8
_y1$ = 32						; size = 8
_x2$ = 40						; size = 8
_y2$ = 48						; size = 8
_x3$ = 56						; size = 8
_y3$ = 64						; size = 8
??0?$tmat4x2@N$0A@@glm@@QAE@NNNNNNNN@Z PROC		; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp

; 71   : 		this->value[0] = col_type(x0, y0);

	movsd	xmm1, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0

; 72   : 		this->value[1] = col_type(x1, y1);
; 73   : 		this->value[2] = col_type(x2, y2);
; 74   : 		this->value[3] = col_type(x3, y3);
; 75   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm1, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	movups	XMMWORD PTR [ecx], xmm1
	movsd	xmm1, QWORD PTR _x1$[ebp]
	unpcklpd xmm1, xmm0
	movsd	xmm0, QWORD PTR _y2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm1
	movsd	xmm1, QWORD PTR _x2$[ebp]
	unpcklpd xmm1, xmm0
	movsd	xmm0, QWORD PTR _y3$[ebp]
	movups	XMMWORD PTR [ecx+32], xmm1
	movsd	xmm1, QWORD PTR _x3$[ebp]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x2@N$0A@@glm@@QAE@NNNNNNNN@Z ENDP		; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tmat4x2@N$0A@@glm@@QAE@N@Z PROC			; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp

; 56   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2

; 57   : 		this->value[1] = col_type(0, scalar);
; 58   : 		this->value[2] = col_type(0, 0);
; 59   : 		this->value[3] = col_type(0, 0);
; 60   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movaps	xmm0, xmm1
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [ecx], xmm0
	xorps	xmm0, xmm0
	unpcklpd xmm2, xmm1
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	8
??0?$tmat4x2@N$0A@@glm@@QAE@N@Z ENDP			; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x2@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 51   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	ret	4
??0?$tmat4x2@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat4x2@N$0A@@glm@@QAE@XZ PROC			; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT
; _this$ = ecx

; 18   : 		{

	xorps	xmm0, xmm0

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);
; 21   : 				this->value[1] = col_type(0, 1);
; 22   : 				this->value[2] = col_type(0, 0);
; 23   : 				this->value[3] = col_type(0, 0);
; 24   : #			endif
; 25   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	ret	0
??0?$tmat4x2@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x2@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<float,0>::operator--, COMDAT
; _this$ = ecx

; 353  : 	{

	push	ebp
	mov	ebp, esp

; 354  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 355  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 356  : 		return Result;
; 357  : 	}

	pop	ebp
	ret	8
??F?$tmat4x2@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x2@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<float,0>::operator++, COMDAT
; _this$ = ecx

; 345  : 	{

	push	ebp
	mov	ebp, esp

; 346  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 347  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 348  : 		return Result;
; 349  : 	}

	pop	ebp
	ret	8
??E?$tmat4x2@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x2<float,0>::operator--, COMDAT
; _this$ = ecx

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 341  : 	}

	ret	0
??F?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat4x2<float,0>::operator++, COMDAT
; _this$ = ecx

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 331  : 	}

	ret	0
??E?$tmat4x2@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat4x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z PROC	; glm::tmat4x2<float,0>::operator[], COMDAT
; _this$ = ecx

; 225  : 	{

	push	ebp
	mov	ebp, esp

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 228  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z ENDP	; glm::tmat4x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z PROC	; glm::tmat4x2<float,0>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z ENDP	; glm::tmat4x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x2<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 207  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 208  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 209  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 210  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 211  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 212  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 199  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 200  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 201  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 202  : 		this->value[3] = col_type(m[3]);

	movss	xmm0, DWORD PTR [ecx+36]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 203  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 190  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 191  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 192  : 		this->value[2] = col_type(0);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 193  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 194  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 181  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	push	esi
	mov	esi, ecx

; 182  : 		this->value[1] = col_type(m[1]);
; 183  : 		this->value[2] = col_type(m[2]);
; 184  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi+24], 0
	mov	DWORD PTR [esi+28], 0
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], ecx
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [esi+28], eax

; 185  : 	}

	mov	eax, esi
	mov	DWORD PTR [esi+20], ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 172  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 173  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 174  : 		this->value[2] = col_type(0);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 175  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 176  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 163  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 164  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 165  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 166  : 		this->value[3] = col_type(m[3]);

	movss	xmm0, DWORD PTR [ecx+48]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 167  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 153  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 154  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 155  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 156  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 157  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 158  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 145  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	push	esi
	mov	esi, ecx

; 146  : 		this->value[1] = col_type(m[1]);
; 147  : 		this->value[2] = col_type(0);

	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi+24], 0
	mov	DWORD PTR [esi+28], 0
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [esi+20], eax

; 148  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [esi+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [esi+28], eax

; 149  : 	}

	mov	eax, esi
	mov	DWORD PTR [esi+12], ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@000@Z PROC ; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 85   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 86   : 		this->value[0] = v0;

	mov	ecx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]

; 87   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+4]

; 88   : 		this->value[2] = v2;

	mov	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+4]

; 89   : 		this->value[3] = v3;

	mov	ecx, DWORD PTR _v3$[ebp]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+28], eax

; 90   : 	}

	mov	eax, edx
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@000@Z ENDP ; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
_x3$ = 32						; size = 4
_y3$ = 36						; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@MMMMMMMM@Z PROC		; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 71   : 		this->value[0] = col_type(x0, y0);

	movss	xmm0, DWORD PTR _x0$[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	mov	eax, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp+4], xmm0

; 72   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR _x1$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T4[ebp+4]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0

; 73   : 		this->value[2] = col_type(x2, y2);

	movss	xmm0, DWORD PTR _x2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y2$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0

; 74   : 		this->value[3] = col_type(x3, y3);

	movss	xmm0, DWORD PTR _x3$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y3$[ebp]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 75   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
??0?$tmat4x2@M$0A@@glm@@QAE@MMMMMMMM@Z ENDP		; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@M@Z PROC			; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 56   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	DWORD PTR $T4[ebp], xmm0
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T4[ebp+4], 0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 57   : 		this->value[1] = col_type(0, scalar);

	mov	DWORD PTR $T3[ebp], 0
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 58   : 		this->value[2] = col_type(0, 0);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 59   : 		this->value[3] = col_type(0, 0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 60   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@M@Z ENDP			; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x2@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 51   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	ret	4
??0?$tmat4x2@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
??0?$tmat4x2@M$0A@@glm@@QAE@XZ PROC			; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT
; _this$ = ecx

; 18   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);

	mov	DWORD PTR $T4[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T4[ebp+4], 0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 21   : 				this->value[1] = col_type(0, 1);

	mov	DWORD PTR $T3[ebp], 0
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T3[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 22   : 				this->value[2] = col_type(0, 0);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 23   : 				this->value[3] = col_type(0, 0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 24   : #			endif
; 25   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x2@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x2@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<double,1>::operator--, COMDAT
; _this$ = ecx

; 353  : 	{

	push	ebp
	mov	ebp, esp

; 354  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 355  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 356  : 		return Result;
; 357  : 	}

	pop	ebp
	ret	8
??F?$tmat4x2@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x2@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<double,1>::operator++, COMDAT
; _this$ = ecx

; 345  : 	{

	push	ebp
	mov	ebp, esp

; 346  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 347  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 348  : 		return Result;
; 349  : 	}

	pop	ebp
	ret	8
??E?$tmat4x2@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x2@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x2<double,1>::operator--, COMDAT
; _this$ = ecx

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 341  : 	}

	ret	0
??F?$tmat4x2@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x2@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x2<double,1>::operator++, COMDAT
; _this$ = ecx

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 331  : 	}

	ret	0
??E?$tmat4x2@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z PROC	; glm::tmat4x2<double,1>::operator[], COMDAT
; _this$ = ecx

; 225  : 	{

	push	ebp
	mov	ebp, esp

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 228  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat4x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z PROC	; glm::tmat4x2<double,1>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat4x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@N$00@glm@@SAHXZ PROC			; glm::tmat4x2<double,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x2@N$00@glm@@SAHXZ ENDP			; glm::tmat4x2<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 207  : 	{

	push	ebp
	mov	ebp, esp

; 208  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 209  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 210  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm1, QWORD PTR [eax+64]

; 211  : 		this->value[3] = col_type(0);
; 212  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp

; 199  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 200  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 201  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1

; 202  : 		this->value[3] = col_type(m[3]);

	movsd	xmm1, QWORD PTR [eax+72]
	movsd	xmm0, QWORD PTR [eax+80]

; 203  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 191  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]

; 192  : 		this->value[2] = col_type(0);
; 193  : 		this->value[3] = col_type(0);
; 194  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp

; 181  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 182  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 183  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+32]

; 184  : 		this->value[3] = col_type(0);
; 185  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp

; 172  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 173  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]

; 174  : 		this->value[2] = col_type(0);
; 175  : 		this->value[3] = col_type(0);
; 176  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp

; 163  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 164  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 165  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm1, QWORD PTR [eax+64]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1

; 166  : 		this->value[3] = col_type(m[3]);

	movsd	xmm1, QWORD PTR [eax+96]
	movsd	xmm0, QWORD PTR [eax+104]

; 167  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 153  : 	{

	push	ebp
	mov	ebp, esp

; 154  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 155  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 156  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]

; 157  : 		this->value[3] = col_type(0);
; 158  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 146  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+16]

; 147  : 		this->value[2] = col_type(0);
; 148  : 		this->value[3] = col_type(0);
; 149  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@000@Z PROC	; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 85   : 	{

	push	ebp
	mov	ebp, esp

; 86   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 87   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 88   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 89   : 		this->value[3] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 90   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@000@Z ENDP	; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@NNNNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_x1$ = 24						; size = 8
_y1$ = 32						; size = 8
_x2$ = 40						; size = 8
_y2$ = 48						; size = 8
_x3$ = 56						; size = 8
_y3$ = 64						; size = 8
??0?$tmat4x2@N$00@glm@@QAE@NNNNNNNN@Z PROC		; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp

; 71   : 		this->value[0] = col_type(x0, y0);

	movsd	xmm1, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0

; 72   : 		this->value[1] = col_type(x1, y1);
; 73   : 		this->value[2] = col_type(x2, y2);
; 74   : 		this->value[3] = col_type(x3, y3);
; 75   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm1, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	movups	XMMWORD PTR [ecx], xmm1
	movsd	xmm1, QWORD PTR _x1$[ebp]
	unpcklpd xmm1, xmm0
	movsd	xmm0, QWORD PTR _y2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm1
	movsd	xmm1, QWORD PTR _x2$[ebp]
	unpcklpd xmm1, xmm0
	movsd	xmm0, QWORD PTR _y3$[ebp]
	movups	XMMWORD PTR [ecx+32], xmm1
	movsd	xmm1, QWORD PTR _x3$[ebp]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x2@N$00@glm@@QAE@NNNNNNNN@Z ENDP		; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tmat4x2@N$00@glm@@QAE@N@Z PROC			; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp

; 56   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2

; 57   : 		this->value[1] = col_type(0, scalar);
; 58   : 		this->value[2] = col_type(0, 0);
; 59   : 		this->value[3] = col_type(0, 0);
; 60   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movaps	xmm0, xmm1
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [ecx], xmm0
	xorps	xmm0, xmm0
	unpcklpd xmm2, xmm1
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	8
??0?$tmat4x2@N$00@glm@@QAE@N@Z ENDP			; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x2@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 51   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	ret	4
??0?$tmat4x2@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat4x2@N$00@glm@@QAE@XZ PROC			; glm::tmat4x2<double,1>::tmat4x2<double,1>, COMDAT
; _this$ = ecx

; 18   : 		{

	xorps	xmm0, xmm0

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);
; 21   : 				this->value[1] = col_type(0, 1);
; 22   : 				this->value[2] = col_type(0, 0);
; 23   : 				this->value[3] = col_type(0, 0);
; 24   : #			endif
; 25   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	ret	0
??0?$tmat4x2@N$00@glm@@QAE@XZ ENDP			; glm::tmat4x2<double,1>::tmat4x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x2@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<float,1>::operator--, COMDAT
; _this$ = ecx

; 353  : 	{

	push	ebp
	mov	ebp, esp

; 354  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 355  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 356  : 		return Result;
; 357  : 	}

	pop	ebp
	ret	8
??F?$tmat4x2@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x2@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<float,1>::operator++, COMDAT
; _this$ = ecx

; 345  : 	{

	push	ebp
	mov	ebp, esp

; 346  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 347  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 348  : 		return Result;
; 349  : 	}

	pop	ebp
	ret	8
??E?$tmat4x2@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x2@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x2<float,1>::operator--, COMDAT
; _this$ = ecx

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 341  : 	}

	ret	0
??F?$tmat4x2@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x2@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat4x2<float,1>::operator++, COMDAT
; _this$ = ecx

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 331  : 	}

	ret	0
??E?$tmat4x2@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z PROC	; glm::tmat4x2<float,1>::operator[], COMDAT
; _this$ = ecx

; 225  : 	{

	push	ebp
	mov	ebp, esp

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 228  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat4x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z PROC	; glm::tmat4x2<float,1>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat4x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@M$00@glm@@SAHXZ PROC			; glm::tmat4x2<float,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x2@M$00@glm@@SAHXZ ENDP			; glm::tmat4x2<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 207  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 208  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 209  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 210  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 211  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 212  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 199  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 200  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 201  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 202  : 		this->value[3] = col_type(m[3]);

	movss	xmm0, DWORD PTR [ecx+36]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 203  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 190  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 191  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 192  : 		this->value[2] = col_type(0);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 193  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 194  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 181  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	push	esi
	mov	esi, ecx

; 182  : 		this->value[1] = col_type(m[1]);
; 183  : 		this->value[2] = col_type(m[2]);
; 184  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi+24], 0
	mov	DWORD PTR [esi+28], 0
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], ecx
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [esi+28], eax

; 185  : 	}

	mov	eax, esi
	mov	DWORD PTR [esi+20], ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 172  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 173  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 174  : 		this->value[2] = col_type(0);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 175  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 176  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 163  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 164  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 165  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 166  : 		this->value[3] = col_type(m[3]);

	movss	xmm0, DWORD PTR [ecx+48]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 167  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 153  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 154  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 155  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 156  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 157  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 158  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 145  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	push	esi
	mov	esi, ecx

; 146  : 		this->value[1] = col_type(m[1]);
; 147  : 		this->value[2] = col_type(0);

	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi+24], 0
	mov	DWORD PTR [esi+28], 0
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [esi+20], eax

; 148  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [esi+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [esi+28], eax

; 149  : 	}

	mov	eax, esi
	mov	DWORD PTR [esi+12], ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@000@Z PROC	; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 85   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 86   : 		this->value[0] = v0;

	mov	ecx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]

; 87   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+4]

; 88   : 		this->value[2] = v2;

	mov	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+4]

; 89   : 		this->value[3] = v3;

	mov	ecx, DWORD PTR _v3$[ebp]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+28], eax

; 90   : 	}

	mov	eax, edx
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@000@Z ENDP	; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
_x3$ = 32						; size = 4
_y3$ = 36						; size = 4
??0?$tmat4x2@M$00@glm@@QAE@MMMMMMMM@Z PROC		; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 71   : 		this->value[0] = col_type(x0, y0);

	movss	xmm0, DWORD PTR _x0$[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	mov	eax, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp+4], xmm0

; 72   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR _x1$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T4[ebp+4]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0

; 73   : 		this->value[2] = col_type(x2, y2);

	movss	xmm0, DWORD PTR _x2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y2$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0

; 74   : 		this->value[3] = col_type(x3, y3);

	movss	xmm0, DWORD PTR _x3$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y3$[ebp]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 75   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
??0?$tmat4x2@M$00@glm@@QAE@MMMMMMMM@Z ENDP		; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat4x2@M$00@glm@@QAE@M@Z PROC			; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 56   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	DWORD PTR $T4[ebp], xmm0
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T4[ebp+4], 0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 57   : 		this->value[1] = col_type(0, scalar);

	mov	DWORD PTR $T3[ebp], 0
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 58   : 		this->value[2] = col_type(0, 0);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 59   : 		this->value[3] = col_type(0, 0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 60   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@M@Z ENDP			; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x2@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 51   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	ret	4
??0?$tmat4x2@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
??0?$tmat4x2@M$00@glm@@QAE@XZ PROC			; glm::tmat4x2<float,1>::tmat4x2<float,1>, COMDAT
; _this$ = ecx

; 18   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);

	mov	DWORD PTR $T4[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T4[ebp+4], 0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 21   : 				this->value[1] = col_type(0, 1);

	mov	DWORD PTR $T3[ebp], 0
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T3[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 22   : 				this->value[2] = col_type(0, 0);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 23   : 				this->value[3] = col_type(0, 0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 24   : #			endif
; 25   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x2@M$00@glm@@QAE@XZ ENDP			; glm::tmat4x2<float,1>::tmat4x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x2@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<double,2>::operator--, COMDAT
; _this$ = ecx

; 353  : 	{

	push	ebp
	mov	ebp, esp

; 354  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 355  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 356  : 		return Result;
; 357  : 	}

	pop	ebp
	ret	8
??F?$tmat4x2@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x2@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<double,2>::operator++, COMDAT
; _this$ = ecx

; 345  : 	{

	push	ebp
	mov	ebp, esp

; 346  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 347  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 348  : 		return Result;
; 349  : 	}

	pop	ebp
	ret	8
??E?$tmat4x2@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x2@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x2<double,2>::operator--, COMDAT
; _this$ = ecx

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 341  : 	}

	ret	0
??F?$tmat4x2@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x2@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x2<double,2>::operator++, COMDAT
; _this$ = ecx

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 331  : 	}

	ret	0
??E?$tmat4x2@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z PROC	; glm::tmat4x2<double,2>::operator[], COMDAT
; _this$ = ecx

; 225  : 	{

	push	ebp
	mov	ebp, esp

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 228  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat4x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z PROC	; glm::tmat4x2<double,2>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat4x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@N$01@glm@@SAHXZ PROC			; glm::tmat4x2<double,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x2@N$01@glm@@SAHXZ ENDP			; glm::tmat4x2<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 207  : 	{

	push	ebp
	mov	ebp, esp

; 208  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 209  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 210  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm1, QWORD PTR [eax+64]

; 211  : 		this->value[3] = col_type(0);
; 212  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp

; 199  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 200  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 201  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1

; 202  : 		this->value[3] = col_type(m[3]);

	movsd	xmm1, QWORD PTR [eax+72]
	movsd	xmm0, QWORD PTR [eax+80]

; 203  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 191  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]

; 192  : 		this->value[2] = col_type(0);
; 193  : 		this->value[3] = col_type(0);
; 194  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp

; 181  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 182  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 183  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+32]

; 184  : 		this->value[3] = col_type(0);
; 185  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp

; 172  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 173  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]

; 174  : 		this->value[2] = col_type(0);
; 175  : 		this->value[3] = col_type(0);
; 176  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp

; 163  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 164  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 165  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm1, QWORD PTR [eax+64]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1

; 166  : 		this->value[3] = col_type(m[3]);

	movsd	xmm1, QWORD PTR [eax+96]
	movsd	xmm0, QWORD PTR [eax+104]

; 167  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 153  : 	{

	push	ebp
	mov	ebp, esp

; 154  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 155  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 156  : 		this->value[2] = col_type(m[2]);

	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm1, QWORD PTR [eax+48]

; 157  : 		this->value[3] = col_type(0);
; 158  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 146  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+16]

; 147  : 		this->value[2] = col_type(0);
; 148  : 		this->value[3] = col_type(0);
; 149  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@000@Z PROC	; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 85   : 	{

	push	ebp
	mov	ebp, esp

; 86   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 87   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 88   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 89   : 		this->value[3] = v3;

	mov	eax, DWORD PTR _v3$[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 90   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@000@Z ENDP	; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@NNNNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_x1$ = 24						; size = 8
_y1$ = 32						; size = 8
_x2$ = 40						; size = 8
_y2$ = 48						; size = 8
_x3$ = 56						; size = 8
_y3$ = 64						; size = 8
??0?$tmat4x2@N$01@glm@@QAE@NNNNNNNN@Z PROC		; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp

; 71   : 		this->value[0] = col_type(x0, y0);

	movsd	xmm1, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0

; 72   : 		this->value[1] = col_type(x1, y1);
; 73   : 		this->value[2] = col_type(x2, y2);
; 74   : 		this->value[3] = col_type(x3, y3);
; 75   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm1, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	movups	XMMWORD PTR [ecx], xmm1
	movsd	xmm1, QWORD PTR _x1$[ebp]
	unpcklpd xmm1, xmm0
	movsd	xmm0, QWORD PTR _y2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm1
	movsd	xmm1, QWORD PTR _x2$[ebp]
	unpcklpd xmm1, xmm0
	movsd	xmm0, QWORD PTR _y3$[ebp]
	movups	XMMWORD PTR [ecx+32], xmm1
	movsd	xmm1, QWORD PTR _x3$[ebp]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	64					; 00000040H
??0?$tmat4x2@N$01@glm@@QAE@NNNNNNNN@Z ENDP		; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tmat4x2@N$01@glm@@QAE@N@Z PROC			; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp

; 56   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2

; 57   : 		this->value[1] = col_type(0, scalar);
; 58   : 		this->value[2] = col_type(0, 0);
; 59   : 		this->value[3] = col_type(0, 0);
; 60   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movaps	xmm0, xmm1
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [ecx], xmm0
	xorps	xmm0, xmm0
	unpcklpd xmm2, xmm1
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	8
??0?$tmat4x2@N$01@glm@@QAE@N@Z ENDP			; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x2@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 51   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	ret	4
??0?$tmat4x2@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat4x2@N$01@glm@@QAE@XZ PROC			; glm::tmat4x2<double,2>::tmat4x2<double,2>, COMDAT
; _this$ = ecx

; 18   : 		{

	xorps	xmm0, xmm0

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);
; 21   : 				this->value[1] = col_type(0, 1);
; 22   : 				this->value[2] = col_type(0, 0);
; 23   : 				this->value[3] = col_type(0, 0);
; 24   : #			endif
; 25   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	ret	0
??0?$tmat4x2@N$01@glm@@QAE@XZ ENDP			; glm::tmat4x2<double,2>::tmat4x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat4x2@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<float,2>::operator--, COMDAT
; _this$ = ecx

; 353  : 	{

	push	ebp
	mov	ebp, esp

; 354  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 355  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 356  : 		return Result;
; 357  : 	}

	pop	ebp
	ret	8
??F?$tmat4x2@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat4x2@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat4x2<float,2>::operator++, COMDAT
; _this$ = ecx

; 345  : 	{

	push	ebp
	mov	ebp, esp

; 346  : 		tmat4x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 347  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 348  : 		return Result;
; 349  : 	}

	pop	ebp
	ret	8
??E?$tmat4x2@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat4x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??F?$tmat4x2@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat4x2@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x2<float,2>::operator--, COMDAT
; _this$ = ecx

; 336  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 337  : 		--this->value[1];
; 338  : 		--this->value[2];
; 339  : 		--this->value[3];
; 340  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 341  : 	}

	ret	0
??F?$tmat4x2@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??E?$tmat4x2@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat4x2@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat4x2<float,2>::operator++, COMDAT
; _this$ = ecx

; 326  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 327  : 		++this->value[1];
; 328  : 		++this->value[2];
; 329  : 		++this->value[3];
; 330  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 331  : 	}

	ret	0
??E?$tmat4x2@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat4x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z PROC	; glm::tmat4x2<float,2>::operator[], COMDAT
; _this$ = ecx

; 225  : 	{

	push	ebp
	mov	ebp, esp

; 226  : 		assert(i < this->length());
; 227  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 228  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat4x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat4x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z PROC	; glm::tmat4x2<float,2>::operator[], COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp

; 219  : 		assert(i < this->length());
; 220  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 221  : 	}

	pop	ebp
	ret	4
??A?$tmat4x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat4x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@M$01@glm@@SAHXZ PROC			; glm::tmat4x2<float,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tmat4x2@M$01@glm@@SAHXZ ENDP			; glm::tmat4x2<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 207  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 208  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 209  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 210  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 211  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 212  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 199  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 200  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 201  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 202  : 		this->value[3] = col_type(m[3]);

	movss	xmm0, DWORD PTR [ecx+36]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 203  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 190  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 191  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 192  : 		this->value[2] = col_type(0);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 193  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 194  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 181  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	push	esi
	mov	esi, ecx

; 182  : 		this->value[1] = col_type(m[1]);
; 183  : 		this->value[2] = col_type(m[2]);
; 184  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi+24], 0
	mov	DWORD PTR [esi+28], 0
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], ecx
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [esi+28], eax

; 185  : 	}

	mov	eax, esi
	mov	DWORD PTR [esi+20], ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 172  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 173  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 174  : 		this->value[2] = col_type(0);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 175  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 176  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 162  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 163  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 164  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 165  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 166  : 		this->value[3] = col_type(m[3]);

	movss	xmm0, DWORD PTR [ecx+48]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 167  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 153  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 154  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T4[ebp+4], xmm0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 155  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 156  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 157  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+28], eax

; 158  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 145  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	push	esi
	mov	esi, ecx

; 146  : 		this->value[1] = col_type(m[1]);
; 147  : 		this->value[2] = col_type(0);

	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi+24], 0
	mov	DWORD PTR [esi+28], 0
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [esi+20], eax

; 148  : 		this->value[3] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [esi+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [esi+28], eax

; 149  : 	}

	mov	eax, esi
	mov	DWORD PTR [esi+12], ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@000@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_v3$ = 20						; size = 4
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@000@Z PROC	; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 85   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 86   : 		this->value[0] = v0;

	mov	ecx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]

; 87   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+4]

; 88   : 		this->value[2] = v2;

	mov	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+4]

; 89   : 		this->value[3] = v3;

	mov	ecx, DWORD PTR _v3$[ebp]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+28], eax

; 90   : 	}

	mov	eax, edx
	pop	ebp
	ret	16					; 00000010H
??0?$tmat4x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@000@Z ENDP	; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
_x3$ = 32						; size = 4
_y3$ = 36						; size = 4
??0?$tmat4x2@M$01@glm@@QAE@MMMMMMMM@Z PROC		; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 71   : 		this->value[0] = col_type(x0, y0);

	movss	xmm0, DWORD PTR _x0$[ebp]
	movss	DWORD PTR $T4[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	mov	eax, DWORD PTR $T4[ebp]
	movss	DWORD PTR $T4[ebp+4], xmm0

; 72   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR _x1$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T4[ebp+4]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0

; 73   : 		this->value[2] = col_type(x2, y2);

	movss	xmm0, DWORD PTR _x2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y2$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0

; 74   : 		this->value[3] = col_type(x3, y3);

	movss	xmm0, DWORD PTR _x3$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y3$[ebp]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 75   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
??0?$tmat4x2@M$01@glm@@QAE@MMMMMMMM@Z ENDP		; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat4x2@M$01@glm@@QAE@M@Z PROC			; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 56   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	DWORD PTR $T4[ebp], xmm0
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T4[ebp+4], 0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 57   : 		this->value[1] = col_type(0, scalar);

	mov	DWORD PTR $T3[ebp], 0
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 58   : 		this->value[2] = col_type(0, 0);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 59   : 		this->value[3] = col_type(0, 0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 60   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@M@Z ENDP			; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat4x2@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 51   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	ret	4
??0?$tmat4x2@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
$T4 = -8						; size = 8
??0?$tmat4x2@M$01@glm@@QAE@XZ PROC			; glm::tmat4x2<float,2>::tmat4x2<float,2>, COMDAT
; _this$ = ecx

; 18   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);

	mov	DWORD PTR $T4[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T4[ebp+4], 0
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 21   : 				this->value[1] = col_type(0, 1);

	mov	DWORD PTR $T3[ebp], 0
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T3[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 22   : 				this->value[2] = col_type(0, 0);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 23   : 				this->value[3] = col_type(0, 0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 24   : #			endif
; 25   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat4x2@M$01@glm@@QAE@XZ ENDP			; glm::tmat4x2<float,2>::tmat4x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x4@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<double,0>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	movups	XMMWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	movups	XMMWORD PTR [eax+80], xmm0

; 316  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x4@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x4@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<double,0>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	movups	XMMWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	movups	XMMWORD PTR [eax+80], xmm0

; 308  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x4@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x4@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x4<double,0>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x4@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x4@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x4<double,0>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x4@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z PROC	; glm::tmat3x4<double,0>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z ENDP	; glm::tmat3x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z PROC	; glm::tmat3x4<double,0>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z ENDP	; glm::tmat3x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@N$0A@@glm@@SAHXZ PROC			; glm::tmat3x4<double,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x4@N$0A@@glm@@SAHXZ ENDP			; glm::tmat3x4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp

; 180  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 181  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+48], xmm2

; 182  : 		this->value[2] = col_type(m[2], 0);

	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm2, QWORD PTR [eax+64]

; 183  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+64], xmm1
	movups	XMMWORD PTR [ecx+80], xmm2
	pop	ebp
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 175  : 	}

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	xmm1, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 165  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [eax+48]

; 166  : 		this->value[2] = col_type(0, 0, 1, 0);
; 167  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 159  : 	}

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp

; 148  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 149  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);
; 151  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	xmm1, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 141  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [eax+48]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm1

; 142  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	movups	xmm1, XMMWORD PTR [eax+80]

; 143  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp

; 132  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 133  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+48], xmm2

; 134  : 		this->value[2] = col_type(m[2], 0);

	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm2, QWORD PTR [eax+64]

; 135  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+64], xmm1
	movups	XMMWORD PTR [ecx+80], xmm2
	pop	ebp
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);
; 127  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@00@Z PROC ; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 73   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 74   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 75   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+80], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@00@Z ENDP ; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@NNNNNNNNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_w0$ = 32						; size = 8
_x1$ = 40						; size = 8
_y1$ = 48						; size = 8
_z1$ = 56						; size = 8
_w1$ = 64						; size = 8
_x2$ = 72						; size = 8
_y2$ = 80						; size = 8
_z2$ = 88						; size = 8
_w2$ = 96						; size = 8
??0?$tmat3x4@N$0A@@glm@@QAE@NNNNNNNNNNNN@Z PROC		; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm2, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movsd	xmm1, QWORD PTR _w0$[ebp]

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	eax, ecx
	movsd	xmm3, QWORD PTR _z0$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm1, QWORD PTR _w1$[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movsd	xmm2, QWORD PTR _x1$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm3
	movsd	xmm3, QWORD PTR _z1$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y2$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm1, QWORD PTR _w2$[ebp]
	movups	XMMWORD PTR [ecx+32], xmm2
	movsd	xmm2, QWORD PTR _x2$[ebp]
	movups	XMMWORD PTR [ecx+48], xmm3
	movsd	xmm3, QWORD PTR _z2$[ebp]
	unpcklpd xmm2, xmm0
	unpcklpd xmm3, xmm1
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm3
	pop	ebp
	ret	96					; 00000060H
??0?$tmat3x4@N$0A@@glm@@QAE@NNNNNNNNNNNN@Z ENDP		; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_scalar$ = 8						; size = 8
??0?$tmat3x4@N$0A@@glm@@QAE@N@Z PROC			; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	movsd	xmm2, QWORD PTR _scalar$[ebp]
	xorps	xmm0, xmm0
	xorps	xmm3, xmm3
	movsd	QWORD PTR $T1[ebp], xmm2
	movups	XMMWORD PTR $T1[ebp+8], xmm0

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);
; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);
; 49   : 	}

	mov	eax, ecx
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR $T1[ebp+24], xmm3
	xorps	xmm1, xmm1
	movups	xmm0, XMMWORD PTR $T1[ebp+16]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, xmm3
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [ecx+32], xmm0
	xorps	xmm0, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	movups	XMMWORD PTR [ecx+80], xmm2
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat3x4@N$0A@@glm@@QAE@N@Z ENDP			; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x4@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 41   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	ret	4
??0?$tmat3x4@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat3x4@N$0A@@glm@@QAE@XZ PROC			; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1, 0);
; 16   : #			endif
; 17   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	ret	0
??0?$tmat3x4@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x4@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<float,0>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0

; 316  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x4@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x4@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<float,0>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0

; 308  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x4@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x4<float,0>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x4<float,0>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x4@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z PROC	; glm::tmat3x4<float,0>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z ENDP	; glm::tmat3x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z PROC	; glm::tmat3x4<float,0>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ENDP	; glm::tmat3x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x4<float,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 180  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 181  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 182  : 		this->value[2] = col_type(m[2], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 183  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 175  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 165  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+16]

; 166  : 		this->value[2] = col_type(0, 0, 1, 0);
; 167  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 159  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 148  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 149  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);
; 151  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 141  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 142  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+32]

; 143  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 132  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 133  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 134  : 		this->value[2] = col_type(m[2], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 135  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);
; 127  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@00@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movups	xmm0, XMMWORD PTR [eax]

; 73   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 74   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 75   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@00@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@MMMMMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@MMMMMMMMMMMM@Z PROC		; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w0$[ebp]
	movss	DWORD PTR $T3[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T2[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR _x2$[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y2$[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w2$[ebp]
	movss	DWORD PTR $T1[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat3x4@M$0A@@glm@@QAE@MMMMMMMMMMMM@Z ENDP		; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_scalar$ = 8						; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@M@Z PROC			; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	movss	xmm1, DWORD PTR _scalar$[ebp]

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);
; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);
; 49   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp], xmm1
	mov	DWORD PTR $T3[ebp+4], 0
	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR $T2[ebp], 0
	movss	DWORD PTR $T2[ebp+4], xmm1
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR $T1[ebp+4], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp+8], xmm1
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@M@Z ENDP			; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x4@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 41   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	ret	4
??0?$tmat3x4@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat3x4@M$0A@@glm@@QAE@XZ PROC			; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1, 0);
; 16   : #			endif
; 17   : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	ret	0
??0?$tmat3x4@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x4@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<double,1>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	movups	XMMWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	movups	XMMWORD PTR [eax+80], xmm0

; 316  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x4@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x4@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<double,1>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	movups	XMMWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	movups	XMMWORD PTR [eax+80], xmm0

; 308  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x4@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x4@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x4<double,1>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x4@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x4@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x4<double,1>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x4@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z PROC	; glm::tmat3x4<double,1>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat3x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z PROC	; glm::tmat3x4<double,1>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat3x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@N$00@glm@@SAHXZ PROC			; glm::tmat3x4<double,1>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x4@N$00@glm@@SAHXZ ENDP			; glm::tmat3x4<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp

; 180  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 181  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+48], xmm2

; 182  : 		this->value[2] = col_type(m[2], 0);

	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm2, QWORD PTR [eax+64]

; 183  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+64], xmm1
	movups	XMMWORD PTR [ecx+80], xmm2
	pop	ebp
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 175  : 	}

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	xmm1, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 165  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [eax+48]

; 166  : 		this->value[2] = col_type(0, 0, 1, 0);
; 167  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 159  : 	}

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp

; 148  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 149  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);
; 151  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	xmm1, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 141  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [eax+48]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm1

; 142  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	movups	xmm1, XMMWORD PTR [eax+80]

; 143  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp

; 132  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 133  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+48], xmm2

; 134  : 		this->value[2] = col_type(m[2], 0);

	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm2, QWORD PTR [eax+64]

; 135  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+64], xmm1
	movups	XMMWORD PTR [ecx+80], xmm2
	pop	ebp
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);
; 127  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@00@Z PROC	; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 73   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 74   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 75   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+80], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@00@Z ENDP	; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@NNNNNNNNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_w0$ = 32						; size = 8
_x1$ = 40						; size = 8
_y1$ = 48						; size = 8
_z1$ = 56						; size = 8
_w1$ = 64						; size = 8
_x2$ = 72						; size = 8
_y2$ = 80						; size = 8
_z2$ = 88						; size = 8
_w2$ = 96						; size = 8
??0?$tmat3x4@N$00@glm@@QAE@NNNNNNNNNNNN@Z PROC		; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm2, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movsd	xmm1, QWORD PTR _w0$[ebp]

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	eax, ecx
	movsd	xmm3, QWORD PTR _z0$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm1, QWORD PTR _w1$[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movsd	xmm2, QWORD PTR _x1$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm3
	movsd	xmm3, QWORD PTR _z1$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y2$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm1, QWORD PTR _w2$[ebp]
	movups	XMMWORD PTR [ecx+32], xmm2
	movsd	xmm2, QWORD PTR _x2$[ebp]
	movups	XMMWORD PTR [ecx+48], xmm3
	movsd	xmm3, QWORD PTR _z2$[ebp]
	unpcklpd xmm2, xmm0
	unpcklpd xmm3, xmm1
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm3
	pop	ebp
	ret	96					; 00000060H
??0?$tmat3x4@N$00@glm@@QAE@NNNNNNNNNNNN@Z ENDP		; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_scalar$ = 8						; size = 8
??0?$tmat3x4@N$00@glm@@QAE@N@Z PROC			; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	movsd	xmm2, QWORD PTR _scalar$[ebp]
	xorps	xmm0, xmm0
	xorps	xmm3, xmm3
	movsd	QWORD PTR $T1[ebp], xmm2
	movups	XMMWORD PTR $T1[ebp+8], xmm0

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);
; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);
; 49   : 	}

	mov	eax, ecx
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR $T1[ebp+24], xmm3
	xorps	xmm1, xmm1
	movups	xmm0, XMMWORD PTR $T1[ebp+16]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, xmm3
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [ecx+32], xmm0
	xorps	xmm0, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	movups	XMMWORD PTR [ecx+80], xmm2
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat3x4@N$00@glm@@QAE@N@Z ENDP			; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x4@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 41   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	ret	4
??0?$tmat3x4@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat3x4@N$00@glm@@QAE@XZ PROC			; glm::tmat3x4<double,1>::tmat3x4<double,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1, 0);
; 16   : #			endif
; 17   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	ret	0
??0?$tmat3x4@N$00@glm@@QAE@XZ ENDP			; glm::tmat3x4<double,1>::tmat3x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x4@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<float,1>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0

; 316  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x4@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x4@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<float,1>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0

; 308  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x4@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x4@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x4<float,1>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x4@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x4@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x4<float,1>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x4@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z PROC	; glm::tmat3x4<float,1>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat3x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z PROC	; glm::tmat3x4<float,1>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat3x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@M$00@glm@@SAHXZ PROC			; glm::tmat3x4<float,1>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x4@M$00@glm@@SAHXZ ENDP			; glm::tmat3x4<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 180  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 181  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 182  : 		this->value[2] = col_type(m[2], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 183  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 175  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 165  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+16]

; 166  : 		this->value[2] = col_type(0, 0, 1, 0);
; 167  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 159  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 148  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 149  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);
; 151  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 141  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 142  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+32]

; 143  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 132  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 133  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 134  : 		this->value[2] = col_type(m[2], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 135  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);
; 127  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@00@Z PROC	; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movups	xmm0, XMMWORD PTR [eax]

; 73   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 74   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 75   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@00@Z ENDP	; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@MMMMMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
??0?$tmat3x4@M$00@glm@@QAE@MMMMMMMMMMMM@Z PROC		; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w0$[ebp]
	movss	DWORD PTR $T3[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T2[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR _x2$[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y2$[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w2$[ebp]
	movss	DWORD PTR $T1[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat3x4@M$00@glm@@QAE@MMMMMMMMMMMM@Z ENDP		; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_scalar$ = 8						; size = 4
??0?$tmat3x4@M$00@glm@@QAE@M@Z PROC			; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	movss	xmm1, DWORD PTR _scalar$[ebp]

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);
; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);
; 49   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp], xmm1
	mov	DWORD PTR $T3[ebp+4], 0
	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR $T2[ebp], 0
	movss	DWORD PTR $T2[ebp+4], xmm1
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR $T1[ebp+4], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp+8], xmm1
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@M@Z ENDP			; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x4@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 41   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	ret	4
??0?$tmat3x4@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat3x4@M$00@glm@@QAE@XZ PROC			; glm::tmat3x4<float,1>::tmat3x4<float,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1, 0);
; 16   : #			endif
; 17   : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	ret	0
??0?$tmat3x4@M$00@glm@@QAE@XZ ENDP			; glm::tmat3x4<float,1>::tmat3x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x4@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<double,2>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	movups	XMMWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	movups	XMMWORD PTR [eax+80], xmm0

; 316  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x4@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x4@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<double,2>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	movups	XMMWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	movups	XMMWORD PTR [eax+80], xmm0

; 308  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x4@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x4@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x4<double,2>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x4@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x4@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x4<double,2>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [ecx+64]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx+80]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+80], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x4@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z PROC	; glm::tmat3x4<double,2>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat3x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z PROC	; glm::tmat3x4<double,2>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat3x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@N$01@glm@@SAHXZ PROC			; glm::tmat3x4<double,2>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x4@N$01@glm@@SAHXZ ENDP			; glm::tmat3x4<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp

; 180  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 181  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+48], xmm2

; 182  : 		this->value[2] = col_type(m[2], 0);

	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm2, QWORD PTR [eax+64]

; 183  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+64], xmm1
	movups	XMMWORD PTR [ecx+80], xmm2
	pop	ebp
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 175  : 	}

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	xmm1, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 165  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [eax+48]

; 166  : 		this->value[2] = col_type(0, 0, 1, 0);
; 167  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 159  : 	}

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp

; 148  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 149  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);
; 151  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	xmm1, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 141  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [eax+48]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm1

; 142  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+64]
	movups	xmm1, XMMWORD PTR [eax+80]

; 143  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp

; 132  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 133  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+40]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+48], xmm2

; 134  : 		this->value[2] = col_type(m[2], 0);

	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm0, QWORD PTR [eax+56]
	movsd	xmm2, QWORD PTR [eax+64]

; 135  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+64], xmm1
	movups	XMMWORD PTR [ecx+80], xmm2
	pop	ebp
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm2, QWORD PTR [eax+16]

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);
; 127  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	pop	ebp
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@00@Z PROC	; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 73   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 74   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 75   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+80], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@00@Z ENDP	; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@NNNNNNNNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_w0$ = 32						; size = 8
_x1$ = 40						; size = 8
_y1$ = 48						; size = 8
_z1$ = 56						; size = 8
_w1$ = 64						; size = 8
_x2$ = 72						; size = 8
_y2$ = 80						; size = 8
_z2$ = 88						; size = 8
_w2$ = 96						; size = 8
??0?$tmat3x4@N$01@glm@@QAE@NNNNNNNNNNNN@Z PROC		; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm2, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movsd	xmm1, QWORD PTR _w0$[ebp]

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	eax, ecx
	movsd	xmm3, QWORD PTR _z0$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm1, QWORD PTR _w1$[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movsd	xmm2, QWORD PTR _x1$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm3
	movsd	xmm3, QWORD PTR _z1$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y2$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm1, QWORD PTR _w2$[ebp]
	movups	XMMWORD PTR [ecx+32], xmm2
	movsd	xmm2, QWORD PTR _x2$[ebp]
	movups	XMMWORD PTR [ecx+48], xmm3
	movsd	xmm3, QWORD PTR _z2$[ebp]
	unpcklpd xmm2, xmm0
	unpcklpd xmm3, xmm1
	movups	XMMWORD PTR [ecx+64], xmm2
	movups	XMMWORD PTR [ecx+80], xmm3
	pop	ebp
	ret	96					; 00000060H
??0?$tmat3x4@N$01@glm@@QAE@NNNNNNNNNNNN@Z ENDP		; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_scalar$ = 8						; size = 8
??0?$tmat3x4@N$01@glm@@QAE@N@Z PROC			; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	movsd	xmm2, QWORD PTR _scalar$[ebp]
	xorps	xmm0, xmm0
	xorps	xmm3, xmm3
	movsd	QWORD PTR $T1[ebp], xmm2
	movups	XMMWORD PTR $T1[ebp+8], xmm0

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);
; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);
; 49   : 	}

	mov	eax, ecx
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR [ecx+64], xmm3
	movups	XMMWORD PTR [ecx+80], xmm3
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR $T1[ebp+24], xmm3
	xorps	xmm1, xmm1
	movups	xmm0, XMMWORD PTR $T1[ebp+16]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, xmm3
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [ecx+32], xmm0
	xorps	xmm0, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	movups	XMMWORD PTR [ecx+80], xmm2
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat3x4@N$01@glm@@QAE@N@Z ENDP			; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x4@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 41   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	ret	4
??0?$tmat3x4@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat3x4@N$01@glm@@QAE@XZ PROC			; glm::tmat3x4<double,2>::tmat3x4<double,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1, 0);
; 16   : #			endif
; 17   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	movaps	xmm1, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+64], xmm0
	movups	XMMWORD PTR [ecx+80], xmm1
	ret	0
??0?$tmat3x4@N$01@glm@@QAE@XZ ENDP			; glm::tmat3x4<double,2>::tmat3x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x4@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<float,2>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0

; 316  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x4@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x4@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x4<float,2>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0

; 308  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x4@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??F?$tmat3x4@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x4@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x4<float,2>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x4@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??E?$tmat3x4@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x4@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x4<float,2>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x4@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z PROC	; glm::tmat3x4<float,2>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat3x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z PROC	; glm::tmat3x4<float,2>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat3x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@M$01@glm@@SAHXZ PROC			; glm::tmat3x4<float,2>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x4@M$01@glm@@SAHXZ ENDP			; glm::tmat3x4<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 180  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 181  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 182  : 		this->value[2] = col_type(m[2], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 183  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 172  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 173  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 174  : 		this->value[2] = col_type(m[2], 1, 0);

	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 175  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 165  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+16]

; 166  : 		this->value[2] = col_type(0, 0, 1, 0);
; 167  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 156  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 157  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 158  : 		this->value[2] = col_type(m[2], 1, 0);

	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 159  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 148  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 149  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 150  : 		this->value[2] = col_type(0, 0, 1, 0);
; 151  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 141  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 142  : 		this->value[2] = col_type(m[2]);

	movups	xmm0, XMMWORD PTR [eax+32]

; 143  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 132  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 133  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 134  : 		this->value[2] = col_type(m[2], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+32]

; 135  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 124  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 125  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 126  : 		this->value[2] = col_type(0, 0, 1, 0);
; 127  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@00@Z PROC	; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movups	xmm0, XMMWORD PTR [eax]

; 73   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 74   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 75   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@00@Z ENDP	; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@MMMMMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
_x2$ = 40						; size = 4
_y2$ = 44						; size = 4
_z2$ = 48						; size = 4
_w2$ = 52						; size = 4
??0?$tmat3x4@M$01@glm@@QAE@MMMMMMMMMMMM@Z PROC		; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 59   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 60   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 61   : 		this->value[2] = col_type(x2, y2, z2, w2);
; 62   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T3[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w0$[ebp]
	movss	DWORD PTR $T3[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T2[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR _x2$[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y2$[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z2$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w2$[ebp]
	movss	DWORD PTR $T1[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0?$tmat3x4@M$01@glm@@QAE@MMMMMMMMMMMM@Z ENDP		; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
$T3 = -16						; size = 16
_scalar$ = 8						; size = 4
??0?$tmat3x4@M$01@glm@@QAE@M@Z PROC			; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	movss	xmm1, DWORD PTR _scalar$[ebp]

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);
; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);
; 49   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T3[ebp], xmm1
	mov	DWORD PTR $T3[ebp+4], 0
	mov	DWORD PTR $T3[ebp+8], 0
	mov	DWORD PTR $T3[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR $T2[ebp], 0
	movss	DWORD PTR $T2[ebp+4], xmm1
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], 0
	mov	DWORD PTR $T1[ebp+4], 0
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	DWORD PTR $T1[ebp+12], 0
	movss	DWORD PTR $T1[ebp+8], xmm1
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+32], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@M@Z ENDP			; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x4@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 41   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	ret	4
??0?$tmat3x4@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat3x4@M$01@glm@@QAE@XZ PROC			; glm::tmat3x4<float,2>::tmat3x4<float,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : 				this->value[2] = col_type(0, 0, 1, 0);
; 16   : #			endif
; 17   : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	ret	0
??0?$tmat3x4@M$01@glm@@QAE@XZ ENDP			; glm::tmat3x4<float,2>::tmat3x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x3@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<double,0>::operator--, COMDAT
; _this$ = ecx

; 330  : 	{

	push	ebp
	mov	ebp, esp

; 331  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 332  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movq	xmm0, QWORD PTR [ecx+64]
	movq	QWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 333  : 		return Result;
; 334  : 	}

	pop	ebp
	ret	8
??F?$tmat3x3@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x3@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<double,0>::operator++, COMDAT
; _this$ = ecx

; 322  : 	{

	push	ebp
	mov	ebp, esp

; 323  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 324  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movq	xmm0, QWORD PTR [ecx+64]
	movq	QWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 325  : 		return Result;
; 326  : 	}

	pop	ebp
	ret	8
??E?$tmat3x3@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x3@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x3<double,0>::operator--, COMDAT
; _this$ = ecx

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x3@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x3@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x3<double,0>::operator++, COMDAT
; _this$ = ecx

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 309  : 	}

	ret	0
??E?$tmat3x3@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z PROC	; glm::tmat3x3<double,0>::operator[], COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 201  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z ENDP	; glm::tmat3x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z PROC	; glm::tmat3x3<double,0>::operator[], COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 194  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z ENDP	; glm::tmat3x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@N$0A@@glm@@SAHXZ PROC			; glm::tmat3x3<double,0>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x3@N$0A@@glm@@SAHXZ ENDP			; glm::tmat3x3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 181  : 	{

	push	ebp
	mov	ebp, esp

; 182  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [ecx+16], xmm0

; 183  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+24]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+40]
	movq	QWORD PTR [ecx+40], xmm0

; 184  : 		this->value[2] = m[2];

	movups	xmm0, XMMWORD PTR [eax+48]
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	xmm0, QWORD PTR [eax+64]

; 185  : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+64], xmm0
	pop	ebp
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp

; 174  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 175  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1

; 176  : 		this->value[2] = col_type(m[2]);

	movsd	xmm2, QWORD PTR [eax+64]
	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm1, QWORD PTR [eax+80]

; 177  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp

; 166  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movsd	QWORD PTR [ecx+64], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 167  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1

; 168  : 		this->value[2] = col_type(m[2], 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movq	QWORD PTR [ecx+40], xmm2
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 169  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp

; 158  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 159  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]

; 160  : 		this->value[2] = col_type(0, 0, 1);
; 161  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 149  : 	{

	push	ebp
	mov	ebp, esp

; 150  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movsd	QWORD PTR [ecx+64], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 151  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1

; 152  : 		this->value[2] = col_type(m[2], 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movq	QWORD PTR [ecx+40], xmm2
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 153  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 141  : 	{

	push	ebp
	mov	ebp, esp

; 142  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0

; 143  : 		this->value[1] = m[1];
; 144  : 		this->value[2] = col_type(0, 0, 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax+24]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+40]

; 145  : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+40], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp

; 134  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 135  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1

; 136  : 		this->value[2] = col_type(m[2]);

	movsd	xmm2, QWORD PTR [eax+64]
	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm1, QWORD PTR [eax+80]

; 137  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 125  : 	{

	push	ebp
	mov	ebp, esp

; 126  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movsd	QWORD PTR [ecx+64], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 127  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]

; 128  : 		this->value[2] = col_type(0, 0, 1);
; 129  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+40], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@00@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 73   : 	{

	push	ebp
	mov	ebp, esp

; 74   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 75   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	QWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 76   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movq	QWORD PTR [ecx+40], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 77   : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+64], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@00@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@NNNNNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_x1$ = 32						; size = 8
_y1$ = 40						; size = 8
_z1$ = 48						; size = 8
_x2$ = 56						; size = 8
_y2$ = 64						; size = 8
_z2$ = 72						; size = 8
??0?$tmat3x3@N$0A@@glm@@QAE@NNNNNNNNN@Z PROC		; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movsd	xmm2, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movsd	xmm1, QWORD PTR _z0$[ebp]

; 62   : 		this->value[1] = col_type(x1, y1, z1);
; 63   : 		this->value[2] = col_type(x2, y2, z2);
; 64   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movsd	xmm2, QWORD PTR _x1$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y2$[ebp]
	movups	XMMWORD PTR [ecx+24], xmm2
	movsd	xmm2, QWORD PTR _x2$[ebp]
	movq	QWORD PTR [ecx+16], xmm1
	movsd	xmm1, QWORD PTR _z1$[ebp]
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR _z2$[ebp]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	72					; 00000048H
??0?$tmat3x3@N$0A@@glm@@QAE@NNNNNNNNN@Z ENDP		; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_scalar$ = 8						; size = 8
??0?$tmat3x3@N$0A@@glm@@QAE@N@Z PROC			; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	movsd	xmm2, QWORD PTR _scalar$[ebp]
	xorps	xmm3, xmm3
	xorps	xmm1, xmm1
	movsd	QWORD PTR $T1[ebp], xmm2
	movups	XMMWORD PTR [ecx], xmm3

; 49   : 		this->value[1] = col_type(0, scalar, 0);
; 50   : 		this->value[2] = col_type(0, 0, scalar);
; 51   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR $T1[ebp+8], xmm1
	movups	xmm0, XMMWORD PTR $T1[ebp]
	unpckhpd xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, xmm3
	movq	QWORD PTR [ecx+16], xmm1
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [ecx+24], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+40], xmm3
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+64], xmm2
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat3x3@N$0A@@glm@@QAE@N@Z ENDP			; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x3@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 43   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	ret	4
??0?$tmat3x3@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat3x3@N$0A@@glm@@QAE@XZ PROC			; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT
; _this$ = ecx

; 13   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);
; 16   : 				this->value[1] = col_type(0, 1, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1);
; 18   : #			endif
; 19   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	QWORD PTR [ecx+16], xmm1
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	ret	0
??0?$tmat3x3@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x3@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<float,0>::operator--, COMDAT
; _this$ = ecx

; 330  : 	{

	push	ebp
	mov	ebp, esp

; 331  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]

; 332  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	eax, DWORD PTR [ecx+32]
	movups	XMMWORD PTR [edx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [edx+16], xmm0
	mov	DWORD PTR [edx+32], eax

; 333  : 		return Result;

	mov	eax, edx
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 334  : 	}

	pop	ebp
	ret	8
??F?$tmat3x3@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x3@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<float,0>::operator++, COMDAT
; _this$ = ecx

; 322  : 	{

	push	ebp
	mov	ebp, esp

; 323  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]

; 324  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	eax, DWORD PTR [ecx+32]
	movups	XMMWORD PTR [edx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [edx+16], xmm0
	mov	DWORD PTR [edx+32], eax

; 325  : 		return Result;

	mov	eax, edx
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 326  : 	}

	pop	ebp
	ret	8
??E?$tmat3x3@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x3<float,0>::operator--, COMDAT
; _this$ = ecx

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x3<float,0>::operator++, COMDAT
; _this$ = ecx

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 309  : 	}

	ret	0
??E?$tmat3x3@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z PROC	; glm::tmat3x3<float,0>::operator[], COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 201  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z ENDP	; glm::tmat3x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z PROC	; glm::tmat3x3<float,0>::operator[], COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 194  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z ENDP	; glm::tmat3x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x3<float,0>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 181  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 182  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movq	xmm0, QWORD PTR [ecx]
	movq	QWORD PTR [edx], xmm0
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax

; 183  : 		this->value[1] = m[1];

	movq	xmm0, QWORD PTR [ecx+12]
	movq	QWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], eax

; 184  : 		this->value[2] = m[2];

	movq	xmm0, QWORD PTR [ecx+24]
	movq	QWORD PTR [edx+24], xmm0
	mov	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR [edx+32], eax

; 185  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 174  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 175  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+12], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+20], eax

; 176  : 		this->value[2] = col_type(m[2]);

	movss	xmm2, DWORD PTR [ecx+32]
	movss	xmm1, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [ecx+40]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm2
	mov	DWORD PTR [edx+32], eax

; 177  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 166  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T3[ebp+8]

; 167  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 168  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm1, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR [ecx+20]
	unpcklps xmm1, xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm1
	mov	DWORD PTR [edx+32], eax

; 169  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx
	xorps	xmm3, xmm3

; 158  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]

; 159  : 		this->value[1] = col_type(m[1]);
; 160  : 		this->value[2] = col_type(0, 0, 1);

	unpcklps xmm3, xmm3
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [edx+8], eax
	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+12], xmm2
	mov	DWORD PTR [edx+20], eax
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm3
	mov	DWORD PTR [edx+32], eax

; 161  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 149  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 150  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T3[ebp+8]

; 151  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 152  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm1, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR [ecx+20]
	unpcklps xmm1, xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm1
	mov	DWORD PTR [edx+32], eax

; 153  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 141  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 142  : 		this->value[0] = m[0];
; 143  : 		this->value[1] = m[1];
; 144  : 		this->value[2] = col_type(0, 0, 1);

	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm1, xmm1
	unpcklps xmm1, xmm1
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movq	xmm0, QWORD PTR [ecx]
	movq	QWORD PTR [edx], xmm0
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	movq	xmm0, QWORD PTR [ecx+12]
	movq	QWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm1
	mov	DWORD PTR [edx+32], eax

; 145  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 134  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 135  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+12], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+20], eax

; 136  : 		this->value[2] = col_type(m[2]);

	movss	xmm2, DWORD PTR [ecx+32]
	movss	xmm1, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [ecx+40]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm2
	mov	DWORD PTR [edx+32], eax

; 137  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 125  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 126  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR $T3[ebp+8]

; 127  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 128  : 		this->value[2] = col_type(0, 0, 1);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm2
	mov	DWORD PTR [edx+32], eax

; 129  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@00@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 73   : 	{

	push	ebp
	mov	ebp, esp

; 74   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 75   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+20], eax

; 76   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+24], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+32], eax

; 77   : 	}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@00@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@MMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@MMMMMMMMM@Z PROC		; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movss	xmm2, DWORD PTR _x0$[ebp]
	movss	xmm1, DWORD PTR _y0$[ebp]
	movss	xmm0, DWORD PTR _z0$[ebp]
	unpcklps xmm2, xmm1

; 62   : 		this->value[1] = col_type(x1, y1, z1);

	movss	xmm1, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	movq	QWORD PTR [ecx], xmm2
	movss	xmm2, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	movss	xmm0, DWORD PTR _z1$[ebp]
	unpcklps xmm2, xmm1

; 63   : 		this->value[2] = col_type(x2, y2, z2);

	movss	xmm1, DWORD PTR _y2$[ebp]
	movq	QWORD PTR [ecx+12], xmm2
	movss	xmm2, DWORD PTR _x2$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _z2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [ecx+20], eax
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+24], xmm2
	mov	DWORD PTR [ecx+32], eax

; 64   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
??0?$tmat3x3@M$0A@@glm@@QAE@MMMMMMMMM@Z ENDP		; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_scalar$ = 8						; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@M@Z PROC			; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	movss	xmm1, DWORD PTR _scalar$[ebp]
	xorps	xmm2, xmm2
	mov	DWORD PTR [ecx], 0
	movaps	xmm0, xmm1
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	unpcklps xmm0, xmm2
	movq	QWORD PTR [ecx], xmm0

; 49   : 		this->value[1] = col_type(0, scalar, 0);

	movaps	xmm0, xmm2
	mov	DWORD PTR $T3[ebp+8], 0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T2[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm0, xmm1
	movq	QWORD PTR [ecx+12], xmm0
	mov	DWORD PTR [ecx+20], eax

; 50   : 		this->value[2] = col_type(0, 0, scalar);

	unpcklps xmm2, xmm2
	movss	DWORD PTR $T1[ebp+8], xmm1
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+24], xmm2
	mov	DWORD PTR [ecx+32], eax

; 51   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@M@Z ENDP			; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x3@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 43   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	ret	4
??0?$tmat3x3@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
??0?$tmat3x3@M$0A@@glm@@QAE@XZ PROC			; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	movss	xmm1, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	DWORD PTR [ecx], 0
	movaps	xmm0, xmm1
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	unpcklps xmm0, xmm2
	movq	QWORD PTR [ecx], xmm0

; 16   : 				this->value[1] = col_type(0, 1, 0);

	movaps	xmm0, xmm2
	mov	DWORD PTR $T3[ebp+8], 0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T2[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm0, xmm1
	movq	QWORD PTR [ecx+12], xmm0
	mov	DWORD PTR [ecx+20], eax

; 17   : 				this->value[2] = col_type(0, 0, 1);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+24], xmm2
	mov	DWORD PTR [ecx+32], eax

; 18   : #			endif
; 19   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x3@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x3@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<double,1>::operator--, COMDAT
; _this$ = ecx

; 330  : 	{

	push	ebp
	mov	ebp, esp

; 331  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 332  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movq	xmm0, QWORD PTR [ecx+64]
	movq	QWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 333  : 		return Result;
; 334  : 	}

	pop	ebp
	ret	8
??F?$tmat3x3@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x3@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<double,1>::operator++, COMDAT
; _this$ = ecx

; 322  : 	{

	push	ebp
	mov	ebp, esp

; 323  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 324  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movq	xmm0, QWORD PTR [ecx+64]
	movq	QWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 325  : 		return Result;
; 326  : 	}

	pop	ebp
	ret	8
??E?$tmat3x3@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x3@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x3<double,1>::operator--, COMDAT
; _this$ = ecx

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x3@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x3@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x3<double,1>::operator++, COMDAT
; _this$ = ecx

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 309  : 	}

	ret	0
??E?$tmat3x3@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z PROC	; glm::tmat3x3<double,1>::operator[], COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 201  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat3x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z PROC	; glm::tmat3x3<double,1>::operator[], COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 194  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat3x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@N$00@glm@@SAHXZ PROC			; glm::tmat3x3<double,1>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x3@N$00@glm@@SAHXZ ENDP			; glm::tmat3x3<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 181  : 	{

	push	ebp
	mov	ebp, esp

; 182  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [ecx+16], xmm0

; 183  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+24]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+40]
	movq	QWORD PTR [ecx+40], xmm0

; 184  : 		this->value[2] = m[2];

	movups	xmm0, XMMWORD PTR [eax+48]
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	xmm0, QWORD PTR [eax+64]

; 185  : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+64], xmm0
	pop	ebp
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp

; 174  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 175  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1

; 176  : 		this->value[2] = col_type(m[2]);

	movsd	xmm2, QWORD PTR [eax+64]
	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm1, QWORD PTR [eax+80]

; 177  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp

; 166  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movsd	QWORD PTR [ecx+64], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 167  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1

; 168  : 		this->value[2] = col_type(m[2], 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movq	QWORD PTR [ecx+40], xmm2
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 169  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp

; 158  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 159  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]

; 160  : 		this->value[2] = col_type(0, 0, 1);
; 161  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 149  : 	{

	push	ebp
	mov	ebp, esp

; 150  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movsd	QWORD PTR [ecx+64], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 151  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1

; 152  : 		this->value[2] = col_type(m[2], 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movq	QWORD PTR [ecx+40], xmm2
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 153  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 141  : 	{

	push	ebp
	mov	ebp, esp

; 142  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0

; 143  : 		this->value[1] = m[1];
; 144  : 		this->value[2] = col_type(0, 0, 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax+24]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+40]

; 145  : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+40], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp

; 134  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 135  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1

; 136  : 		this->value[2] = col_type(m[2]);

	movsd	xmm2, QWORD PTR [eax+64]
	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm1, QWORD PTR [eax+80]

; 137  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 125  : 	{

	push	ebp
	mov	ebp, esp

; 126  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movsd	QWORD PTR [ecx+64], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 127  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]

; 128  : 		this->value[2] = col_type(0, 0, 1);
; 129  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+40], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@00@Z PROC	; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 73   : 	{

	push	ebp
	mov	ebp, esp

; 74   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 75   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	QWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 76   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movq	QWORD PTR [ecx+40], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 77   : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+64], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@00@Z ENDP	; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@NNNNNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_x1$ = 32						; size = 8
_y1$ = 40						; size = 8
_z1$ = 48						; size = 8
_x2$ = 56						; size = 8
_y2$ = 64						; size = 8
_z2$ = 72						; size = 8
??0?$tmat3x3@N$00@glm@@QAE@NNNNNNNNN@Z PROC		; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movsd	xmm2, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movsd	xmm1, QWORD PTR _z0$[ebp]

; 62   : 		this->value[1] = col_type(x1, y1, z1);
; 63   : 		this->value[2] = col_type(x2, y2, z2);
; 64   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movsd	xmm2, QWORD PTR _x1$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y2$[ebp]
	movups	XMMWORD PTR [ecx+24], xmm2
	movsd	xmm2, QWORD PTR _x2$[ebp]
	movq	QWORD PTR [ecx+16], xmm1
	movsd	xmm1, QWORD PTR _z1$[ebp]
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR _z2$[ebp]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	72					; 00000048H
??0?$tmat3x3@N$00@glm@@QAE@NNNNNNNNN@Z ENDP		; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_scalar$ = 8						; size = 8
??0?$tmat3x3@N$00@glm@@QAE@N@Z PROC			; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	movsd	xmm2, QWORD PTR _scalar$[ebp]
	xorps	xmm3, xmm3
	xorps	xmm1, xmm1
	movsd	QWORD PTR $T1[ebp], xmm2
	movups	XMMWORD PTR [ecx], xmm3

; 49   : 		this->value[1] = col_type(0, scalar, 0);
; 50   : 		this->value[2] = col_type(0, 0, scalar);
; 51   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR $T1[ebp+8], xmm1
	movups	xmm0, XMMWORD PTR $T1[ebp]
	unpckhpd xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, xmm3
	movq	QWORD PTR [ecx+16], xmm1
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [ecx+24], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+40], xmm3
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+64], xmm2
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat3x3@N$00@glm@@QAE@N@Z ENDP			; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x3@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 43   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	ret	4
??0?$tmat3x3@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat3x3@N$00@glm@@QAE@XZ PROC			; glm::tmat3x3<double,1>::tmat3x3<double,1>, COMDAT
; _this$ = ecx

; 13   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);
; 16   : 				this->value[1] = col_type(0, 1, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1);
; 18   : #			endif
; 19   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	QWORD PTR [ecx+16], xmm1
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	ret	0
??0?$tmat3x3@N$00@glm@@QAE@XZ ENDP			; glm::tmat3x3<double,1>::tmat3x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x3@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<float,1>::operator--, COMDAT
; _this$ = ecx

; 330  : 	{

	push	ebp
	mov	ebp, esp

; 331  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]

; 332  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	eax, DWORD PTR [ecx+32]
	movups	XMMWORD PTR [edx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [edx+16], xmm0
	mov	DWORD PTR [edx+32], eax

; 333  : 		return Result;

	mov	eax, edx
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 334  : 	}

	pop	ebp
	ret	8
??F?$tmat3x3@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x3@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<float,1>::operator++, COMDAT
; _this$ = ecx

; 322  : 	{

	push	ebp
	mov	ebp, esp

; 323  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]

; 324  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	eax, DWORD PTR [ecx+32]
	movups	XMMWORD PTR [edx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [edx+16], xmm0
	mov	DWORD PTR [edx+32], eax

; 325  : 		return Result;

	mov	eax, edx
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 326  : 	}

	pop	ebp
	ret	8
??E?$tmat3x3@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x3@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x3<float,1>::operator--, COMDAT
; _this$ = ecx

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x3@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x3@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x3<float,1>::operator++, COMDAT
; _this$ = ecx

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 309  : 	}

	ret	0
??E?$tmat3x3@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z PROC	; glm::tmat3x3<float,1>::operator[], COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 201  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat3x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z PROC	; glm::tmat3x3<float,1>::operator[], COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 194  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat3x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$00@glm@@SAHXZ PROC			; glm::tmat3x3<float,1>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x3@M$00@glm@@SAHXZ ENDP			; glm::tmat3x3<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 181  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 182  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movq	xmm0, QWORD PTR [ecx]
	movq	QWORD PTR [edx], xmm0
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax

; 183  : 		this->value[1] = m[1];

	movq	xmm0, QWORD PTR [ecx+12]
	movq	QWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], eax

; 184  : 		this->value[2] = m[2];

	movq	xmm0, QWORD PTR [ecx+24]
	movq	QWORD PTR [edx+24], xmm0
	mov	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR [edx+32], eax

; 185  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 174  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 175  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+12], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+20], eax

; 176  : 		this->value[2] = col_type(m[2]);

	movss	xmm2, DWORD PTR [ecx+32]
	movss	xmm1, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [ecx+40]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm2
	mov	DWORD PTR [edx+32], eax

; 177  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 166  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T3[ebp+8]

; 167  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 168  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm1, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR [ecx+20]
	unpcklps xmm1, xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm1
	mov	DWORD PTR [edx+32], eax

; 169  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx
	xorps	xmm3, xmm3

; 158  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]

; 159  : 		this->value[1] = col_type(m[1]);
; 160  : 		this->value[2] = col_type(0, 0, 1);

	unpcklps xmm3, xmm3
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [edx+8], eax
	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+12], xmm2
	mov	DWORD PTR [edx+20], eax
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm3
	mov	DWORD PTR [edx+32], eax

; 161  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 149  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 150  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T3[ebp+8]

; 151  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 152  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm1, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR [ecx+20]
	unpcklps xmm1, xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm1
	mov	DWORD PTR [edx+32], eax

; 153  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 141  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 142  : 		this->value[0] = m[0];
; 143  : 		this->value[1] = m[1];
; 144  : 		this->value[2] = col_type(0, 0, 1);

	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm1, xmm1
	unpcklps xmm1, xmm1
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movq	xmm0, QWORD PTR [ecx]
	movq	QWORD PTR [edx], xmm0
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	movq	xmm0, QWORD PTR [ecx+12]
	movq	QWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm1
	mov	DWORD PTR [edx+32], eax

; 145  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 134  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 135  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+12], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+20], eax

; 136  : 		this->value[2] = col_type(m[2]);

	movss	xmm2, DWORD PTR [ecx+32]
	movss	xmm1, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [ecx+40]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm2
	mov	DWORD PTR [edx+32], eax

; 137  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 125  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 126  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR $T3[ebp+8]

; 127  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 128  : 		this->value[2] = col_type(0, 0, 1);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm2
	mov	DWORD PTR [edx+32], eax

; 129  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@00@Z PROC	; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 73   : 	{

	push	ebp
	mov	ebp, esp

; 74   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 75   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+20], eax

; 76   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+24], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+32], eax

; 77   : 	}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@00@Z ENDP	; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@MMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
??0?$tmat3x3@M$00@glm@@QAE@MMMMMMMMM@Z PROC		; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movss	xmm2, DWORD PTR _x0$[ebp]
	movss	xmm1, DWORD PTR _y0$[ebp]
	movss	xmm0, DWORD PTR _z0$[ebp]
	unpcklps xmm2, xmm1

; 62   : 		this->value[1] = col_type(x1, y1, z1);

	movss	xmm1, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	movq	QWORD PTR [ecx], xmm2
	movss	xmm2, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	movss	xmm0, DWORD PTR _z1$[ebp]
	unpcklps xmm2, xmm1

; 63   : 		this->value[2] = col_type(x2, y2, z2);

	movss	xmm1, DWORD PTR _y2$[ebp]
	movq	QWORD PTR [ecx+12], xmm2
	movss	xmm2, DWORD PTR _x2$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _z2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [ecx+20], eax
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+24], xmm2
	mov	DWORD PTR [ecx+32], eax

; 64   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
??0?$tmat3x3@M$00@glm@@QAE@MMMMMMMMM@Z ENDP		; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_scalar$ = 8						; size = 4
??0?$tmat3x3@M$00@glm@@QAE@M@Z PROC			; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	movss	xmm1, DWORD PTR _scalar$[ebp]
	xorps	xmm2, xmm2
	mov	DWORD PTR [ecx], 0
	movaps	xmm0, xmm1
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	unpcklps xmm0, xmm2
	movq	QWORD PTR [ecx], xmm0

; 49   : 		this->value[1] = col_type(0, scalar, 0);

	movaps	xmm0, xmm2
	mov	DWORD PTR $T3[ebp+8], 0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T2[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm0, xmm1
	movq	QWORD PTR [ecx+12], xmm0
	mov	DWORD PTR [ecx+20], eax

; 50   : 		this->value[2] = col_type(0, 0, scalar);

	unpcklps xmm2, xmm2
	movss	DWORD PTR $T1[ebp+8], xmm1
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+24], xmm2
	mov	DWORD PTR [ecx+32], eax

; 51   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@M@Z ENDP			; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x3@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 43   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	ret	4
??0?$tmat3x3@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
??0?$tmat3x3@M$00@glm@@QAE@XZ PROC			; glm::tmat3x3<float,1>::tmat3x3<float,1>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	movss	xmm1, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	DWORD PTR [ecx], 0
	movaps	xmm0, xmm1
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	unpcklps xmm0, xmm2
	movq	QWORD PTR [ecx], xmm0

; 16   : 				this->value[1] = col_type(0, 1, 0);

	movaps	xmm0, xmm2
	mov	DWORD PTR $T3[ebp+8], 0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T2[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm0, xmm1
	movq	QWORD PTR [ecx+12], xmm0
	mov	DWORD PTR [ecx+20], eax

; 17   : 				this->value[2] = col_type(0, 0, 1);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+24], xmm2
	mov	DWORD PTR [ecx+32], eax

; 18   : #			endif
; 19   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x3@M$00@glm@@QAE@XZ ENDP			; glm::tmat3x3<float,1>::tmat3x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x3@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<double,2>::operator--, COMDAT
; _this$ = ecx

; 330  : 	{

	push	ebp
	mov	ebp, esp

; 331  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 332  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movq	xmm0, QWORD PTR [ecx+64]
	movq	QWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 333  : 		return Result;
; 334  : 	}

	pop	ebp
	ret	8
??F?$tmat3x3@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x3@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<double,2>::operator++, COMDAT
; _this$ = ecx

; 322  : 	{

	push	ebp
	mov	ebp, esp

; 323  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 324  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movq	xmm0, QWORD PTR [ecx+64]
	movq	QWORD PTR [eax+64], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 325  : 		return Result;
; 326  : 	}

	pop	ebp
	ret	8
??E?$tmat3x3@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x3@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x3<double,2>::operator--, COMDAT
; _this$ = ecx

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x3@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x3@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x3<double,2>::operator++, COMDAT
; _this$ = ecx

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [ecx+64]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+64], xmm0

; 309  : 	}

	ret	0
??E?$tmat3x3@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z PROC	; glm::tmat3x3<double,2>::operator[], COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 201  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat3x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z PROC	; glm::tmat3x3<double,2>::operator[], COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 194  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat3x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@N$01@glm@@SAHXZ PROC			; glm::tmat3x3<double,2>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x3@N$01@glm@@SAHXZ ENDP			; glm::tmat3x3<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 181  : 	{

	push	ebp
	mov	ebp, esp

; 182  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [ecx+16], xmm0

; 183  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+24]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+40]
	movq	QWORD PTR [ecx+40], xmm0

; 184  : 		this->value[2] = m[2];

	movups	xmm0, XMMWORD PTR [eax+48]
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	xmm0, QWORD PTR [eax+64]

; 185  : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+64], xmm0
	pop	ebp
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp

; 174  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 175  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1

; 176  : 		this->value[2] = col_type(m[2]);

	movsd	xmm2, QWORD PTR [eax+64]
	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm1, QWORD PTR [eax+80]

; 177  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp

; 166  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movsd	QWORD PTR [ecx+64], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 167  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1

; 168  : 		this->value[2] = col_type(m[2], 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movq	QWORD PTR [ecx+40], xmm2
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 169  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp

; 158  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 159  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]

; 160  : 		this->value[2] = col_type(0, 0, 1);
; 161  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 149  : 	{

	push	ebp
	mov	ebp, esp

; 150  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movsd	QWORD PTR [ecx+64], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 151  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1

; 152  : 		this->value[2] = col_type(m[2], 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movq	QWORD PTR [ecx+40], xmm2
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 153  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 141  : 	{

	push	ebp
	mov	ebp, esp

; 142  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0

; 143  : 		this->value[1] = m[1];
; 144  : 		this->value[2] = col_type(0, 0, 1);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax+24]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+40]

; 145  : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+40], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp

; 134  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 135  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+48]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1

; 136  : 		this->value[2] = col_type(m[2]);

	movsd	xmm2, QWORD PTR [eax+64]
	movsd	xmm0, QWORD PTR [eax+72]
	movsd	xmm1, QWORD PTR [eax+80]

; 137  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 125  : 	{

	push	ebp
	mov	ebp, esp

; 126  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movsd	QWORD PTR [ecx+64], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 127  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm0, QWORD PTR [eax+24]
	movsd	xmm1, QWORD PTR [eax+16]

; 128  : 		this->value[2] = col_type(0, 0, 1);
; 129  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+40], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@00@Z PROC	; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 73   : 	{

	push	ebp
	mov	ebp, esp

; 74   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 75   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	QWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 76   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movq	QWORD PTR [ecx+40], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 77   : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+64], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@00@Z ENDP	; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@NNNNNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_x1$ = 32						; size = 8
_y1$ = 40						; size = 8
_z1$ = 48						; size = 8
_x2$ = 56						; size = 8
_y2$ = 64						; size = 8
_z2$ = 72						; size = 8
??0?$tmat3x3@N$01@glm@@QAE@NNNNNNNNN@Z PROC		; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movsd	xmm2, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movsd	xmm1, QWORD PTR _z0$[ebp]

; 62   : 		this->value[1] = col_type(x1, y1, z1);
; 63   : 		this->value[2] = col_type(x2, y2, z2);
; 64   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movsd	xmm2, QWORD PTR _x1$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y2$[ebp]
	movups	XMMWORD PTR [ecx+24], xmm2
	movsd	xmm2, QWORD PTR _x2$[ebp]
	movq	QWORD PTR [ecx+16], xmm1
	movsd	xmm1, QWORD PTR _z1$[ebp]
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR _z2$[ebp]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+48], xmm2
	movq	QWORD PTR [ecx+64], xmm1
	pop	ebp
	ret	72					; 00000048H
??0?$tmat3x3@N$01@glm@@QAE@NNNNNNNNN@Z ENDP		; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_scalar$ = 8						; size = 8
??0?$tmat3x3@N$01@glm@@QAE@N@Z PROC			; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	movsd	xmm2, QWORD PTR _scalar$[ebp]
	xorps	xmm3, xmm3
	xorps	xmm1, xmm1
	movsd	QWORD PTR $T1[ebp], xmm2
	movups	XMMWORD PTR [ecx], xmm3

; 49   : 		this->value[1] = col_type(0, scalar, 0);
; 50   : 		this->value[2] = col_type(0, 0, scalar);
; 51   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movups	XMMWORD PTR $T1[ebp+8], xmm1
	movups	xmm0, XMMWORD PTR $T1[ebp]
	unpckhpd xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, xmm3
	movq	QWORD PTR [ecx+16], xmm1
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [ecx+24], xmm0
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+40], xmm3
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+64], xmm2
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat3x3@N$01@glm@@QAE@N@Z ENDP			; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x3@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 43   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	QWORD PTR [ecx+64], xmm0
	ret	4
??0?$tmat3x3@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat3x3@N$01@glm@@QAE@XZ PROC			; glm::tmat3x3<double,2>::tmat3x3<double,2>, COMDAT
; _this$ = ecx

; 13   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);
; 16   : 				this->value[1] = col_type(0, 1, 0);
; 17   : 				this->value[2] = col_type(0, 0, 1);
; 18   : #			endif
; 19   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	QWORD PTR [ecx+16], xmm1
	xorps	xmm0, xmm0
	movq	QWORD PTR [ecx+40], xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movups	XMMWORD PTR [ecx+48], xmm0
	movq	QWORD PTR [ecx+64], xmm1
	ret	0
??0?$tmat3x3@N$01@glm@@QAE@XZ ENDP			; glm::tmat3x3<double,2>::tmat3x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x3@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<float,2>::operator--, COMDAT
; _this$ = ecx

; 330  : 	{

	push	ebp
	mov	ebp, esp

; 331  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]

; 332  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	eax, DWORD PTR [ecx+32]
	movups	XMMWORD PTR [edx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [edx+16], xmm0
	mov	DWORD PTR [edx+32], eax

; 333  : 		return Result;

	mov	eax, edx
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 334  : 	}

	pop	ebp
	ret	8
??F?$tmat3x3@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x3@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x3<float,2>::operator++, COMDAT
; _this$ = ecx

; 322  : 	{

	push	ebp
	mov	ebp, esp

; 323  : 		tmat3x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]

; 324  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	mov	eax, DWORD PTR [ecx+32]
	movups	XMMWORD PTR [edx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [edx+16], xmm0
	mov	DWORD PTR [edx+32], eax

; 325  : 		return Result;

	mov	eax, edx
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 326  : 	}

	pop	ebp
	ret	8
??E?$tmat3x3@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??F?$tmat3x3@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x3@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x3<float,2>::operator--, COMDAT
; _this$ = ecx

; 314  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 315  : 		--this->value[1];
; 316  : 		--this->value[2];
; 317  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 318  : 	}

	ret	0
??F?$tmat3x3@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??E?$tmat3x3@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x3@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x3<float,2>::operator++, COMDAT
; _this$ = ecx

; 305  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 306  : 		++this->value[1];
; 307  : 		++this->value[2];
; 308  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+32]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+32], xmm0

; 309  : 	}

	ret	0
??E?$tmat3x3@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z PROC	; glm::tmat3x3<float,2>::operator[], COMDAT
; _this$ = ecx

; 198  : 	{

	push	ebp
	mov	ebp, esp

; 199  : 		assert(i < this->length());
; 200  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 201  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat3x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z PROC	; glm::tmat3x3<float,2>::operator[], COMDAT
; _this$ = ecx

; 191  : 	{

	push	ebp
	mov	ebp, esp

; 192  : 		assert(i < this->length());
; 193  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 194  : 	}

	pop	ebp
	ret	4
??A?$tmat3x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat3x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$01@glm@@SAHXZ PROC			; glm::tmat3x3<float,2>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x3@M$01@glm@@SAHXZ ENDP			; glm::tmat3x3<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 181  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 182  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movq	xmm0, QWORD PTR [ecx]
	movq	QWORD PTR [edx], xmm0
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax

; 183  : 		this->value[1] = m[1];

	movq	xmm0, QWORD PTR [ecx+12]
	movq	QWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], eax

; 184  : 		this->value[2] = m[2];

	movq	xmm0, QWORD PTR [ecx+24]
	movq	QWORD PTR [edx+24], xmm0
	mov	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR [edx+32], eax

; 185  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 174  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 175  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+12], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+20], eax

; 176  : 		this->value[2] = col_type(m[2]);

	movss	xmm2, DWORD PTR [ecx+32]
	movss	xmm1, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [ecx+40]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm2
	mov	DWORD PTR [edx+32], eax

; 177  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 165  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 166  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T3[ebp+8]

; 167  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 168  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm1, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR [ecx+20]
	unpcklps xmm1, xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm1
	mov	DWORD PTR [edx+32], eax

; 169  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 157  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx
	xorps	xmm3, xmm3

; 158  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]

; 159  : 		this->value[1] = col_type(m[1]);
; 160  : 		this->value[2] = col_type(0, 0, 1);

	unpcklps xmm3, xmm3
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [edx+8], eax
	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+12], xmm2
	mov	DWORD PTR [edx+20], eax
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm3
	mov	DWORD PTR [edx+32], eax

; 161  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 149  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 150  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T3[ebp+8]

; 151  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 152  : 		this->value[2] = col_type(m[2], 1);

	movss	xmm1, DWORD PTR [ecx+16]
	movss	xmm0, DWORD PTR [ecx+20]
	unpcklps xmm1, xmm0
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm1
	mov	DWORD PTR [edx+32], eax

; 153  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 141  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 142  : 		this->value[0] = m[0];
; 143  : 		this->value[1] = m[1];
; 144  : 		this->value[2] = col_type(0, 0, 1);

	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm1, xmm1
	unpcklps xmm1, xmm1
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movq	xmm0, QWORD PTR [ecx]
	movq	QWORD PTR [edx], xmm0
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	movq	xmm0, QWORD PTR [ecx+12]
	movq	QWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm1
	mov	DWORD PTR [edx+32], eax

; 145  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 133  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 134  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 135  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx+12], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+20], eax

; 136  : 		this->value[2] = col_type(m[2]);

	movss	xmm2, DWORD PTR [ecx+32]
	movss	xmm1, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [ecx+40]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm2
	mov	DWORD PTR [edx+32], eax

; 137  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 125  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 126  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T3[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR $T3[ebp+8]

; 127  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	DWORD PTR [edx+32], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 128  : 		this->value[2] = col_type(0, 0, 1);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+24], xmm2
	mov	DWORD PTR [edx+32], eax

; 129  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@00@Z PROC	; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 73   : 	{

	push	ebp
	mov	ebp, esp

; 74   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 75   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+20], eax

; 76   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+24], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+32], eax

; 77   : 	}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@00@Z ENDP	; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@MMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
_x2$ = 32						; size = 4
_y2$ = 36						; size = 4
_z2$ = 40						; size = 4
??0?$tmat3x3@M$01@glm@@QAE@MMMMMMMMM@Z PROC		; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 61   : 		this->value[0] = col_type(x0, y0, z0);

	movss	xmm2, DWORD PTR _x0$[ebp]
	movss	xmm1, DWORD PTR _y0$[ebp]
	movss	xmm0, DWORD PTR _z0$[ebp]
	unpcklps xmm2, xmm1

; 62   : 		this->value[1] = col_type(x1, y1, z1);

	movss	xmm1, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	movq	QWORD PTR [ecx], xmm2
	movss	xmm2, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T3[ebp+8], xmm0
	mov	eax, DWORD PTR $T3[ebp+8]
	movss	xmm0, DWORD PTR _z1$[ebp]
	unpcklps xmm2, xmm1

; 63   : 		this->value[2] = col_type(x2, y2, z2);

	movss	xmm1, DWORD PTR _y2$[ebp]
	movq	QWORD PTR [ecx+12], xmm2
	movss	xmm2, DWORD PTR _x2$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _z2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [ecx+20], eax
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+24], xmm2
	mov	DWORD PTR [ecx+32], eax

; 64   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
??0?$tmat3x3@M$01@glm@@QAE@MMMMMMMMM@Z ENDP		; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
_scalar$ = 8						; size = 4
??0?$tmat3x3@M$01@glm@@QAE@M@Z PROC			; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	movss	xmm1, DWORD PTR _scalar$[ebp]
	xorps	xmm2, xmm2
	mov	DWORD PTR [ecx], 0
	movaps	xmm0, xmm1
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	unpcklps xmm0, xmm2
	movq	QWORD PTR [ecx], xmm0

; 49   : 		this->value[1] = col_type(0, scalar, 0);

	movaps	xmm0, xmm2
	mov	DWORD PTR $T3[ebp+8], 0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T2[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm0, xmm1
	movq	QWORD PTR [ecx+12], xmm0
	mov	DWORD PTR [ecx+20], eax

; 50   : 		this->value[2] = col_type(0, 0, scalar);

	unpcklps xmm2, xmm2
	movss	DWORD PTR $T1[ebp+8], xmm1
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+24], xmm2
	mov	DWORD PTR [ecx+32], eax

; 51   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@M@Z ENDP			; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x3@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 43   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	ret	4
??0?$tmat3x3@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
$T3 = -12						; size = 12
??0?$tmat3x3@M$01@glm@@QAE@XZ PROC			; glm::tmat3x3<float,2>::tmat3x3<float,2>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	movss	xmm1, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	DWORD PTR [ecx], 0
	movaps	xmm0, xmm1
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	unpcklps xmm0, xmm2
	movq	QWORD PTR [ecx], xmm0

; 16   : 				this->value[1] = col_type(0, 1, 0);

	movaps	xmm0, xmm2
	mov	DWORD PTR $T3[ebp+8], 0
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T2[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp+8]
	unpcklps xmm0, xmm1
	movq	QWORD PTR [ecx+12], xmm0
	mov	DWORD PTR [ecx+20], eax

; 17   : 				this->value[2] = col_type(0, 0, 1);

	unpcklps xmm2, xmm2
	mov	DWORD PTR $T1[ebp+8], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+24], xmm2
	mov	DWORD PTR [ecx+32], eax

; 18   : #			endif
; 19   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x3@M$01@glm@@QAE@XZ ENDP			; glm::tmat3x3<float,2>::tmat3x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x2@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<double,0>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 316  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x2@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x2@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<double,0>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 308  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x2@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x2@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x2<double,0>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x2@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x2@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x2<double,0>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x2@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z PROC	; glm::tmat3x2<double,0>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z ENDP	; glm::tmat3x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z PROC	; glm::tmat3x2<double,0>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z ENDP	; glm::tmat3x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@N$0A@@glm@@SAHXZ PROC			; glm::tmat3x2<double,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x2@N$0A@@glm@@SAHXZ ENDP			; glm::tmat3x2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp

; 180  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 181  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 182  : 		this->value[2] = col_type(m[2]);

	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm0, QWORD PTR [eax+56]

; 183  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	pop	ebp
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp

; 172  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 173  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 174  : 		this->value[2] = m[2];

	movups	xmm0, XMMWORD PTR [eax+32]

; 175  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 165  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 166  : 		this->value[2] = col_type(m[2]);

	movsd	xmm1, QWORD PTR [eax+64]
	movsd	xmm0, QWORD PTR [eax+72]

; 167  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	pop	ebp
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp

; 156  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 157  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]

; 158  : 		this->value[2] = col_type(T(0));
; 159  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp

; 148  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 149  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]

; 150  : 		this->value[2] = col_type(T(0));
; 151  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 141  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 142  : 		this->value[2] = col_type(m[2]);

	movsd	xmm1, QWORD PTR [eax+64]
	movsd	xmm0, QWORD PTR [eax+72]

; 143  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	pop	ebp
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp

; 132  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 133  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 134  : 		this->value[2] = col_type(m[2]);

	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm0, QWORD PTR [eax+56]

; 135  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	pop	ebp
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp

; 124  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 125  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]

; 126  : 		this->value[2] = col_type(0);
; 127  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@00@Z PROC ; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 73   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 74   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 75   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@00@Z ENDP ; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@NNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_x1$ = 24						; size = 8
_y1$ = 32						; size = 8
_x2$ = 40						; size = 8
_y2$ = 48						; size = 8
??0?$tmat3x2@N$0A@@glm@@QAE@NNNNNN@Z PROC		; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp

; 59   : 		this->value[0] = col_type(x0, y0);

	movsd	xmm1, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0

; 60   : 		this->value[1] = col_type(x1, y1);
; 61   : 		this->value[2] = col_type(x2, y2);
; 62   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm1, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	movups	XMMWORD PTR [ecx], xmm1
	movsd	xmm1, QWORD PTR _x1$[ebp]
	unpcklpd xmm1, xmm0
	movsd	xmm0, QWORD PTR _y2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm1
	movsd	xmm1, QWORD PTR _x2$[ebp]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	pop	ebp
	ret	48					; 00000030H
??0?$tmat3x2@N$0A@@glm@@QAE@NNNNNN@Z ENDP		; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tmat3x2@N$0A@@glm@@QAE@N@Z PROC			; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp

; 46   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2

; 47   : 		this->value[1] = col_type(0, scalar);
; 48   : 		this->value[2] = col_type(0, 0);
; 49   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movaps	xmm0, xmm1
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [ecx], xmm0
	unpcklpd xmm2, xmm1
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	8
??0?$tmat3x2@N$0A@@glm@@QAE@N@Z ENDP			; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x2@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 41   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	ret	4
??0?$tmat3x2@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat3x2@N$0A@@glm@@QAE@XZ PROC			; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	xorps	xmm0, xmm0

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);
; 14   : 				this->value[1] = col_type(0, 1);
; 15   : 				this->value[2] = col_type(0, 0);
; 16   : #			endif
; 17   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	ret	0
??0?$tmat3x2@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x2@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<float,0>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 316  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x2@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x2@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<float,0>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 308  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x2@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x2@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x2<float,0>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x2@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x2@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat3x2<float,0>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x2@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat3x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z PROC	; glm::tmat3x2<float,0>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z ENDP	; glm::tmat3x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z PROC	; glm::tmat3x2<float,0>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z ENDP	; glm::tmat3x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x2<float,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 180  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 181  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 182  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 183  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 172  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 173  : 		this->value[1] = m[1];

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax

; 174  : 		this->value[2] = m[2];

	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], eax

; 175  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 164  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 165  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 166  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 167  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 156  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 157  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 158  : 		this->value[2] = col_type(T(0));

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 159  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 148  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 149  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 150  : 		this->value[2] = col_type(T(0));

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 151  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 140  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 141  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 142  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 143  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 132  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 133  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 134  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 135  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 124  : 		this->value[0] = m[0];
; 125  : 		this->value[1] = m[1];
; 126  : 		this->value[2] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 127  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@00@Z PROC ; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 72   : 		this->value[0] = v0;

	mov	ecx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]

; 73   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+4]

; 74   : 		this->value[2] = v2;

	mov	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+20], eax

; 75   : 	}

	mov	eax, edx
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@00@Z ENDP ; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@MMMMMM@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@MMMMMM@Z PROC		; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 59   : 		this->value[0] = col_type(x0, y0);

	movss	xmm0, DWORD PTR _x0$[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0

; 60   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR _x1$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0

; 61   : 		this->value[2] = col_type(x2, y2);

	movss	xmm0, DWORD PTR _x2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y2$[ebp]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 62   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0?$tmat3x2@M$0A@@glm@@QAE@MMMMMM@Z ENDP		; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@M@Z PROC			; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 46   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	movss	DWORD PTR $T3[ebp], xmm0
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T3[ebp+4], 0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 47   : 		this->value[1] = col_type(0, scalar);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 48   : 		this->value[2] = col_type(0, 0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 49   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@M@Z ENDP			; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x2@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 41   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	ret	4
??0?$tmat3x2@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
??0?$tmat3x2@M$0A@@glm@@QAE@XZ PROC			; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);

	mov	DWORD PTR $T3[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T3[ebp+4], 0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 14   : 				this->value[1] = col_type(0, 1);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T2[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 15   : 				this->value[2] = col_type(0, 0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 16   : #			endif
; 17   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x2@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x2@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<double,1>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 316  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x2@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x2@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<double,1>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 308  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x2@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x2@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x2<double,1>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x2@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x2@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x2<double,1>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x2@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z PROC	; glm::tmat3x2<double,1>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat3x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z PROC	; glm::tmat3x2<double,1>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat3x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@N$00@glm@@SAHXZ PROC			; glm::tmat3x2<double,1>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x2@N$00@glm@@SAHXZ ENDP			; glm::tmat3x2<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp

; 180  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 181  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 182  : 		this->value[2] = col_type(m[2]);

	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm0, QWORD PTR [eax+56]

; 183  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	pop	ebp
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp

; 172  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 173  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 174  : 		this->value[2] = m[2];

	movups	xmm0, XMMWORD PTR [eax+32]

; 175  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 165  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 166  : 		this->value[2] = col_type(m[2]);

	movsd	xmm1, QWORD PTR [eax+64]
	movsd	xmm0, QWORD PTR [eax+72]

; 167  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	pop	ebp
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp

; 156  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 157  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]

; 158  : 		this->value[2] = col_type(T(0));
; 159  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp

; 148  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 149  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]

; 150  : 		this->value[2] = col_type(T(0));
; 151  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 141  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 142  : 		this->value[2] = col_type(m[2]);

	movsd	xmm1, QWORD PTR [eax+64]
	movsd	xmm0, QWORD PTR [eax+72]

; 143  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	pop	ebp
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp

; 132  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 133  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 134  : 		this->value[2] = col_type(m[2]);

	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm0, QWORD PTR [eax+56]

; 135  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	pop	ebp
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp

; 124  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 125  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]

; 126  : 		this->value[2] = col_type(0);
; 127  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@00@Z PROC	; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 73   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 74   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 75   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@00@Z ENDP	; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@NNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_x1$ = 24						; size = 8
_y1$ = 32						; size = 8
_x2$ = 40						; size = 8
_y2$ = 48						; size = 8
??0?$tmat3x2@N$00@glm@@QAE@NNNNNN@Z PROC		; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp

; 59   : 		this->value[0] = col_type(x0, y0);

	movsd	xmm1, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0

; 60   : 		this->value[1] = col_type(x1, y1);
; 61   : 		this->value[2] = col_type(x2, y2);
; 62   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm1, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	movups	XMMWORD PTR [ecx], xmm1
	movsd	xmm1, QWORD PTR _x1$[ebp]
	unpcklpd xmm1, xmm0
	movsd	xmm0, QWORD PTR _y2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm1
	movsd	xmm1, QWORD PTR _x2$[ebp]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	pop	ebp
	ret	48					; 00000030H
??0?$tmat3x2@N$00@glm@@QAE@NNNNNN@Z ENDP		; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tmat3x2@N$00@glm@@QAE@N@Z PROC			; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp

; 46   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2

; 47   : 		this->value[1] = col_type(0, scalar);
; 48   : 		this->value[2] = col_type(0, 0);
; 49   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movaps	xmm0, xmm1
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [ecx], xmm0
	unpcklpd xmm2, xmm1
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	8
??0?$tmat3x2@N$00@glm@@QAE@N@Z ENDP			; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x2@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 41   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	ret	4
??0?$tmat3x2@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat3x2@N$00@glm@@QAE@XZ PROC			; glm::tmat3x2<double,1>::tmat3x2<double,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	xorps	xmm0, xmm0

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);
; 14   : 				this->value[1] = col_type(0, 1);
; 15   : 				this->value[2] = col_type(0, 0);
; 16   : #			endif
; 17   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	ret	0
??0?$tmat3x2@N$00@glm@@QAE@XZ ENDP			; glm::tmat3x2<double,1>::tmat3x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x2@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<float,1>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 316  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x2@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x2@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<float,1>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 308  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x2@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x2@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x2<float,1>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x2@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x2@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat3x2<float,1>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x2@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z PROC	; glm::tmat3x2<float,1>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat3x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z PROC	; glm::tmat3x2<float,1>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat3x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@M$00@glm@@SAHXZ PROC			; glm::tmat3x2<float,1>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x2@M$00@glm@@SAHXZ ENDP			; glm::tmat3x2<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 180  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 181  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 182  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 183  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 172  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 173  : 		this->value[1] = m[1];

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax

; 174  : 		this->value[2] = m[2];

	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], eax

; 175  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 164  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 165  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 166  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 167  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 156  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 157  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 158  : 		this->value[2] = col_type(T(0));

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 159  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 148  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 149  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 150  : 		this->value[2] = col_type(T(0));

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 151  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 140  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 141  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 142  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 143  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 132  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 133  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 134  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 135  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 124  : 		this->value[0] = m[0];
; 125  : 		this->value[1] = m[1];
; 126  : 		this->value[2] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 127  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@00@Z PROC	; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 72   : 		this->value[0] = v0;

	mov	ecx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]

; 73   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+4]

; 74   : 		this->value[2] = v2;

	mov	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+20], eax

; 75   : 	}

	mov	eax, edx
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@00@Z ENDP	; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@MMMMMM@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
??0?$tmat3x2@M$00@glm@@QAE@MMMMMM@Z PROC		; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 59   : 		this->value[0] = col_type(x0, y0);

	movss	xmm0, DWORD PTR _x0$[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0

; 60   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR _x1$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0

; 61   : 		this->value[2] = col_type(x2, y2);

	movss	xmm0, DWORD PTR _x2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y2$[ebp]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 62   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0?$tmat3x2@M$00@glm@@QAE@MMMMMM@Z ENDP		; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat3x2@M$00@glm@@QAE@M@Z PROC			; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 46   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	movss	DWORD PTR $T3[ebp], xmm0
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T3[ebp+4], 0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 47   : 		this->value[1] = col_type(0, scalar);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 48   : 		this->value[2] = col_type(0, 0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 49   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@M@Z ENDP			; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x2@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 41   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	ret	4
??0?$tmat3x2@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
??0?$tmat3x2@M$00@glm@@QAE@XZ PROC			; glm::tmat3x2<float,1>::tmat3x2<float,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);

	mov	DWORD PTR $T3[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T3[ebp+4], 0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 14   : 				this->value[1] = col_type(0, 1);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T2[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 15   : 				this->value[2] = col_type(0, 0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 16   : #			endif
; 17   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x2@M$00@glm@@QAE@XZ ENDP			; glm::tmat3x2<float,1>::tmat3x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x2@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<double,2>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 316  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x2@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x2@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<double,2>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 308  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x2@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x2@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x2<double,2>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x2@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x2@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x2<double,2>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x2@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z PROC	; glm::tmat3x2<double,2>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat3x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z PROC	; glm::tmat3x2<double,2>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat3x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@N$01@glm@@SAHXZ PROC			; glm::tmat3x2<double,2>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x2@N$01@glm@@SAHXZ ENDP			; glm::tmat3x2<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp

; 180  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 181  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 182  : 		this->value[2] = col_type(m[2]);

	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm0, QWORD PTR [eax+56]

; 183  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	pop	ebp
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp

; 172  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 173  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 174  : 		this->value[2] = m[2];

	movups	xmm0, XMMWORD PTR [eax+32]

; 175  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp

; 164  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 165  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 166  : 		this->value[2] = col_type(m[2]);

	movsd	xmm1, QWORD PTR [eax+64]
	movsd	xmm0, QWORD PTR [eax+72]

; 167  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	pop	ebp
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp

; 156  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 157  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]

; 158  : 		this->value[2] = col_type(T(0));
; 159  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp

; 148  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 149  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]

; 150  : 		this->value[2] = col_type(T(0));
; 151  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp

; 140  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 141  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+32]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 142  : 		this->value[2] = col_type(m[2]);

	movsd	xmm1, QWORD PTR [eax+64]
	movsd	xmm0, QWORD PTR [eax+72]

; 143  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	pop	ebp
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp

; 132  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 133  : 		this->value[1] = col_type(m[1]);

	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm1, QWORD PTR [eax+24]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 134  : 		this->value[2] = col_type(m[2]);

	movsd	xmm1, QWORD PTR [eax+48]
	movsd	xmm0, QWORD PTR [eax+56]

; 135  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	pop	ebp
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp

; 124  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 125  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]

; 126  : 		this->value[2] = col_type(0);
; 127  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@00@Z PROC	; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 73   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 74   : 		this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 75   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@00@Z ENDP	; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@NNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_x1$ = 24						; size = 8
_y1$ = 32						; size = 8
_x2$ = 40						; size = 8
_y2$ = 48						; size = 8
??0?$tmat3x2@N$01@glm@@QAE@NNNNNN@Z PROC		; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp

; 59   : 		this->value[0] = col_type(x0, y0);

	movsd	xmm1, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0

; 60   : 		this->value[1] = col_type(x1, y1);
; 61   : 		this->value[2] = col_type(x2, y2);
; 62   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm1, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	movups	XMMWORD PTR [ecx], xmm1
	movsd	xmm1, QWORD PTR _x1$[ebp]
	unpcklpd xmm1, xmm0
	movsd	xmm0, QWORD PTR _y2$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm1
	movsd	xmm1, QWORD PTR _x2$[ebp]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+32], xmm1
	pop	ebp
	ret	48					; 00000030H
??0?$tmat3x2@N$01@glm@@QAE@NNNNNN@Z ENDP		; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tmat3x2@N$01@glm@@QAE@N@Z PROC			; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp

; 46   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2

; 47   : 		this->value[1] = col_type(0, scalar);
; 48   : 		this->value[2] = col_type(0, 0);
; 49   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movaps	xmm0, xmm1
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [ecx], xmm0
	unpcklpd xmm2, xmm1
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm0
	pop	ebp
	ret	8
??0?$tmat3x2@N$01@glm@@QAE@N@Z ENDP			; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x2@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 41   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	ret	4
??0?$tmat3x2@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat3x2@N$01@glm@@QAE@XZ PROC			; glm::tmat3x2<double,2>::tmat3x2<double,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	xorps	xmm0, xmm0

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);
; 14   : 				this->value[1] = col_type(0, 1);
; 15   : 				this->value[2] = col_type(0, 0);
; 16   : #			endif
; 17   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	ret	0
??0?$tmat3x2@N$01@glm@@QAE@XZ ENDP			; glm::tmat3x2<double,2>::tmat3x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat3x2@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<float,2>::operator--, COMDAT
; _this$ = ecx

; 314  : 	{

	push	ebp
	mov	ebp, esp

; 315  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 316  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 317  : 		return Result;
; 318  : 	}

	pop	ebp
	ret	8
??F?$tmat3x2@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat3x2@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat3x2<float,2>::operator++, COMDAT
; _this$ = ecx

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 		tmat3x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 308  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 309  : 		return Result;
; 310  : 	}

	pop	ebp
	ret	8
??E?$tmat3x2@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat3x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??F?$tmat3x2@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat3x2@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x2<float,2>::operator--, COMDAT
; _this$ = ecx

; 298  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 299  : 		--this->value[1];
; 300  : 		--this->value[2];
; 301  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 302  : 	}

	ret	0
??F?$tmat3x2@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??E?$tmat3x2@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat3x2@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat3x2<float,2>::operator++, COMDAT
; _this$ = ecx

; 289  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 290  : 		++this->value[1];
; 291  : 		++this->value[2];
; 292  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 293  : 	}

	ret	0
??E?$tmat3x2@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat3x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z PROC	; glm::tmat3x2<float,2>::operator[], COMDAT
; _this$ = ecx

; 196  : 	{

	push	ebp
	mov	ebp, esp

; 197  : 		assert(i < this->length());
; 198  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 199  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat3x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat3x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z PROC	; glm::tmat3x2<float,2>::operator[], COMDAT
; _this$ = ecx

; 189  : 	{

	push	ebp
	mov	ebp, esp

; 190  : 		assert(i < this->length());
; 191  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 192  : 	}

	pop	ebp
	ret	4
??A?$tmat3x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat3x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@M$01@glm@@SAHXZ PROC			; glm::tmat3x2<float,2>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tmat3x2@M$01@glm@@SAHXZ ENDP			; glm::tmat3x2<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 179  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 180  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 181  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 182  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 183  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 171  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 172  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 173  : 		this->value[1] = m[1];

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax

; 174  : 		this->value[2] = m[2];

	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], eax

; 175  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 163  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 164  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 165  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 166  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 167  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 156  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 157  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 158  : 		this->value[2] = col_type(T(0));

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 159  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 148  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 149  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 150  : 		this->value[2] = col_type(T(0));

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 151  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 140  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 141  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 142  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 143  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 131  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 132  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	movss	DWORD PTR $T3[ebp+4], xmm0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], eax

; 133  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+12], eax

; 134  : 		this->value[2] = col_type(m[2]);

	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 135  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	edx, ecx

; 124  : 		this->value[0] = m[0];
; 125  : 		this->value[1] = m[1];
; 126  : 		this->value[2] = col_type(0);

	mov	DWORD PTR $T1[ebp], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR $T1[ebp+4], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+20], eax

; 127  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@00@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@00@Z PROC	; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 72   : 		this->value[0] = v0;

	mov	ecx, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]

; 73   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+4]

; 74   : 		this->value[2] = v2;

	mov	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+20], eax

; 75   : 	}

	mov	eax, edx
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@00@Z ENDP	; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@MMMMMM@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
??0?$tmat3x2@M$01@glm@@QAE@MMMMMM@Z PROC		; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 59   : 		this->value[0] = col_type(x0, y0);

	movss	xmm0, DWORD PTR _x0$[ebp]
	movss	DWORD PTR $T3[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	movss	DWORD PTR $T3[ebp+4], xmm0

; 60   : 		this->value[1] = col_type(x1, y1);

	movss	xmm0, DWORD PTR _x1$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR $T3[ebp+4]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR $T2[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0

; 61   : 		this->value[2] = col_type(x2, y2);

	movss	xmm0, DWORD PTR _x2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y2$[ebp]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 62   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0?$tmat3x2@M$01@glm@@QAE@MMMMMM@Z ENDP		; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat3x2@M$01@glm@@QAE@M@Z PROC			; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 45   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 46   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	movss	DWORD PTR $T3[ebp], xmm0
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T3[ebp+4], 0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 47   : 		this->value[1] = col_type(0, scalar);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 48   : 		this->value[2] = col_type(0, 0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 49   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@M@Z ENDP			; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat3x2@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 41   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	ret	4
??0?$tmat3x2@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
$T3 = -8						; size = 8
??0?$tmat3x2@M$01@glm@@QAE@XZ PROC			; glm::tmat3x2<float,2>::tmat3x2<float,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);

	mov	DWORD PTR $T3[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T3[ebp+4], 0
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 14   : 				this->value[1] = col_type(0, 1);

	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T2[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 15   : 				this->value[2] = col_type(0, 0);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR $T1[ebp+4], 0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 16   : #			endif
; 17   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat3x2@M$01@glm@@QAE@XZ ENDP			; glm::tmat3x2<float,2>::tmat3x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x4@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<double,0>::operator--, COMDAT
; _this$ = ecx

; 275  : 	{

	push	ebp
	mov	ebp, esp

; 276  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0

; 277  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 278  : 		return Result;
; 279  : 	}

	pop	ebp
	ret	8
??F?$tmat2x4@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x4@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<double,0>::operator++, COMDAT
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp

; 268  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0

; 269  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 270  : 		return Result;
; 271  : 	}

	pop	ebp
	ret	8
??E?$tmat2x4@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x4@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x4<double,0>::operator--, COMDAT
; _this$ = ecx

; 260  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 261  : 		--this->value[1];
; 262  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 263  : 	}

	ret	0
??F?$tmat2x4@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x4@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x4<double,0>::operator++, COMDAT
; _this$ = ecx

; 252  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 253  : 		++this->value[1];
; 254  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 255  : 	}

	ret	0
??E?$tmat2x4@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z PROC	; glm::tmat2x4<double,0>::operator[], COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 170  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@N$0A@@glm@@QBEABU?$tvec4@N$0A@@1@H@Z ENDP	; glm::tmat2x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z PROC	; glm::tmat2x4<double,0>::operator[], COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 163  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@N$0A@@glm@@QAEAAU?$tvec4@N$0A@@1@H@Z ENDP	; glm::tmat2x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@N$0A@@glm@@SAHXZ PROC			; glm::tmat2x4<double,0>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x4@N$0A@@glm@@SAHXZ ENDP			; glm::tmat2x4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 153  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm2, QWORD PTR [eax+40]

; 154  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm2
	pop	ebp
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm2, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 147  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp

; 138  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 139  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+48]

; 140  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 130  : 	{

	push	ebp
	mov	ebp, esp

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm2, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 133  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp

; 124  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 125  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm2, QWORD PTR [eax+40]

; 126  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm2
	pop	ebp
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 116  : 	{

	push	ebp
	mov	ebp, esp

; 117  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	xmm1, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 118  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [eax+48]

; 119  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 111  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm2, QWORD PTR [eax+40]

; 112  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm2
	pop	ebp
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm2, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 105  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@0@Z PROC	; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp

; 62   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 63   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 64   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	8
??0?$tmat2x4@N$0A@@glm@@QAE@ABU?$tvec4@N$0A@@1@0@Z ENDP	; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@NNNNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_w0$ = 32						; size = 8
_x1$ = 40						; size = 8
_y1$ = 48						; size = 8
_z1$ = 56						; size = 8
_w1$ = 64						; size = 8
??0?$tmat2x4@N$0A@@glm@@QAE@NNNNNNNN@Z PROC		; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm2, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movsd	xmm1, QWORD PTR _w0$[ebp]

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	eax, ecx
	movsd	xmm3, QWORD PTR _z0$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm1, QWORD PTR _w1$[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movsd	xmm2, QWORD PTR _x1$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm3
	movsd	xmm3, QWORD PTR _z1$[ebp]
	unpcklpd xmm2, xmm0
	unpcklpd xmm3, xmm1
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm3
	pop	ebp
	ret	64					; 00000040H
??0?$tmat2x4@N$0A@@glm@@QAE@NNNNNNNN@Z ENDP		; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_scalar$ = 8						; size = 8
??0?$tmat2x4@N$0A@@glm@@QAE@N@Z PROC			; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	xorps	xmm0, xmm0
	xorps	xmm2, xmm2
	movsd	QWORD PTR $T1[ebp], xmm1
	movups	XMMWORD PTR $T1[ebp+8], xmm0

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	eax, ecx
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR $T1[ebp+24], xmm2
	movups	xmm0, XMMWORD PTR $T1[ebp+16]
	unpcklpd xmm2, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat2x4@N$0A@@glm@@QAE@N@Z ENDP			; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x4@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	ret	4
??0?$tmat2x4@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat2x4@N$0A@@glm@@QAE@XZ PROC			; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	ret	0
??0?$tmat2x4@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x4@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<float,0>::operator--, COMDAT
; _this$ = ecx

; 275  : 	{

	push	ebp
	mov	ebp, esp

; 276  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 277  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx+16], xmm0

; 278  : 		return Result;
; 279  : 	}

	pop	ebp
	ret	8
??F?$tmat2x4@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x4@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<float,0>::operator++, COMDAT
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp

; 268  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 269  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx+16], xmm0

; 270  : 		return Result;
; 271  : 	}

	pop	ebp
	ret	8
??E?$tmat2x4@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x4<float,0>::operator--, COMDAT
; _this$ = ecx

; 260  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 261  : 		--this->value[1];
; 262  : 		return *this;

	mov	eax, ecx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx+16], xmm0

; 263  : 	}

	ret	0
??F?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x4<float,0>::operator++, COMDAT
; _this$ = ecx

; 252  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 253  : 		++this->value[1];
; 254  : 		return *this;

	mov	eax, ecx
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx+16], xmm0

; 255  : 	}

	ret	0
??E?$tmat2x4@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z PROC	; glm::tmat2x4<float,0>::operator[], COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 170  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@M$0A@@glm@@QBEABU?$tvec4@M$0A@@1@H@Z ENDP	; glm::tmat2x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z PROC	; glm::tmat2x4<float,0>::operator[], COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 163  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ENDP	; glm::tmat2x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x4<float,0>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 152  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 153  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 154  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 147  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp

; 138  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 139  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]

; 140  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 130  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 133  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 124  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 125  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 126  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 116  : 	{

	push	ebp
	mov	ebp, esp

; 117  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 118  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+16]

; 119  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 110  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 111  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 112  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 105  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@0@Z PROC	; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp

; 62   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	xmm0, XMMWORD PTR [eax]

; 63   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 64   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tmat2x4@M$0A@@glm@@QAE@ABU?$tvec4@M$0A@@1@0@Z ENDP	; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@MMMMMMMM@Z PROC		; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w0$[ebp]
	movss	DWORD PTR $T2[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T1[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
??0?$tmat2x4@M$0A@@glm@@QAE@MMMMMMMM@Z ENDP		; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_scalar$ = 8						; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@M@Z PROC			; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	movss	xmm1, DWORD PTR _scalar$[ebp]

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp], xmm1
	mov	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	XMMWORD PTR [ecx], xmm0
	mov	DWORD PTR $T1[ebp], 0
	movss	DWORD PTR $T1[ebp+4], xmm1
	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@M@Z ENDP			; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x4@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 38   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	ret	4
??0?$tmat2x4@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat2x4@M$0A@@glm@@QAE@XZ PROC			; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	ret	0
??0?$tmat2x4@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x4@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<double,1>::operator--, COMDAT
; _this$ = ecx

; 275  : 	{

	push	ebp
	mov	ebp, esp

; 276  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0

; 277  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 278  : 		return Result;
; 279  : 	}

	pop	ebp
	ret	8
??F?$tmat2x4@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x4@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<double,1>::operator++, COMDAT
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp

; 268  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0

; 269  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 270  : 		return Result;
; 271  : 	}

	pop	ebp
	ret	8
??E?$tmat2x4@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x4@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x4<double,1>::operator--, COMDAT
; _this$ = ecx

; 260  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 261  : 		--this->value[1];
; 262  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 263  : 	}

	ret	0
??F?$tmat2x4@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x4@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x4<double,1>::operator++, COMDAT
; _this$ = ecx

; 252  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 253  : 		++this->value[1];
; 254  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 255  : 	}

	ret	0
??E?$tmat2x4@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z PROC	; glm::tmat2x4<double,1>::operator[], COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 170  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@N$00@glm@@QBEABU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat2x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z PROC	; glm::tmat2x4<double,1>::operator[], COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 163  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@N$00@glm@@QAEAAU?$tvec4@N$00@1@H@Z ENDP	; glm::tmat2x4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@N$00@glm@@SAHXZ PROC			; glm::tmat2x4<double,1>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x4@N$00@glm@@SAHXZ ENDP			; glm::tmat2x4<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 153  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm2, QWORD PTR [eax+40]

; 154  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm2
	pop	ebp
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm2, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 147  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp

; 138  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 139  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+48]

; 140  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 130  : 	{

	push	ebp
	mov	ebp, esp

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm2, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 133  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp

; 124  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 125  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm2, QWORD PTR [eax+40]

; 126  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm2
	pop	ebp
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 116  : 	{

	push	ebp
	mov	ebp, esp

; 117  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	xmm1, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 118  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [eax+48]

; 119  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 111  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm2, QWORD PTR [eax+40]

; 112  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm2
	pop	ebp
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm2, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 105  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@0@Z PROC	; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp

; 62   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 63   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 64   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	8
??0?$tmat2x4@N$00@glm@@QAE@ABU?$tvec4@N$00@1@0@Z ENDP	; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@NNNNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_w0$ = 32						; size = 8
_x1$ = 40						; size = 8
_y1$ = 48						; size = 8
_z1$ = 56						; size = 8
_w1$ = 64						; size = 8
??0?$tmat2x4@N$00@glm@@QAE@NNNNNNNN@Z PROC		; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm2, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movsd	xmm1, QWORD PTR _w0$[ebp]

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	eax, ecx
	movsd	xmm3, QWORD PTR _z0$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm1, QWORD PTR _w1$[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movsd	xmm2, QWORD PTR _x1$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm3
	movsd	xmm3, QWORD PTR _z1$[ebp]
	unpcklpd xmm2, xmm0
	unpcklpd xmm3, xmm1
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm3
	pop	ebp
	ret	64					; 00000040H
??0?$tmat2x4@N$00@glm@@QAE@NNNNNNNN@Z ENDP		; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_scalar$ = 8						; size = 8
??0?$tmat2x4@N$00@glm@@QAE@N@Z PROC			; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	xorps	xmm0, xmm0
	xorps	xmm2, xmm2
	movsd	QWORD PTR $T1[ebp], xmm1
	movups	XMMWORD PTR $T1[ebp+8], xmm0

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	eax, ecx
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR $T1[ebp+24], xmm2
	movups	xmm0, XMMWORD PTR $T1[ebp+16]
	unpcklpd xmm2, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat2x4@N$00@glm@@QAE@N@Z ENDP			; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x4@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	ret	4
??0?$tmat2x4@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat2x4@N$00@glm@@QAE@XZ PROC			; glm::tmat2x4<double,1>::tmat2x4<double,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	ret	0
??0?$tmat2x4@N$00@glm@@QAE@XZ ENDP			; glm::tmat2x4<double,1>::tmat2x4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x4@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<float,1>::operator--, COMDAT
; _this$ = ecx

; 275  : 	{

	push	ebp
	mov	ebp, esp

; 276  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 277  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx+16], xmm0

; 278  : 		return Result;
; 279  : 	}

	pop	ebp
	ret	8
??F?$tmat2x4@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x4@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<float,1>::operator++, COMDAT
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp

; 268  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 269  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx+16], xmm0

; 270  : 		return Result;
; 271  : 	}

	pop	ebp
	ret	8
??E?$tmat2x4@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x4@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x4<float,1>::operator--, COMDAT
; _this$ = ecx

; 260  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 261  : 		--this->value[1];
; 262  : 		return *this;

	mov	eax, ecx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx+16], xmm0

; 263  : 	}

	ret	0
??F?$tmat2x4@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x4@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x4<float,1>::operator++, COMDAT
; _this$ = ecx

; 252  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 253  : 		++this->value[1];
; 254  : 		return *this;

	mov	eax, ecx
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx+16], xmm0

; 255  : 	}

	ret	0
??E?$tmat2x4@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z PROC	; glm::tmat2x4<float,1>::operator[], COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 170  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@M$00@glm@@QBEABU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat2x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z PROC	; glm::tmat2x4<float,1>::operator[], COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 163  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@M$00@glm@@QAEAAU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat2x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@M$00@glm@@SAHXZ PROC			; glm::tmat2x4<float,1>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x4@M$00@glm@@SAHXZ ENDP			; glm::tmat2x4<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 152  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 153  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 154  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 147  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp

; 138  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 139  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]

; 140  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 130  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 133  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 124  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 125  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 126  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 116  : 	{

	push	ebp
	mov	ebp, esp

; 117  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 118  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+16]

; 119  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 110  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 111  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 112  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 105  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@0@Z PROC	; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp

; 62   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	xmm0, XMMWORD PTR [eax]

; 63   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 64   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tmat2x4@M$00@glm@@QAE@ABU?$tvec4@M$00@1@0@Z ENDP	; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
??0?$tmat2x4@M$00@glm@@QAE@MMMMMMMM@Z PROC		; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w0$[ebp]
	movss	DWORD PTR $T2[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T1[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
??0?$tmat2x4@M$00@glm@@QAE@MMMMMMMM@Z ENDP		; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_scalar$ = 8						; size = 4
??0?$tmat2x4@M$00@glm@@QAE@M@Z PROC			; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	movss	xmm1, DWORD PTR _scalar$[ebp]

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp], xmm1
	mov	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	XMMWORD PTR [ecx], xmm0
	mov	DWORD PTR $T1[ebp], 0
	movss	DWORD PTR $T1[ebp+4], xmm1
	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@M@Z ENDP			; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x4@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 38   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	ret	4
??0?$tmat2x4@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat2x4@M$00@glm@@QAE@XZ PROC			; glm::tmat2x4<float,1>::tmat2x4<float,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	ret	0
??0?$tmat2x4@M$00@glm@@QAE@XZ ENDP			; glm::tmat2x4<float,1>::tmat2x4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x4@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<double,2>::operator--, COMDAT
; _this$ = ecx

; 275  : 	{

	push	ebp
	mov	ebp, esp

; 276  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0

; 277  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 278  : 		return Result;
; 279  : 	}

	pop	ebp
	ret	8
??F?$tmat2x4@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x4@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<double,2>::operator++, COMDAT
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp

; 268  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	movups	XMMWORD PTR [eax+48], xmm0

; 269  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 270  : 		return Result;
; 271  : 	}

	pop	ebp
	ret	8
??E?$tmat2x4@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x4@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x4<double,2>::operator--, COMDAT
; _this$ = ecx

; 260  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 261  : 		--this->value[1];
; 262  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 263  : 	}

	ret	0
??F?$tmat2x4@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x4@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x4<double,2>::operator++, COMDAT
; _this$ = ecx

; 252  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 253  : 		++this->value[1];
; 254  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx+48]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+48], xmm0

; 255  : 	}

	ret	0
??E?$tmat2x4@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z PROC	; glm::tmat2x4<double,2>::operator[], COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 170  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@N$01@glm@@QBEABU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat2x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z PROC	; glm::tmat2x4<double,2>::operator[], COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, ecx

; 163  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@N$01@glm@@QAEAAU?$tvec4@N$01@1@H@Z ENDP	; glm::tmat2x4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@N$01@glm@@SAHXZ PROC			; glm::tmat2x4<double,2>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x4@N$01@glm@@SAHXZ ENDP			; glm::tmat2x4<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 153  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm2, QWORD PTR [eax+40]

; 154  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm2
	pop	ebp
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm2, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 147  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp

; 138  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx+16], xmm0

; 139  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+48]

; 140  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 130  : 	{

	push	ebp
	mov	ebp, esp

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm2, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 133  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp

; 124  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 125  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm2, QWORD PTR [eax+40]

; 126  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm2
	pop	ebp
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 116  : 	{

	push	ebp
	mov	ebp, esp

; 117  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	xmm1, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1

; 118  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	xmm1, XMMWORD PTR [eax+48]

; 119  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm3, xmm3
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx+48], xmm3
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	movsd	xmm2, QWORD PTR [eax+16]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+16], xmm2

; 111  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]
	movsd	xmm2, QWORD PTR [eax+40]

; 112  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	unpcklpd xmm2, xmm3
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx+48], xmm2
	pop	ebp
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	xorps	xmm1, xmm1
	movsd	xmm2, QWORD PTR [eax]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm1

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	movsd	xmm2, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 105  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm1
	pop	ebp
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@0@Z PROC	; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp

; 62   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 63   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]

; 64   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+48], xmm0
	pop	ebp
	ret	8
??0?$tmat2x4@N$01@glm@@QAE@ABU?$tvec4@N$01@1@0@Z ENDP	; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@NNNNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_w0$ = 32						; size = 8
_x1$ = 40						; size = 8
_y1$ = 48						; size = 8
_z1$ = 56						; size = 8
_w1$ = 64						; size = 8
??0?$tmat2x4@N$01@glm@@QAE@NNNNNNNN@Z PROC		; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movsd	xmm2, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movsd	xmm1, QWORD PTR _w0$[ebp]

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	eax, ecx
	movsd	xmm3, QWORD PTR _z0$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	unpcklpd xmm3, xmm1
	movsd	xmm1, QWORD PTR _w1$[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movsd	xmm2, QWORD PTR _x1$[ebp]
	movups	XMMWORD PTR [ecx+16], xmm3
	movsd	xmm3, QWORD PTR _z1$[ebp]
	unpcklpd xmm2, xmm0
	unpcklpd xmm3, xmm1
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm3
	pop	ebp
	ret	64					; 00000040H
??0?$tmat2x4@N$01@glm@@QAE@NNNNNNNN@Z ENDP		; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -32						; size = 32
_scalar$ = 8						; size = 8
??0?$tmat2x4@N$01@glm@@QAE@N@Z PROC			; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	xorps	xmm0, xmm0
	xorps	xmm2, xmm2
	movsd	QWORD PTR $T1[ebp], xmm1
	movups	XMMWORD PTR $T1[ebp+8], xmm0

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	eax, ecx
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm2
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR $T1[ebp+24], xmm2
	movups	xmm0, XMMWORD PTR $T1[ebp+16]
	unpcklpd xmm2, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx+32], xmm2
	movups	XMMWORD PTR [ecx+48], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat2x4@N$01@glm@@QAE@N@Z ENDP			; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x4@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	ret	4
??0?$tmat2x4@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat2x4@N$01@glm@@QAE@XZ PROC			; glm::tmat2x4<double,2>::tmat2x4<double,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+48], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+48], xmm1
	ret	0
??0?$tmat2x4@N$01@glm@@QAE@XZ ENDP			; glm::tmat2x4<double,2>::tmat2x4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x4@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<float,2>::operator--, COMDAT
; _this$ = ecx

; 275  : 	{

	push	ebp
	mov	ebp, esp

; 276  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 277  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx+16], xmm0

; 278  : 		return Result;
; 279  : 	}

	pop	ebp
	ret	8
??F?$tmat2x4@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x4@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x4<float,2>::operator++, COMDAT
; _this$ = ecx

; 267  : 	{

	push	ebp
	mov	ebp, esp

; 268  : 		tmat2x4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 269  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx+16], xmm0

; 270  : 		return Result;
; 271  : 	}

	pop	ebp
	ret	8
??E?$tmat2x4@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??F?$tmat2x4@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x4@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x4<float,2>::operator--, COMDAT
; _this$ = ecx

; 260  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 261  : 		--this->value[1];
; 262  : 		return *this;

	mov	eax, ecx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx+16], xmm0

; 263  : 	}

	ret	0
??F?$tmat2x4@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??E?$tmat2x4@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x4@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x4<float,2>::operator++, COMDAT
; _this$ = ecx

; 252  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 253  : 		++this->value[1];
; 254  : 		return *this;

	mov	eax, ecx
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx+16], xmm0

; 255  : 	}

	ret	0
??E?$tmat2x4@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z PROC	; glm::tmat2x4<float,2>::operator[], COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp

; 168  : 		assert(i < this->length());
; 169  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 170  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@M$01@glm@@QBEABU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat2x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z PROC	; glm::tmat2x4<float,2>::operator[], COMDAT
; _this$ = ecx

; 160  : 	{

	push	ebp
	mov	ebp, esp

; 161  : 		assert(i < this->length());
; 162  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 163  : 	}

	pop	ebp
	ret	4
??A?$tmat2x4@M$01@glm@@QAEAAU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat2x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@M$01@glm@@SAHXZ PROC			; glm::tmat2x4<float,2>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x4@M$01@glm@@SAHXZ ENDP			; glm::tmat2x4<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 152  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 153  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 154  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 145  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 146  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 147  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp

; 138  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 139  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]

; 140  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 130  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 131  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 132  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 133  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 124  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 125  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 126  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 116  : 	{

	push	ebp
	mov	ebp, esp

; 117  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 118  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+16]

; 119  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 110  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 111  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR [eax+20]

; 112  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+8], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_m$ = 8							; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 103  : 		this->value[0] = col_type(m[0], 0, 0);

	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 104  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax+12]

; 105  : 	}

	mov	eax, ecx
	movss	DWORD PTR $T1[ebp+4], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@0@Z PROC	; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 61   : 	{

	push	ebp
	mov	ebp, esp

; 62   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	xmm0, XMMWORD PTR [eax]

; 63   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 64   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tmat2x4@M$01@glm@@QAE@ABU?$tvec4@M$01@1@0@Z ENDP	; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@MMMMMMMM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
_x1$ = 24						; size = 4
_y1$ = 28						; size = 4
_z1$ = 32						; size = 4
_w1$ = 36						; size = 4
??0?$tmat2x4@M$01@glm@@QAE@MMMMMMMM@Z PROC		; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 54   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 55   : 		this->value[0] = col_type(x0, y0, z0, w0);

	movss	xmm0, DWORD PTR _x0$[ebp]

; 56   : 		this->value[1] = col_type(x1, y1, z1, w1);
; 57   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T2[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z0$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w0$[ebp]
	movss	DWORD PTR $T2[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR _y1$[ebp]
	movss	DWORD PTR $T1[ebp+4], xmm0
	movss	xmm0, DWORD PTR _z1$[ebp]
	movss	DWORD PTR $T1[ebp+8], xmm0
	movss	xmm0, DWORD PTR _w1$[ebp]
	movss	DWORD PTR $T1[ebp+12], xmm0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
??0?$tmat2x4@M$01@glm@@QAE@MMMMMMMM@Z ENDP		; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
$T2 = -16						; size = 16
_scalar$ = 8						; size = 4
??0?$tmat2x4@M$01@glm@@QAE@M@Z PROC			; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 43   : 		value_type const Zero(0);
; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	movss	xmm1, DWORD PTR _scalar$[ebp]

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);
; 46   : 	}

	mov	eax, ecx
	movss	DWORD PTR $T2[ebp], xmm1
	mov	DWORD PTR $T2[ebp+4], 0
	mov	DWORD PTR $T2[ebp+8], 0
	mov	DWORD PTR $T2[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	XMMWORD PTR [ecx], xmm0
	mov	DWORD PTR $T1[ebp], 0
	movss	DWORD PTR $T1[ebp+4], xmm1
	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR $T1[ebp+12], 0
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx+16], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@M@Z ENDP			; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x4@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 38   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	ret	4
??0?$tmat2x4@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat2x4@M$01@glm@@QAE@XZ PROC			; glm::tmat2x4<float,2>::tmat2x4<float,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@0000000000000000000000003f800000

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	ret	0
??0?$tmat2x4@M$01@glm@@QAE@XZ ENDP			; glm::tmat2x4<float,2>::tmat2x4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x3@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<double,0>::operator--, COMDAT
; _this$ = ecx

; 274  : 	{

	push	ebp
	mov	ebp, esp

; 275  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 276  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 277  : 		return Result;
; 278  : 	}

	pop	ebp
	ret	8
??F?$tmat2x3@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x3@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<double,0>::operator++, COMDAT
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp

; 267  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 268  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 269  : 		return Result;
; 270  : 	}

	pop	ebp
	ret	8
??E?$tmat2x3@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x3@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x3<double,0>::operator--, COMDAT
; _this$ = ecx

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 262  : 	}

	ret	0
??F?$tmat2x3@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x3@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x3<double,0>::operator++, COMDAT
; _this$ = ecx

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 254  : 	}

	ret	0
??E?$tmat2x3@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z PROC	; glm::tmat2x3<double,0>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@N$0A@@glm@@QBEABU?$tvec3@N$0A@@1@H@Z ENDP	; glm::tmat2x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z PROC	; glm::tmat2x3<double,0>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@N$0A@@glm@@QAEAAU?$tvec3@N$0A@@1@H@Z ENDP	; glm::tmat2x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@N$0A@@glm@@SAHXZ PROC			; glm::tmat2x3<double,0>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x3@N$0A@@glm@@SAHXZ ENDP			; glm::tmat2x3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp

; 151  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [ecx+16], xmm0

; 152  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+24]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+40]

; 153  : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+40], xmm0
	pop	ebp
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp

; 144  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 145  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 146  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1
	movq	QWORD PTR [ecx+40], xmm2
	pop	ebp
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp

; 137  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 138  : 		this->value[1] = col_type(m[1]);

	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+48]

; 139  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	pop	ebp
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp

; 130  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 131  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 132  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1
	movq	QWORD PTR [ecx+40], xmm2
	pop	ebp
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp

; 123  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 124  : 		this->value[1] = col_type(m[1]);

	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+48]

; 125  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	pop	ebp
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp

; 116  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 117  : 		this->value[1] = col_type(m[1]);

	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+48]

; 118  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	pop	ebp
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movq	xmm1, QWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movq	QWORD PTR [ecx+16], xmm1

; 110  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	movq	xmm1, QWORD PTR [eax+40]

; 111  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	QWORD PTR [ecx+40], xmm1
	pop	ebp
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z PROC ; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp

; 102  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 103  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 104  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1
	movq	QWORD PTR [ecx+40], xmm2
	pop	ebp
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tmat2x2@N$0A@@1@@Z ENDP ; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@0@Z PROC	; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp

; 61   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 62   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	QWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 63   : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+40], xmm0
	pop	ebp
	ret	8
??0?$tmat2x3@N$0A@@glm@@QAE@ABU?$tvec3@N$0A@@1@0@Z ENDP	; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@NNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_x1$ = 32						; size = 8
_y1$ = 40						; size = 8
_z1$ = 48						; size = 8
??0?$tmat2x3@N$0A@@glm@@QAE@NNNNNN@Z PROC		; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movsd	xmm2, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movsd	xmm1, QWORD PTR _z0$[ebp]

; 55   : 		this->value[1] = col_type(x1, y1, z1);
; 56   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movsd	xmm2, QWORD PTR _x1$[ebp]
	movq	QWORD PTR [ecx+16], xmm1
	movsd	xmm1, QWORD PTR _z1$[ebp]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	pop	ebp
	ret	48					; 00000030H
??0?$tmat2x3@N$0A@@glm@@QAE@NNNNNN@Z ENDP		; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_scalar$ = 8						; size = 8
??0?$tmat2x3@N$0A@@glm@@QAE@N@Z PROC			; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	movsd	xmm2, QWORD PTR _scalar$[ebp]
	xorps	xmm1, xmm1
	xorps	xmm3, xmm3
	movsd	QWORD PTR $T1[ebp], xmm2
	movups	XMMWORD PTR $T1[ebp+8], xmm1

; 44   : 		this->value[1] = col_type(0, scalar, 0);
; 45   : 	}

	mov	eax, ecx
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, xmm3
	unpckhpd xmm1, xmm1
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	QWORD PTR [ecx+16], xmm1
	movq	QWORD PTR [ecx+40], xmm3
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat2x3@N$0A@@glm@@QAE@N@Z ENDP			; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x3@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	ret	4
??0?$tmat2x3@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat2x3@N$0A@@glm@@QAE@XZ PROC			; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	QWORD PTR [ecx+16], xmm1
	movq	QWORD PTR [ecx+40], xmm1
	ret	0
??0?$tmat2x3@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x3@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<float,0>::operator--, COMDAT
; _this$ = ecx

; 274  : 	{

	push	ebp
	mov	ebp, esp

; 275  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 276  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 277  : 		return Result;
; 278  : 	}

	pop	ebp
	ret	8
??F?$tmat2x3@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x3@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<float,0>::operator++, COMDAT
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp

; 267  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 268  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 269  : 		return Result;
; 270  : 	}

	pop	ebp
	ret	8
??E?$tmat2x3@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x3@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x3<float,0>::operator--, COMDAT
; _this$ = ecx

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 262  : 	}

	ret	0
??F?$tmat2x3@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x3@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x3<float,0>::operator++, COMDAT
; _this$ = ecx

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 254  : 	}

	ret	0
??E?$tmat2x3@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z PROC	; glm::tmat2x3<float,0>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@M$0A@@glm@@QBEABU?$tvec3@M$0A@@1@H@Z ENDP	; glm::tmat2x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z PROC	; glm::tmat2x3<float,0>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@M$0A@@glm@@QAEAAU?$tvec3@M$0A@@1@H@Z ENDP	; glm::tmat2x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x3<float,0>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 151  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movq	xmm0, QWORD PTR [ecx]
	movq	QWORD PTR [edx], xmm0
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax

; 152  : 		this->value[1] = m[1];

	movq	xmm0, QWORD PTR [ecx+12]
	movq	QWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], eax

; 153  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 144  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T2[ebp+8]

; 145  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T1[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 146  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 137  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 138  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+12], xmm2
	mov	DWORD PTR [edx+20], eax

; 139  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 130  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T2[ebp+8]

; 131  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T1[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 132  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 123  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 124  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+12], xmm2
	mov	DWORD PTR [edx+20], eax

; 125  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 116  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 117  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+12], xmm2
	mov	DWORD PTR [edx+20], eax

; 118  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 109  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movq	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+8]
	movq	QWORD PTR [edx], xmm0
	mov	DWORD PTR [edx+8], eax

; 110  : 		this->value[1] = col_type(m[1]);

	movq	xmm0, QWORD PTR [ecx+12]
	mov	eax, DWORD PTR [ecx+20]
	movq	QWORD PTR [edx+12], xmm0
	mov	DWORD PTR [edx+20], eax

; 111  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 102  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T2[ebp+8]

; 103  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T1[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 104  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@0@Z PROC	; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp

; 61   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 62   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+20], eax

; 63   : 	}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tmat2x3@M$0A@@glm@@QAE@ABU?$tvec3@M$0A@@1@0@Z ENDP	; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@MMMMMM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@MMMMMM@Z PROC		; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movss	xmm2, DWORD PTR _x0$[ebp]
	movss	xmm1, DWORD PTR _y0$[ebp]
	movss	xmm0, DWORD PTR _z0$[ebp]
	unpcklps xmm2, xmm1

; 55   : 		this->value[1] = col_type(x1, y1, z1);

	movss	xmm1, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	movq	QWORD PTR [ecx], xmm2
	movss	xmm2, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	movss	xmm0, DWORD PTR _z1$[ebp]
	mov	DWORD PTR [ecx+8], eax
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+12], xmm2
	mov	DWORD PTR [ecx+20], eax

; 56   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0?$tmat2x3@M$0A@@glm@@QAE@MMMMMM@Z ENDP		; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_scalar$ = 8						; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@M@Z PROC			; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	movss	xmm1, DWORD PTR _scalar$[ebp]
	xorps	xmm2, xmm2
	mov	DWORD PTR [ecx], 0
	movaps	xmm0, xmm1
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	unpcklps xmm0, xmm2
	mov	DWORD PTR $T2[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp+8]
	movq	QWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+8], eax

; 44   : 		this->value[1] = col_type(0, scalar, 0);

	unpcklps xmm2, xmm1
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+12], xmm2
	mov	DWORD PTR [ecx+20], eax

; 45   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@M@Z ENDP			; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x3@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 38   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	ret	4
??0?$tmat2x3@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
??0?$tmat2x3@M$0A@@glm@@QAE@XZ PROC			; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	movss	xmm1, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	DWORD PTR [ecx], 0
	movaps	xmm0, xmm1
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	unpcklps xmm0, xmm2
	mov	DWORD PTR $T2[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp+8]
	movq	QWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+8], eax

; 14   : 				this->value[1] = col_type(0, 1, 0);

	unpcklps xmm2, xmm1
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+12], xmm2
	mov	DWORD PTR [ecx+20], eax

; 15   : #			endif
; 16   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x3@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x3@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<double,1>::operator--, COMDAT
; _this$ = ecx

; 274  : 	{

	push	ebp
	mov	ebp, esp

; 275  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 276  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 277  : 		return Result;
; 278  : 	}

	pop	ebp
	ret	8
??F?$tmat2x3@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x3@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<double,1>::operator++, COMDAT
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp

; 267  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 268  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 269  : 		return Result;
; 270  : 	}

	pop	ebp
	ret	8
??E?$tmat2x3@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x3@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x3<double,1>::operator--, COMDAT
; _this$ = ecx

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 262  : 	}

	ret	0
??F?$tmat2x3@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x3@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x3<double,1>::operator++, COMDAT
; _this$ = ecx

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 254  : 	}

	ret	0
??E?$tmat2x3@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z PROC	; glm::tmat2x3<double,1>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@N$00@glm@@QBEABU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat2x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z PROC	; glm::tmat2x3<double,1>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@N$00@glm@@QAEAAU?$tvec3@N$00@1@H@Z ENDP	; glm::tmat2x3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@N$00@glm@@SAHXZ PROC			; glm::tmat2x3<double,1>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x3@N$00@glm@@SAHXZ ENDP			; glm::tmat2x3<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp

; 151  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [ecx+16], xmm0

; 152  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+24]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+40]

; 153  : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+40], xmm0
	pop	ebp
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp

; 144  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 145  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 146  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1
	movq	QWORD PTR [ecx+40], xmm2
	pop	ebp
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp

; 137  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 138  : 		this->value[1] = col_type(m[1]);

	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+48]

; 139  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	pop	ebp
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp

; 130  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 131  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 132  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1
	movq	QWORD PTR [ecx+40], xmm2
	pop	ebp
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp

; 123  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 124  : 		this->value[1] = col_type(m[1]);

	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+48]

; 125  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	pop	ebp
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp

; 116  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 117  : 		this->value[1] = col_type(m[1]);

	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+48]

; 118  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	pop	ebp
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movq	xmm1, QWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movq	QWORD PTR [ecx+16], xmm1

; 110  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	movq	xmm1, QWORD PTR [eax+40]

; 111  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	QWORD PTR [ecx+40], xmm1
	pop	ebp
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp

; 102  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 103  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 104  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1
	movq	QWORD PTR [ecx+40], xmm2
	pop	ebp
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tmat2x2@N$00@1@@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@0@Z PROC	; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp

; 61   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 62   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	QWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 63   : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+40], xmm0
	pop	ebp
	ret	8
??0?$tmat2x3@N$00@glm@@QAE@ABU?$tvec3@N$00@1@0@Z ENDP	; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@NNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_x1$ = 32						; size = 8
_y1$ = 40						; size = 8
_z1$ = 48						; size = 8
??0?$tmat2x3@N$00@glm@@QAE@NNNNNN@Z PROC		; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movsd	xmm2, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movsd	xmm1, QWORD PTR _z0$[ebp]

; 55   : 		this->value[1] = col_type(x1, y1, z1);
; 56   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movsd	xmm2, QWORD PTR _x1$[ebp]
	movq	QWORD PTR [ecx+16], xmm1
	movsd	xmm1, QWORD PTR _z1$[ebp]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	pop	ebp
	ret	48					; 00000030H
??0?$tmat2x3@N$00@glm@@QAE@NNNNNN@Z ENDP		; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_scalar$ = 8						; size = 8
??0?$tmat2x3@N$00@glm@@QAE@N@Z PROC			; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	movsd	xmm2, QWORD PTR _scalar$[ebp]
	xorps	xmm1, xmm1
	xorps	xmm3, xmm3
	movsd	QWORD PTR $T1[ebp], xmm2
	movups	XMMWORD PTR $T1[ebp+8], xmm1

; 44   : 		this->value[1] = col_type(0, scalar, 0);
; 45   : 	}

	mov	eax, ecx
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, xmm3
	unpckhpd xmm1, xmm1
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	QWORD PTR [ecx+16], xmm1
	movq	QWORD PTR [ecx+40], xmm3
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat2x3@N$00@glm@@QAE@N@Z ENDP			; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x3@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	ret	4
??0?$tmat2x3@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat2x3@N$00@glm@@QAE@XZ PROC			; glm::tmat2x3<double,1>::tmat2x3<double,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	QWORD PTR [ecx+16], xmm1
	movq	QWORD PTR [ecx+40], xmm1
	ret	0
??0?$tmat2x3@N$00@glm@@QAE@XZ ENDP			; glm::tmat2x3<double,1>::tmat2x3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x3@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<float,1>::operator--, COMDAT
; _this$ = ecx

; 274  : 	{

	push	ebp
	mov	ebp, esp

; 275  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 276  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 277  : 		return Result;
; 278  : 	}

	pop	ebp
	ret	8
??F?$tmat2x3@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x3@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<float,1>::operator++, COMDAT
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp

; 267  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 268  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 269  : 		return Result;
; 270  : 	}

	pop	ebp
	ret	8
??E?$tmat2x3@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x3@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x3<float,1>::operator--, COMDAT
; _this$ = ecx

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 262  : 	}

	ret	0
??F?$tmat2x3@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x3@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x3<float,1>::operator++, COMDAT
; _this$ = ecx

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 254  : 	}

	ret	0
??E?$tmat2x3@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z PROC	; glm::tmat2x3<float,1>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@M$00@glm@@QBEABU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat2x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z PROC	; glm::tmat2x3<float,1>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@M$00@glm@@QAEAAU?$tvec3@M$00@1@H@Z ENDP	; glm::tmat2x3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@M$00@glm@@SAHXZ PROC			; glm::tmat2x3<float,1>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x3@M$00@glm@@SAHXZ ENDP			; glm::tmat2x3<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 151  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movq	xmm0, QWORD PTR [ecx]
	movq	QWORD PTR [edx], xmm0
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax

; 152  : 		this->value[1] = m[1];

	movq	xmm0, QWORD PTR [ecx+12]
	movq	QWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], eax

; 153  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 144  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T2[ebp+8]

; 145  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T1[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 146  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 137  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 138  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+12], xmm2
	mov	DWORD PTR [edx+20], eax

; 139  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 130  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T2[ebp+8]

; 131  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T1[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 132  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 123  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 124  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+12], xmm2
	mov	DWORD PTR [edx+20], eax

; 125  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 116  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 117  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+12], xmm2
	mov	DWORD PTR [edx+20], eax

; 118  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 109  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movq	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+8]
	movq	QWORD PTR [edx], xmm0
	mov	DWORD PTR [edx+8], eax

; 110  : 		this->value[1] = col_type(m[1]);

	movq	xmm0, QWORD PTR [ecx+12]
	mov	eax, DWORD PTR [ecx+20]
	movq	QWORD PTR [edx+12], xmm0
	mov	DWORD PTR [edx+20], eax

; 111  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 102  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T2[ebp+8]

; 103  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T1[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 104  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tmat2x2@M$00@1@@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@0@Z PROC	; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp

; 61   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 62   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+20], eax

; 63   : 	}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tmat2x3@M$00@glm@@QAE@ABU?$tvec3@M$00@1@0@Z ENDP	; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@MMMMMM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
??0?$tmat2x3@M$00@glm@@QAE@MMMMMM@Z PROC		; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movss	xmm2, DWORD PTR _x0$[ebp]
	movss	xmm1, DWORD PTR _y0$[ebp]
	movss	xmm0, DWORD PTR _z0$[ebp]
	unpcklps xmm2, xmm1

; 55   : 		this->value[1] = col_type(x1, y1, z1);

	movss	xmm1, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	movq	QWORD PTR [ecx], xmm2
	movss	xmm2, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	movss	xmm0, DWORD PTR _z1$[ebp]
	mov	DWORD PTR [ecx+8], eax
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+12], xmm2
	mov	DWORD PTR [ecx+20], eax

; 56   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0?$tmat2x3@M$00@glm@@QAE@MMMMMM@Z ENDP		; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_scalar$ = 8						; size = 4
??0?$tmat2x3@M$00@glm@@QAE@M@Z PROC			; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	movss	xmm1, DWORD PTR _scalar$[ebp]
	xorps	xmm2, xmm2
	mov	DWORD PTR [ecx], 0
	movaps	xmm0, xmm1
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	unpcklps xmm0, xmm2
	mov	DWORD PTR $T2[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp+8]
	movq	QWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+8], eax

; 44   : 		this->value[1] = col_type(0, scalar, 0);

	unpcklps xmm2, xmm1
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+12], xmm2
	mov	DWORD PTR [ecx+20], eax

; 45   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@M@Z ENDP			; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x3@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 38   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	ret	4
??0?$tmat2x3@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
??0?$tmat2x3@M$00@glm@@QAE@XZ PROC			; glm::tmat2x3<float,1>::tmat2x3<float,1>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	movss	xmm1, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	DWORD PTR [ecx], 0
	movaps	xmm0, xmm1
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	unpcklps xmm0, xmm2
	mov	DWORD PTR $T2[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp+8]
	movq	QWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+8], eax

; 14   : 				this->value[1] = col_type(0, 1, 0);

	unpcklps xmm2, xmm1
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+12], xmm2
	mov	DWORD PTR [ecx+20], eax

; 15   : #			endif
; 16   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x3@M$00@glm@@QAE@XZ ENDP			; glm::tmat2x3<float,1>::tmat2x3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x3@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<double,2>::operator--, COMDAT
; _this$ = ecx

; 274  : 	{

	push	ebp
	mov	ebp, esp

; 275  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 276  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 277  : 		return Result;
; 278  : 	}

	pop	ebp
	ret	8
??F?$tmat2x3@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x3@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<double,2>::operator++, COMDAT
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp

; 267  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 268  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 269  : 		return Result;
; 270  : 	}

	pop	ebp
	ret	8
??E?$tmat2x3@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x3@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x3<double,2>::operator--, COMDAT
; _this$ = ecx

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 262  : 	}

	ret	0
??F?$tmat2x3@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x3@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x3<double,2>::operator++, COMDAT
; _this$ = ecx

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx+32]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+32], xmm0

; 254  : 	}

	ret	0
??E?$tmat2x3@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z PROC	; glm::tmat2x3<double,2>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@N$01@glm@@QBEABU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat2x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z PROC	; glm::tmat2x3<double,2>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*8]

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@N$01@glm@@QAEAAU?$tvec3@N$01@1@H@Z ENDP	; glm::tmat2x3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@N$01@glm@@SAHXZ PROC			; glm::tmat2x3<double,2>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x3@N$01@glm@@SAHXZ ENDP			; glm::tmat2x3<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp

; 151  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [ecx+16], xmm0

; 152  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+24]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+40]

; 153  : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+40], xmm0
	pop	ebp
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp

; 144  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 145  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 146  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1
	movq	QWORD PTR [ecx+40], xmm2
	pop	ebp
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp

; 137  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 138  : 		this->value[1] = col_type(m[1]);

	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+48]

; 139  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	pop	ebp
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp

; 130  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 131  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 132  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1
	movq	QWORD PTR [ecx+40], xmm2
	pop	ebp
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp

; 123  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 124  : 		this->value[1] = col_type(m[1]);

	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+48]

; 125  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	pop	ebp
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp

; 116  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm2, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR [eax+16]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx], xmm2
	movq	QWORD PTR [ecx+16], xmm1

; 117  : 		this->value[1] = col_type(m[1]);

	movsd	xmm2, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]
	movsd	xmm1, QWORD PTR [eax+48]

; 118  : 	}

	mov	eax, ecx
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	pop	ebp
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movq	xmm1, QWORD PTR [eax+16]
	movups	XMMWORD PTR [ecx], xmm0
	movq	QWORD PTR [ecx+16], xmm1

; 110  : 		this->value[1] = col_type(m[1]);

	movups	xmm0, XMMWORD PTR [eax+24]
	movq	xmm1, QWORD PTR [eax+40]

; 111  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	QWORD PTR [ecx+40], xmm1
	pop	ebp
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp

; 102  : 		this->value[0] = col_type(m[0], 0);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2
	movups	XMMWORD PTR [ecx+16], xmm2
	movups	XMMWORD PTR [ecx+32], xmm2
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movq	QWORD PTR [ecx+16], xmm2

; 103  : 		this->value[1] = col_type(m[1], 0);

	movsd	xmm1, QWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [eax+24]

; 104  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+24], xmm1
	movq	QWORD PTR [ecx+40], xmm2
	pop	ebp
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tmat2x2@N$01@1@@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@0@Z PROC	; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp

; 61   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 62   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	QWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	xmm0, QWORD PTR [eax+16]

; 63   : 	}

	mov	eax, ecx
	movq	QWORD PTR [ecx+40], xmm0
	pop	ebp
	ret	8
??0?$tmat2x3@N$01@glm@@QAE@ABU?$tvec3@N$01@1@0@Z ENDP	; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@NNNNNN@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 8
_y0$ = 16						; size = 8
_z0$ = 24						; size = 8
_x1$ = 32						; size = 8
_y1$ = 40						; size = 8
_z1$ = 48						; size = 8
??0?$tmat2x3@N$01@glm@@QAE@NNNNNN@Z PROC		; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movsd	xmm2, QWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movsd	xmm1, QWORD PTR _z0$[ebp]

; 55   : 		this->value[1] = col_type(x1, y1, z1);
; 56   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	movsd	xmm0, QWORD PTR _y0$[ebp]
	unpcklpd xmm2, xmm0
	movsd	xmm0, QWORD PTR _y1$[ebp]
	movups	XMMWORD PTR [ecx], xmm2
	movsd	xmm2, QWORD PTR _x1$[ebp]
	movq	QWORD PTR [ecx+16], xmm1
	movsd	xmm1, QWORD PTR _z1$[ebp]
	unpcklpd xmm2, xmm0
	movups	XMMWORD PTR [ecx+24], xmm2
	movq	QWORD PTR [ecx+40], xmm1
	pop	ebp
	ret	48					; 00000030H
??0?$tmat2x3@N$01@glm@@QAE@NNNNNN@Z ENDP		; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_scalar$ = 8						; size = 8
??0?$tmat2x3@N$01@glm@@QAE@N@Z PROC			; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	movsd	xmm2, QWORD PTR _scalar$[ebp]
	xorps	xmm1, xmm1
	xorps	xmm3, xmm3
	movsd	QWORD PTR $T1[ebp], xmm2
	movups	XMMWORD PTR $T1[ebp+8], xmm1

; 44   : 		this->value[1] = col_type(0, scalar, 0);
; 45   : 	}

	mov	eax, ecx
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm3
	movups	XMMWORD PTR [ecx+16], xmm3
	movups	XMMWORD PTR [ecx+32], xmm3
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, xmm3
	unpckhpd xmm1, xmm1
	unpcklpd xmm0, xmm2
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	QWORD PTR [ecx+16], xmm1
	movq	QWORD PTR [ecx+40], xmm3
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$tmat2x3@N$01@glm@@QAE@N@Z ENDP			; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x3@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 38   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	XMMWORD PTR [ecx+32], xmm0
	ret	4
??0?$tmat2x3@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat2x3@N$01@glm@@QAE@XZ PROC			; glm::tmat2x3<double,2>::tmat2x3<double,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [ecx], xmm1

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);
; 14   : 				this->value[1] = col_type(0, 1, 0);
; 15   : #			endif
; 16   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm1
	movups	XMMWORD PTR [ecx+32], xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+24], xmm0
	movq	QWORD PTR [ecx+16], xmm1
	movq	QWORD PTR [ecx+40], xmm1
	ret	0
??0?$tmat2x3@N$01@glm@@QAE@XZ ENDP			; glm::tmat2x3<double,2>::tmat2x3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x3@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<float,2>::operator--, COMDAT
; _this$ = ecx

; 274  : 	{

	push	ebp
	mov	ebp, esp

; 275  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 276  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 277  : 		return Result;
; 278  : 	}

	pop	ebp
	ret	8
??F?$tmat2x3@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x3@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x3<float,2>::operator++, COMDAT
; _this$ = ecx

; 266  : 	{

	push	ebp
	mov	ebp, esp

; 267  : 		tmat2x3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 268  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 269  : 		return Result;
; 270  : 	}

	pop	ebp
	ret	8
??E?$tmat2x3@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??F?$tmat2x3@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x3@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x3<float,2>::operator--, COMDAT
; _this$ = ecx

; 259  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 260  : 		--this->value[1];
; 261  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 262  : 	}

	ret	0
??F?$tmat2x3@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??E?$tmat2x3@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x3@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x3<float,2>::operator++, COMDAT
; _this$ = ecx

; 251  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 252  : 		++this->value[1];
; 253  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+16], xmm0
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+20], xmm0

; 254  : 	}

	ret	0
??E?$tmat2x3@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z PROC	; glm::tmat2x3<float,2>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@M$01@glm@@QBEABU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat2x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z PROC	; glm::tmat2x3<float,2>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x3@M$01@glm@@QAEAAU?$tvec3@M$01@1@H@Z ENDP	; glm::tmat2x3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@M$01@glm@@SAHXZ PROC			; glm::tmat2x3<float,2>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x3@M$01@glm@@SAHXZ ENDP			; glm::tmat2x3<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 151  : 		this->value[0] = m[0];

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movq	xmm0, QWORD PTR [ecx]
	movq	QWORD PTR [edx], xmm0
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax

; 152  : 		this->value[1] = m[1];

	movq	xmm0, QWORD PTR [ecx+12]
	movq	QWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], eax

; 153  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 144  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T2[ebp+8]

; 145  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T1[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 146  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 137  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 138  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+12], xmm2
	mov	DWORD PTR [edx+20], eax

; 139  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 130  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T2[ebp+8]

; 131  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T1[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 132  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 123  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 124  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+12], xmm2
	mov	DWORD PTR [edx+20], eax

; 125  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 116  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm2, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [ecx+8]
	unpcklps xmm2, xmm1
	movq	QWORD PTR [edx], xmm2
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 117  : 		this->value[1] = col_type(m[1]);

	movss	xmm2, DWORD PTR [ecx+16]
	movss	xmm1, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [ecx+24]
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [edx+12], xmm2
	mov	DWORD PTR [edx+20], eax

; 118  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 109  : 		this->value[0] = col_type(m[0]);

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movq	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+8]
	movq	QWORD PTR [edx], xmm0
	mov	DWORD PTR [edx+8], eax

; 110  : 		this->value[1] = col_type(m[1]);

	movq	xmm0, QWORD PTR [ecx+12]
	mov	eax, DWORD PTR [ecx+20]
	movq	QWORD PTR [edx+12], xmm0
	mov	DWORD PTR [edx+20], eax

; 111  : 	}

	mov	eax, edx
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_m$ = 8							; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	edx, ecx

; 102  : 		this->value[0] = col_type(m[0], 0);

	mov	DWORD PTR $T2[ebp+8], 0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR $T2[ebp+8]

; 103  : 		this->value[1] = col_type(m[1], 0);

	mov	DWORD PTR $T1[ebp+8], 0
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	movss	xmm1, DWORD PTR [ecx]
	movss	xmm0, DWORD PTR [ecx+4]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx], xmm1
	mov	DWORD PTR [edx+8], eax
	movss	xmm1, DWORD PTR [ecx+8]
	movss	xmm0, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T1[ebp+8]
	unpcklps xmm1, xmm0
	movq	QWORD PTR [edx+12], xmm1
	mov	DWORD PTR [edx+20], eax

; 104  : 	}

	mov	eax, edx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tmat2x2@M$01@1@@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@0@Z PROC	; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 60   : 	{

	push	ebp
	mov	ebp, esp

; 61   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 62   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movq	xmm0, QWORD PTR [eax]
	movq	QWORD PTR [ecx+12], xmm0
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+20], eax

; 63   : 	}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tmat2x3@M$01@glm@@QAE@ABU?$tvec3@M$01@1@0@Z ENDP	; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@MMMMMM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_x1$ = 20						; size = 4
_y1$ = 24						; size = 4
_z1$ = 28						; size = 4
??0?$tmat2x3@M$01@glm@@QAE@MMMMMM@Z PROC		; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 54   : 		this->value[0] = col_type(x0, y0, z0);

	movss	xmm2, DWORD PTR _x0$[ebp]
	movss	xmm1, DWORD PTR _y0$[ebp]
	movss	xmm0, DWORD PTR _z0$[ebp]
	unpcklps xmm2, xmm1

; 55   : 		this->value[1] = col_type(x1, y1, z1);

	movss	xmm1, DWORD PTR _y1$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	movq	QWORD PTR [ecx], xmm2
	movss	xmm2, DWORD PTR _x1$[ebp]
	movss	DWORD PTR $T2[ebp+8], xmm0
	mov	eax, DWORD PTR $T2[ebp+8]
	movss	xmm0, DWORD PTR _z1$[ebp]
	mov	DWORD PTR [ecx+8], eax
	unpcklps xmm2, xmm1
	movss	DWORD PTR $T1[ebp+8], xmm0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+12], xmm2
	mov	DWORD PTR [ecx+20], eax

; 56   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0?$tmat2x3@M$01@glm@@QAE@MMMMMM@Z ENDP		; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
_scalar$ = 8						; size = 4
??0?$tmat2x3@M$01@glm@@QAE@M@Z PROC			; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	movss	xmm1, DWORD PTR _scalar$[ebp]
	xorps	xmm2, xmm2
	mov	DWORD PTR [ecx], 0
	movaps	xmm0, xmm1
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	unpcklps xmm0, xmm2
	mov	DWORD PTR $T2[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp+8]
	movq	QWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+8], eax

; 44   : 		this->value[1] = col_type(0, scalar, 0);

	unpcklps xmm2, xmm1
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+12], xmm2
	mov	DWORD PTR [ecx+20], eax

; 45   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@M@Z ENDP			; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x3@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 38   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	ret	4
??0?$tmat2x3@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
??0?$tmat2x3@M$01@glm@@QAE@XZ PROC			; glm::tmat2x3<float,2>::tmat2x3<float,2>, COMDAT
; _this$ = ecx

; 11   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	movss	xmm1, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	DWORD PTR [ecx], 0
	movaps	xmm0, xmm1
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	unpcklps xmm0, xmm2
	mov	DWORD PTR $T2[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp+8]
	movq	QWORD PTR [ecx], xmm0
	mov	DWORD PTR [ecx+8], eax

; 14   : 				this->value[1] = col_type(0, 1, 0);

	unpcklps xmm2, xmm1
	mov	DWORD PTR $T1[ebp+8], 0
	mov	eax, DWORD PTR $T1[ebp+8]
	movq	QWORD PTR [ecx+12], xmm2
	mov	DWORD PTR [ecx+20], eax

; 15   : #			endif
; 16   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x3@M$01@glm@@QAE@XZ ENDP			; glm::tmat2x3<float,2>::tmat2x3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x2@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<double,0>::operator--, COMDAT
; _this$ = ecx

; 288  : 	{

	push	ebp
	mov	ebp, esp

; 289  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 290  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 291  : 		return Result;
; 292  : 	}

	pop	ebp
	ret	8
??F?$tmat2x2@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x2@N$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<double,0>::operator++, COMDAT
; _this$ = ecx

; 280  : 	{

	push	ebp
	mov	ebp, esp

; 281  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 282  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 283  : 		return Result;
; 284  : 	}

	pop	ebp
	ret	8
??E?$tmat2x2@N$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x2@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x2<double,0>::operator--, COMDAT
; _this$ = ecx

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 276  : 	}

	ret	0
??F?$tmat2x2@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x2@N$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x2<double,0>::operator++, COMDAT
; _this$ = ecx

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 268  : 	}

	ret	0
??E?$tmat2x2@N$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z PROC	; glm::tmat2x2<double,0>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@N$0A@@glm@@QBEABU?$tvec2@N$0A@@1@H@Z ENDP	; glm::tmat2x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z PROC	; glm::tmat2x2<double,0>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@N$0A@@glm@@QAEAAU?$tvec2@N$0A@@1@H@Z ENDP	; glm::tmat2x2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@N$0A@@glm@@SAHXZ PROC			; glm::tmat2x2<double,0>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x2@N$0A@@glm@@SAHXZ ENDP			; glm::tmat2x2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp

; 151  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 152  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]

; 153  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x3@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp

; 144  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 145  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 146  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x4@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp

; 137  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 138  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]

; 139  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x2@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp

; 130  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 131  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 132  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat2x4@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp

; 123  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 124  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]

; 125  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x2@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp

; 116  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 117  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]

; 118  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat2x3@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 110  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 111  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat4x4@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z PROC ; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp

; 102  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 103  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]

; 104  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tmat3x3@N$0A@@1@@Z ENDP ; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@0@Z PROC	; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp

; 63   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 64   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 65   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tmat2x2@N$0A@@glm@@QAE@ABU?$tvec2@N$0A@@1@0@Z ENDP	; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@ABN000@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@ABN000@Z PROC		; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp

; 56   : 		this->value[0] = col_type(x0, y0);

	mov	eax, DWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	eax, DWORD PTR _x1$[ebp]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 58   : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	16					; 00000010H
??0?$tmat2x2@N$0A@@glm@@QAE@ABN000@Z ENDP		; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tmat2x2@N$0A@@glm@@QAE@N@Z PROC			; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp

; 45   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2

; 46   : 		this->value[1] = col_type(0, scalar);
; 47   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm2
	movaps	xmm0, xmm1
	unpcklpd xmm0, xmm2
	unpcklpd xmm2, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm2
	pop	ebp
	ret	8
??0?$tmat2x2@N$0A@@glm@@QAE@N@Z ENDP			; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x2@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 40   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	ret	4
??0?$tmat2x2@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat2x2@N$0A@@glm@@QAE@XZ PROC			; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT
; _this$ = ecx

; 13   : 		{

	xorps	xmm0, xmm0

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);
; 16   : 				this->value[1] = col_type(0, 1);
; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	ret	0
??0?$tmat2x2@N$0A@@glm@@QAE@XZ ENDP			; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x2@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<float,0>::operator--, COMDAT
; _this$ = ecx

; 288  : 	{

	push	ebp
	mov	ebp, esp

; 289  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 290  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 291  : 		return Result;
; 292  : 	}

	pop	ebp
	ret	8
??F?$tmat2x2@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x2@M$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<float,0>::operator++, COMDAT
; _this$ = ecx

; 280  : 	{

	push	ebp
	mov	ebp, esp

; 281  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 282  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 283  : 		return Result;
; 284  : 	}

	pop	ebp
	ret	8
??E?$tmat2x2@M$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x2@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x2<float,0>::operator--, COMDAT
; _this$ = ecx

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 276  : 	}

	ret	0
??F?$tmat2x2@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x2@M$0A@@glm@@QAEAAU01@XZ PROC		; glm::tmat2x2<float,0>::operator++, COMDAT
; _this$ = ecx

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 268  : 	}

	ret	0
??E?$tmat2x2@M$0A@@glm@@QAEAAU01@XZ ENDP		; glm::tmat2x2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z PROC	; glm::tmat2x2<float,0>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@M$0A@@glm@@QBEABU?$tvec2@M$0A@@1@H@Z ENDP	; glm::tmat2x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z PROC	; glm::tmat2x2<float,0>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@M$0A@@glm@@QAEAAU?$tvec2@M$0A@@1@H@Z ENDP	; glm::tmat2x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x2<float,0>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 151  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 152  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 153  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 144  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 145  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 146  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp

; 137  : 		this->value[0] = m[0];

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax

; 138  : 		this->value[1] = m[1];
; 139  : 	}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 130  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 131  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 132  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp

; 123  : 		this->value[0] = m[0];

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax

; 124  : 		this->value[1] = m[1];
; 125  : 	}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 116  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 117  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 118  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 109  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 110  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 111  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 102  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 103  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 104  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@0@Z PROC	; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp

; 63   : 		this->value[0] = v0;

	mov	edx, DWORD PTR _v0$[ebp]
	push	esi
	mov	esi, ecx

; 64   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+12], eax

; 65   : 	}

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x2@M$0A@@glm@@QAE@ABU?$tvec2@M$0A@@1@0@Z ENDP	; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@ABM000@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@ABM000@Z PROC		; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 56   : 		this->value[0] = col_type(x0, y0);

	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	eax, DWORD PTR _x1$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 58   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0?$tmat2x2@M$0A@@glm@@QAE@ABM000@Z ENDP		; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@M@Z PROC			; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 45   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	DWORD PTR $T2[ebp], xmm0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 46   : 		this->value[1] = col_type(0, scalar);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 47   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@M@Z ENDP			; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x2@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 40   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	4
??0?$tmat2x2@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
??0?$tmat2x2@M$0A@@glm@@QAE@XZ PROC			; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);

	mov	DWORD PTR $T2[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 16   : 				this->value[1] = col_type(0, 1);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T1[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x2@M$0A@@glm@@QAE@XZ ENDP			; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x2@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<double,1>::operator--, COMDAT
; _this$ = ecx

; 288  : 	{

	push	ebp
	mov	ebp, esp

; 289  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 290  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 291  : 		return Result;
; 292  : 	}

	pop	ebp
	ret	8
??F?$tmat2x2@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x2@N$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<double,1>::operator++, COMDAT
; _this$ = ecx

; 280  : 	{

	push	ebp
	mov	ebp, esp

; 281  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 282  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 283  : 		return Result;
; 284  : 	}

	pop	ebp
	ret	8
??E?$tmat2x2@N$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x2@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x2<double,1>::operator--, COMDAT
; _this$ = ecx

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 276  : 	}

	ret	0
??F?$tmat2x2@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x2@N$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x2<double,1>::operator++, COMDAT
; _this$ = ecx

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 268  : 	}

	ret	0
??E?$tmat2x2@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z PROC	; glm::tmat2x2<double,1>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@N$00@glm@@QBEABU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat2x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z PROC	; glm::tmat2x2<double,1>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@N$00@glm@@QAEAAU?$tvec2@N$00@1@H@Z ENDP	; glm::tmat2x2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@N$00@glm@@SAHXZ PROC			; glm::tmat2x2<double,1>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x2@N$00@glm@@SAHXZ ENDP			; glm::tmat2x2<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp

; 151  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 152  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]

; 153  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x3@N$00@1@@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp

; 144  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 145  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 146  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x4@N$00@1@@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp

; 137  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 138  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]

; 139  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x2@N$00@1@@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp

; 130  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 131  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 132  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat2x4@N$00@1@@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp

; 123  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 124  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]

; 125  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x2@N$00@1@@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp

; 116  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 117  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]

; 118  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat2x3@N$00@1@@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 110  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 111  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat4x4@N$00@1@@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp

; 102  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 103  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]

; 104  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tmat3x3@N$00@1@@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@0@Z PROC	; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp

; 63   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 64   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 65   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tmat2x2@N$00@glm@@QAE@ABU?$tvec2@N$00@1@0@Z ENDP	; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@ABN000@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
??0?$tmat2x2@N$00@glm@@QAE@ABN000@Z PROC		; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp

; 56   : 		this->value[0] = col_type(x0, y0);

	mov	eax, DWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	eax, DWORD PTR _x1$[ebp]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 58   : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	16					; 00000010H
??0?$tmat2x2@N$00@glm@@QAE@ABN000@Z ENDP		; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tmat2x2@N$00@glm@@QAE@N@Z PROC			; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp

; 45   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2

; 46   : 		this->value[1] = col_type(0, scalar);
; 47   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm2
	movaps	xmm0, xmm1
	unpcklpd xmm0, xmm2
	unpcklpd xmm2, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm2
	pop	ebp
	ret	8
??0?$tmat2x2@N$00@glm@@QAE@N@Z ENDP			; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x2@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 40   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	ret	4
??0?$tmat2x2@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat2x2@N$00@glm@@QAE@XZ PROC			; glm::tmat2x2<double,1>::tmat2x2<double,1>, COMDAT
; _this$ = ecx

; 13   : 		{

	xorps	xmm0, xmm0

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);
; 16   : 				this->value[1] = col_type(0, 1);
; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	ret	0
??0?$tmat2x2@N$00@glm@@QAE@XZ ENDP			; glm::tmat2x2<double,1>::tmat2x2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x2@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<float,1>::operator--, COMDAT
; _this$ = ecx

; 288  : 	{

	push	ebp
	mov	ebp, esp

; 289  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 290  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 291  : 		return Result;
; 292  : 	}

	pop	ebp
	ret	8
??F?$tmat2x2@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x2@M$00@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<float,1>::operator++, COMDAT
; _this$ = ecx

; 280  : 	{

	push	ebp
	mov	ebp, esp

; 281  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 282  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 283  : 		return Result;
; 284  : 	}

	pop	ebp
	ret	8
??E?$tmat2x2@M$00@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x2@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x2<float,1>::operator--, COMDAT
; _this$ = ecx

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 276  : 	}

	ret	0
??F?$tmat2x2@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x2@M$00@glm@@QAEAAU01@XZ PROC			; glm::tmat2x2<float,1>::operator++, COMDAT
; _this$ = ecx

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 268  : 	}

	ret	0
??E?$tmat2x2@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z PROC	; glm::tmat2x2<float,1>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@M$00@glm@@QBEABU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat2x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z PROC	; glm::tmat2x2<float,1>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@M$00@glm@@QAEAAU?$tvec2@M$00@1@H@Z ENDP	; glm::tmat2x2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@M$00@glm@@SAHXZ PROC			; glm::tmat2x2<float,1>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x2@M$00@glm@@SAHXZ ENDP			; glm::tmat2x2<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 151  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 152  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 153  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x3@M$00@1@@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 144  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 145  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 146  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x4@M$00@1@@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp

; 137  : 		this->value[0] = m[0];

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax

; 138  : 		this->value[1] = m[1];
; 139  : 	}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x2@M$00@1@@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 130  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 131  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 132  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat2x4@M$00@1@@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp

; 123  : 		this->value[0] = m[0];

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax

; 124  : 		this->value[1] = m[1];
; 125  : 	}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x2@M$00@1@@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 116  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 117  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 118  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat2x3@M$00@1@@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 109  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 110  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 111  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat4x4@M$00@1@@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 102  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 103  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 104  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tmat3x3@M$00@1@@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@0@Z PROC	; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp

; 63   : 		this->value[0] = v0;

	mov	edx, DWORD PTR _v0$[ebp]
	push	esi
	mov	esi, ecx

; 64   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+12], eax

; 65   : 	}

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x2@M$00@glm@@QAE@ABU?$tvec2@M$00@1@0@Z ENDP	; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@ABM000@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
??0?$tmat2x2@M$00@glm@@QAE@ABM000@Z PROC		; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 56   : 		this->value[0] = col_type(x0, y0);

	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	eax, DWORD PTR _x1$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 58   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0?$tmat2x2@M$00@glm@@QAE@ABM000@Z ENDP		; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat2x2@M$00@glm@@QAE@M@Z PROC			; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 45   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	DWORD PTR $T2[ebp], xmm0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 46   : 		this->value[1] = col_type(0, scalar);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 47   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@M@Z ENDP			; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x2@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 40   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	4
??0?$tmat2x2@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
??0?$tmat2x2@M$00@glm@@QAE@XZ PROC			; glm::tmat2x2<float,1>::tmat2x2<float,1>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);

	mov	DWORD PTR $T2[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 16   : 				this->value[1] = col_type(0, 1);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T1[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x2@M$00@glm@@QAE@XZ ENDP			; glm::tmat2x2<float,1>::tmat2x2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x2@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<double,2>::operator--, COMDAT
; _this$ = ecx

; 288  : 	{

	push	ebp
	mov	ebp, esp

; 289  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 290  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 291  : 		return Result;
; 292  : 	}

	pop	ebp
	ret	8
??F?$tmat2x2@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x2@N$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<double,2>::operator++, COMDAT
; _this$ = ecx

; 280  : 	{

	push	ebp
	mov	ebp, esp

; 281  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 282  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 283  : 		return Result;
; 284  : 	}

	pop	ebp
	ret	8
??E?$tmat2x2@N$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x2@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x2<double,2>::operator--, COMDAT
; _this$ = ecx

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 276  : 	}

	ret	0
??F?$tmat2x2@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x2@N$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x2<double,2>::operator++, COMDAT
; _this$ = ecx

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx+16], xmm0

; 268  : 	}

	ret	0
??E?$tmat2x2@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z PROC	; glm::tmat2x2<double,2>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@N$01@glm@@QBEABU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat2x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z PROC	; glm::tmat2x2<double,2>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, ecx

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@N$01@glm@@QAEAAU?$tvec2@N$01@1@H@Z ENDP	; glm::tmat2x2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@N$01@glm@@SAHXZ PROC			; glm::tmat2x2<double,2>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x2@N$01@glm@@SAHXZ ENDP			; glm::tmat2x2<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp

; 151  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 152  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]

; 153  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x3@N$01@1@@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp

; 144  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 145  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 146  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x4@N$01@1@@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp

; 137  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 138  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]

; 139  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x2@N$01@1@@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp

; 130  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 131  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 132  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat2x4@N$01@1@@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp

; 123  : 		this->value[0] = m[0];

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0

; 124  : 		this->value[1] = m[1];

	movups	xmm0, XMMWORD PTR [eax+16]

; 125  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x2@N$01@1@@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp

; 116  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 117  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]

; 118  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat2x3@N$01@1@@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp

; 109  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 110  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+32]
	movsd	xmm0, QWORD PTR [eax+40]

; 111  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat4x4@N$01@1@@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp

; 102  : 		this->value[0] = col_type(m[0]);

	mov	eax, DWORD PTR _m$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR [eax]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1

; 103  : 		this->value[1] = col_type(m[1]);

	movsd	xmm1, QWORD PTR [eax+24]
	movsd	xmm0, QWORD PTR [eax+32]

; 104  : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tmat3x3@N$01@1@@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@0@Z PROC	; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp

; 63   : 		this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 64   : 		this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [eax]

; 65   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tmat2x2@N$01@glm@@QAE@ABU?$tvec2@N$01@1@0@Z ENDP	; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@ABN000@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
??0?$tmat2x2@N$01@glm@@QAE@ABN000@Z PROC		; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp

; 56   : 		this->value[0] = col_type(x0, y0);

	mov	eax, DWORD PTR _x0$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	eax, DWORD PTR _x1$[ebp]
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx], xmm1
	movsd	xmm1, QWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movsd	xmm0, QWORD PTR [eax]

; 58   : 	}

	mov	eax, ecx
	unpcklpd xmm1, xmm0
	movups	XMMWORD PTR [ecx+16], xmm1
	pop	ebp
	ret	16					; 00000010H
??0?$tmat2x2@N$01@glm@@QAE@ABN000@Z ENDP		; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tmat2x2@N$01@glm@@QAE@N@Z PROC			; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp

; 45   : 		this->value[0] = col_type(scalar, 0);

	movsd	xmm1, QWORD PTR _scalar$[ebp]
	xorps	xmm2, xmm2
	movups	XMMWORD PTR [ecx], xmm2

; 46   : 		this->value[1] = col_type(0, scalar);
; 47   : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx+16], xmm2
	movaps	xmm0, xmm1
	unpcklpd xmm0, xmm2
	unpcklpd xmm2, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm2
	pop	ebp
	ret	8
??0?$tmat2x2@N$01@glm@@QAE@N@Z ENDP			; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x2@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 40   : 	{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	ret	4
??0?$tmat2x2@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tmat2x2@N$01@glm@@QAE@XZ PROC			; glm::tmat2x2<double,2>::tmat2x2<double,2>, COMDAT
; _this$ = ecx

; 13   : 		{

	xorps	xmm0, xmm0

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);
; 16   : 				this->value[1] = col_type(0, 1);
; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@00000000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movaps	xmm0, XMMWORD PTR __xmm@3ff00000000000000000000000000000
	movups	XMMWORD PTR [ecx+16], xmm0
	ret	0
??0?$tmat2x2@N$01@glm@@QAE@XZ ENDP			; glm::tmat2x2<double,2>::tmat2x2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tmat2x2@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<float,2>::operator--, COMDAT
; _this$ = ecx

; 288  : 	{

	push	ebp
	mov	ebp, esp

; 289  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 290  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 291  : 		return Result;
; 292  : 	}

	pop	ebp
	ret	8
??F?$tmat2x2@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tmat2x2@M$01@glm@@QAE?AU01@H@Z PROC		; glm::tmat2x2<float,2>::operator++, COMDAT
; _this$ = ecx

; 280  : 	{

	push	ebp
	mov	ebp, esp

; 281  : 		tmat2x2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 282  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 283  : 		return Result;
; 284  : 	}

	pop	ebp
	ret	8
??E?$tmat2x2@M$01@glm@@QAE?AU01@H@Z ENDP		; glm::tmat2x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??F?$tmat2x2@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tmat2x2@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x2<float,2>::operator--, COMDAT
; _this$ = ecx

; 273  : 		--this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 274  : 		--this->value[1];
; 275  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	subps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 276  : 	}

	ret	0
??F?$tmat2x2@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??E?$tmat2x2@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tmat2x2@M$01@glm@@QAEAAU01@XZ PROC			; glm::tmat2x2<float,2>::operator++, COMDAT
; _this$ = ecx

; 265  : 		++this->value[0];

	movups	xmm0, XMMWORD PTR [ecx]

; 266  : 		++this->value[1];
; 267  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	addps	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0

; 268  : 	}

	ret	0
??E?$tmat2x2@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tmat2x2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z PROC	; glm::tmat2x2<float,2>::operator[], COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp

; 167  : 		assert(i < this->length());
; 168  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 169  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@M$01@glm@@QBEABU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat2x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tmat2x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z PROC	; glm::tmat2x2<float,2>::operator[], COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp

; 160  : 		assert(i < this->length());
; 161  : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 162  : 	}

	pop	ebp
	ret	4
??A?$tmat2x2@M$01@glm@@QAEAAU?$tvec2@M$01@1@H@Z ENDP	; glm::tmat2x2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@M$01@glm@@SAHXZ PROC			; glm::tmat2x2<float,2>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tmat2x2@M$01@glm@@SAHXZ ENDP			; glm::tmat2x2<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 150  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 151  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 152  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 153  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x3@M$01@1@@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 144  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 145  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 146  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x4@M$01@1@@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp

; 137  : 		this->value[0] = m[0];

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax

; 138  : 		this->value[1] = m[1];
; 139  : 	}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x2@M$01@1@@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 129  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 130  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 131  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 132  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat2x4@M$01@1@@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 122  : 	{

	push	ebp
	mov	ebp, esp

; 123  : 		this->value[0] = m[0];

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax

; 124  : 		this->value[1] = m[1];
; 125  : 	}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x2@M$01@1@@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 115  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 116  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 117  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 118  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat2x3@M$01@1@@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 108  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 109  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 110  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 111  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat4x4@M$01@1@@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_m$ = 8							; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 101  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 102  : 		this->value[0] = col_type(m[0]);

	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 103  : 		this->value[1] = col_type(m[1]);

	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [edx+16]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 104  : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tmat3x3@M$01@1@@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@0@Z
_TEXT	SEGMENT
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@0@Z PROC	; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp

; 63   : 		this->value[0] = v0;

	mov	edx, DWORD PTR _v0$[ebp]
	push	esi
	mov	esi, ecx

; 64   : 		this->value[1] = v1;

	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+12], eax

; 65   : 	}

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	8
??0?$tmat2x2@M$01@glm@@QAE@ABU?$tvec2@M$01@1@0@Z ENDP	; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@ABM000@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
??0?$tmat2x2@M$01@glm@@QAE@ABM000@Z PROC		; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 56   : 		this->value[0] = col_type(x0, y0);

	mov	eax, DWORD PTR _x0$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y0$[ebp]
	movss	DWORD PTR $T2[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	movss	DWORD PTR $T2[ebp+4], xmm0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	eax, DWORD PTR _x1$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR _y1$[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	movss	xmm0, DWORD PTR [eax]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 58   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0?$tmat2x2@M$01@glm@@QAE@ABM000@Z ENDP		; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
_scalar$ = 8						; size = 4
??0?$tmat2x2@M$01@glm@@QAE@M@Z PROC			; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 45   : 		this->value[0] = col_type(scalar, 0);

	movss	xmm0, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	movss	DWORD PTR $T2[ebp], xmm0
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 46   : 		this->value[1] = col_type(0, scalar);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	movss	DWORD PTR $T1[ebp+4], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 47   : 	}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@M@Z ENDP			; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tmat2x2@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 40   : 	{}

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	4
??0?$tmat2x2@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
$T2 = -8						; size = 8
??0?$tmat2x2@M$01@glm@@QAE@XZ PROC			; glm::tmat2x2<float,2>::tmat2x2<float,2>, COMDAT
; _this$ = ecx

; 13   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);

	mov	DWORD PTR $T2[ebp], 1065353216		; 3f800000H
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR $T2[ebp+4], 0
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 16   : 				this->value[1] = col_type(0, 1);

	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR $T1[ebp+4], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 17   : #			endif
; 18   : 		}

	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tmat2x2@M$01@glm@@QAE@XZ ENDP			; glm::tmat2x2<float,2>::tmat2x2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@N$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<double,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+16], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@N$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@N$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<double,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+16], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@N$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@N$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<double,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+16], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@N$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@N$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<double,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+16], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@N$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QAE@NNNN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@N$0A@@glm@@QAE@NNNN@Z PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	movsd	xmm0, QWORD PTR _a$[ebp]

; 193  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR _d$[ebp]
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@N$0A@@glm@@QAE@NNNN@Z ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@N$0A@@glm@@QAE@N@Z PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 188  : 	{}

	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tvec4@N$0A@@glm@@QAE@N@Z ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<double,0>::tvec4<double,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@N$0A@@glm@@QAE@XZ PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	ret	0
??0?$tvec4@N$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$0A@@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@N$0A@@glm@@QBEABNH@Z PROC			; glm::tvec4<double,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@N$0A@@glm@@QBEABNH@Z ENDP			; glm::tvec4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$0A@@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@N$0A@@glm@@QAEAANH@Z PROC			; glm::tvec4<double,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@N$0A@@glm@@QAEAANH@Z ENDP			; glm::tvec4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@N$0A@@glm@@SAHXZ PROC			; glm::tvec4<double,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@_J$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec4<__int64,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@_J$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec4<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@_J$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec4<__int64,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@_J$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec4<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@_J$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<__int64,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@_J$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@_J$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<__int64,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@_J$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$0A@@glm@@QAE@_J000@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@_J$0A@@glm@@QAE@_J000@Z PROC			; glm::tvec4<__int64,0>::tvec4<__int64,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@_J$0A@@glm@@QAE@_J000@Z ENDP			; glm::tvec4<__int64,0>::tvec4<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$0A@@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@_J$0A@@glm@@QAE@_J@Z PROC			; glm::tvec4<__int64,0>::tvec4<__int64,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+28], eax

; 188  : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+24], edx
	pop	ebp
	ret	8
??0?$tvec4@_J$0A@@glm@@QAE@_J@Z ENDP			; glm::tvec4<__int64,0>::tvec4<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@_J$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<__int64,0>::tvec4<__int64,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@_J$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<__int64,0>::tvec4<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@_J$0A@@glm@@QAE@XZ PROC			; glm::tvec4<__int64,0>::tvec4<__int64,0>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	ret	0
??0?$tvec4@_J$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<__int64,0>::tvec4<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$0A@@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_J$0A@@glm@@QBEAB_JH@Z PROC			; glm::tvec4<__int64,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_J$0A@@glm@@QBEAB_JH@Z ENDP			; glm::tvec4<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$0A@@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_J$0A@@glm@@QAEAA_JH@Z PROC			; glm::tvec4<__int64,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_J$0A@@glm@@QAEAA_JH@Z ENDP			; glm::tvec4<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_J$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_J$0A@@glm@@SAHXZ PROC			; glm::tvec4<__int64,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@_J$0A@@glm@@SAHXZ ENDP			; glm::tvec4<__int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@H$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<int,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@H$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@H$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<int,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	paddd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@H$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@H$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<int,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@H$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@H$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<int,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	paddd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@H$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@H$0A@@glm@@QAE@HHHH@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@H$0A@@glm@@QAE@HHHH@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@H$0A@@glm@@QAE@H@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@H$0A@@glm@@QAE@H@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@H$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<int,0>::tvec4<int,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@H$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@H$0A@@glm@@QAE@XZ PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec4@H$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$0A@@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@H$0A@@glm@@QBEABHH@Z PROC			; glm::tvec4<int,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@H$0A@@glm@@QBEABHH@Z ENDP			; glm::tvec4<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$0A@@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@H$0A@@glm@@QAEAAHH@Z PROC			; glm::tvec4<int,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@H$0A@@glm@@QAEAAHH@Z ENDP			; glm::tvec4<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$0A@@glm@@SAHXZ PROC			; glm::tvec4<int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@H$0A@@glm@@SAHXZ ENDP			; glm::tvec4<int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@F$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<short,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]

; 484  : 		--*this;

	dec	WORD PTR [ecx]
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	dec	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 485  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@F$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@F$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<short,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]

; 476  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 477  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@F$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@F$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<short,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	WORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	dec	WORD PTR [ecx+6]

; 470  : 	}

	ret	0
??F?$tvec4@F$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@F$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<short,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	WORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]

; 460  : 	}

	ret	0
??E?$tvec4@F$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$0A@@glm@@QAE@FFFF@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
_d$ = 20						; size = 2
??0?$tvec4@F$0A@@glm@@QAE@FFFF@Z PROC			; glm::tvec4<short,0>::tvec4<short,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR _d$[ebp]
	mov	WORD PTR [ecx+6], ax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@F$0A@@glm@@QAE@FFFF@Z ENDP			; glm::tvec4<short,0>::tvec4<short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$0A@@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec4@F$0A@@glm@@QAE@F@Z PROC			; glm::tvec4<short,0>::tvec4<short,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	WORD PTR [ecx+6], ax

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@F$0A@@glm@@QAE@F@Z ENDP			; glm::tvec4<short,0>::tvec4<short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@F$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<short,0>::tvec4<short,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@F$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<short,0>::tvec4<short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@F$0A@@glm@@QAE@XZ PROC			; glm::tvec4<short,0>::tvec4<short,0>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 163  : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec4@F$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<short,0>::tvec4<short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$0A@@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@F$0A@@glm@@QBEABFH@Z PROC			; glm::tvec4<short,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@F$0A@@glm@@QBEABFH@Z ENDP			; glm::tvec4<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$0A@@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@F$0A@@glm@@QAEAAFH@Z PROC			; glm::tvec4<short,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@F$0A@@glm@@QAEAAFH@Z ENDP			; glm::tvec4<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@F$0A@@glm@@SAHXZ PROC			; glm::tvec4<short,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@F$0A@@glm@@SAHXZ ENDP			; glm::tvec4<short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@_K$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec4<unsigned __int64,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	paddq	xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	movups	XMMWORD PTR [ecx+16], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@_K$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec4<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@_K$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec4<unsigned __int64,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@_K$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec4<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@_K$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned __int64,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	paddq	xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	movups	XMMWORD PTR [ecx+16], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@_K$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@_K$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned __int64,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@_K$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$0A@@glm@@QAE@_K000@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@_K$0A@@glm@@QAE@_K000@Z PROC			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@_K$0A@@glm@@QAE@_K000@Z ENDP			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$0A@@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@_K$0A@@glm@@QAE@_K@Z PROC			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+28], eax

; 188  : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+24], edx
	pop	ebp
	ret	8
??0?$tvec4@_K$0A@@glm@@QAE@_K@Z ENDP			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@_K$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@_K$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@_K$0A@@glm@@QAE@XZ PROC			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	ret	0
??0?$tvec4@_K$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$0A@@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_K$0A@@glm@@QBEAB_KH@Z PROC			; glm::tvec4<unsigned __int64,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_K$0A@@glm@@QBEAB_KH@Z ENDP			; glm::tvec4<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$0A@@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_K$0A@@glm@@QAEAA_KH@Z PROC			; glm::tvec4<unsigned __int64,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_K$0A@@glm@@QAEAA_KH@Z ENDP			; glm::tvec4<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_K$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_K$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned __int64,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@_K$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned __int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@I$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned int,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@I$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@I$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned int,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	paddd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@I$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@I$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned int,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@I$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@I$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned int,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	paddd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@I$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QAE@IIII@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@I$0A@@glm@@QAE@IIII@Z PROC			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@I$0A@@glm@@QAE@IIII@Z ENDP			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@I$0A@@glm@@QAE@I@Z PROC			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@I$0A@@glm@@QAE@I@Z ENDP			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@I$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@I$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@I$0A@@glm@@QAE@XZ PROC			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec4@I$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$0A@@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@I$0A@@glm@@QBEABIH@Z PROC			; glm::tvec4<unsigned int,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@I$0A@@glm@@QBEABIH@Z ENDP			; glm::tvec4<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$0A@@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@I$0A@@glm@@QAEAAIH@Z PROC			; glm::tvec4<unsigned int,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@I$0A@@glm@@QAEAAIH@Z ENDP			; glm::tvec4<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@I$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@I$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@G$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned short,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 484  : 		--*this;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax
	add	WORD PTR [ecx+2], ax
	add	WORD PTR [ecx+4], ax
	add	WORD PTR [ecx+6], ax

; 485  : 		return Result;

	mov	eax, edx

; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@G$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@G$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned short,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]

; 476  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 477  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@G$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@G$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned short,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 466  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 467  : 		--this->z;

	add	WORD PTR [ecx+4], ax

; 468  : 		--this->w;

	add	WORD PTR [ecx+6], ax

; 469  : 		return *this;

	mov	eax, ecx

; 470  : 	}

	ret	0
??F?$tvec4@G$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@G$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned short,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	WORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]

; 460  : 	}

	ret	0
??E?$tvec4@G$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$0A@@glm@@QAE@GGGG@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
_d$ = 20						; size = 2
??0?$tvec4@G$0A@@glm@@QAE@GGGG@Z PROC			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR _d$[ebp]
	mov	WORD PTR [ecx+6], ax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@G$0A@@glm@@QAE@GGGG@Z ENDP			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$0A@@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec4@G$0A@@glm@@QAE@G@Z PROC			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	WORD PTR [ecx+6], ax

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@G$0A@@glm@@QAE@G@Z ENDP			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@G$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@G$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@G$0A@@glm@@QAE@XZ PROC			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 163  : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec4@G$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$0A@@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@G$0A@@glm@@QBEABGH@Z PROC			; glm::tvec4<unsigned short,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@G$0A@@glm@@QBEABGH@Z ENDP			; glm::tvec4<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$0A@@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@G$0A@@glm@@QAEAAGH@Z PROC			; glm::tvec4<unsigned short,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@G$0A@@glm@@QAEAAGH@Z ENDP			; glm::tvec4<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@G$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned short,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@G$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@N$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<double,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+16], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@N$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@N$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<double,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+16], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@N$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@N$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<double,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+16], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@N$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<double,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+16], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$00@glm@@QAE@NNNN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@N$00@glm@@QAE@NNNN@Z PROC			; glm::tvec4<double,1>::tvec4<double,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	movsd	xmm0, QWORD PTR _a$[ebp]

; 193  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR _d$[ebp]
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@N$00@glm@@QAE@NNNN@Z ENDP			; glm::tvec4<double,1>::tvec4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@N$00@glm@@QAE@N@Z PROC			; glm::tvec4<double,1>::tvec4<double,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 188  : 	{}

	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tvec4@N$00@glm@@QAE@N@Z ENDP			; glm::tvec4<double,1>::tvec4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<double,1>::tvec4<double,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<double,1>::tvec4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@N$00@glm@@QAE@XZ PROC			; glm::tvec4<double,1>::tvec4<double,1>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	ret	0
??0?$tvec4@N$00@glm@@QAE@XZ ENDP			; glm::tvec4<double,1>::tvec4<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$00@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@N$00@glm@@QBEABNH@Z PROC			; glm::tvec4<double,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@N$00@glm@@QBEABNH@Z ENDP			; glm::tvec4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$00@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@N$00@glm@@QAEAANH@Z PROC			; glm::tvec4<double,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@N$00@glm@@QAEAANH@Z ENDP			; glm::tvec4<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@N$00@glm@@SAHXZ PROC			; glm::tvec4<double,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@N$00@glm@@SAHXZ ENDP			; glm::tvec4<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@M$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<float,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@M$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@M$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<float,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@M$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@M$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<float,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@M$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<float,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$00@glm@@QAE@MMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@M$00@glm@@QAE@MMMM@Z PROC			; glm::tvec4<float,1>::tvec4<float,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	movss	xmm0, DWORD PTR _a$[ebp]

; 193  : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@M$00@glm@@QAE@MMMM@Z ENDP			; glm::tvec4<float,1>::tvec4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@M$00@glm@@QAE@M@Z PROC			; glm::tvec4<float,1>::tvec4<float,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	movss	xmm0, DWORD PTR _scalar$[ebp]

; 188  : 	{}

	mov	eax, ecx
	shufps	xmm0, xmm0, 0
	movups	XMMWORD PTR [ecx], xmm0
	pop	ebp
	ret	4
??0?$tvec4@M$00@glm@@QAE@M@Z ENDP			; glm::tvec4<float,1>::tvec4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<float,1>::tvec4<float,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@M$00@glm@@QAE@XZ PROC			; glm::tvec4<float,1>::tvec4<float,1>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec4@M$00@glm@@QAE@XZ ENDP			; glm::tvec4<float,1>::tvec4<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$00@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@M$00@glm@@QBEABMH@Z PROC			; glm::tvec4<float,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@M$00@glm@@QBEABMH@Z ENDP			; glm::tvec4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$00@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@M$00@glm@@QAEAAMH@Z PROC			; glm::tvec4<float,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@M$00@glm@@QAEAAMH@Z ENDP			; glm::tvec4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$00@glm@@SAHXZ PROC			; glm::tvec4<float,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@M$00@glm@@SAHXZ ENDP			; glm::tvec4<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@_J$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<__int64,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@_J$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@_J$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<__int64,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@_J$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@_J$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<__int64,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@_J$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@_J$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<__int64,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@_J$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$00@glm@@QAE@_J000@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@_J$00@glm@@QAE@_J000@Z PROC			; glm::tvec4<__int64,1>::tvec4<__int64,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@_J$00@glm@@QAE@_J000@Z ENDP			; glm::tvec4<__int64,1>::tvec4<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$00@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@_J$00@glm@@QAE@_J@Z PROC			; glm::tvec4<__int64,1>::tvec4<__int64,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+28], eax

; 188  : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+24], edx
	pop	ebp
	ret	8
??0?$tvec4@_J$00@glm@@QAE@_J@Z ENDP			; glm::tvec4<__int64,1>::tvec4<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@_J$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<__int64,1>::tvec4<__int64,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@_J$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<__int64,1>::tvec4<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@_J$00@glm@@QAE@XZ PROC			; glm::tvec4<__int64,1>::tvec4<__int64,1>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	ret	0
??0?$tvec4@_J$00@glm@@QAE@XZ ENDP			; glm::tvec4<__int64,1>::tvec4<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$00@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_J$00@glm@@QBEAB_JH@Z PROC			; glm::tvec4<__int64,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_J$00@glm@@QBEAB_JH@Z ENDP			; glm::tvec4<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$00@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_J$00@glm@@QAEAA_JH@Z PROC			; glm::tvec4<__int64,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_J$00@glm@@QAEAA_JH@Z ENDP			; glm::tvec4<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_J$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_J$00@glm@@SAHXZ PROC			; glm::tvec4<__int64,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@_J$00@glm@@SAHXZ ENDP			; glm::tvec4<__int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@H$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<int,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@H$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@H$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<int,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	paddd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@H$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@H$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<int,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@H$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@H$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<int,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	paddd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@H$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$00@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@H$00@glm@@QAE@HHHH@Z PROC			; glm::tvec4<int,1>::tvec4<int,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@H$00@glm@@QAE@HHHH@Z ENDP			; glm::tvec4<int,1>::tvec4<int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$00@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@H$00@glm@@QAE@H@Z PROC			; glm::tvec4<int,1>::tvec4<int,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@H$00@glm@@QAE@H@Z ENDP			; glm::tvec4<int,1>::tvec4<int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@H$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<int,1>::tvec4<int,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@H$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<int,1>::tvec4<int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@H$00@glm@@QAE@XZ PROC			; glm::tvec4<int,1>::tvec4<int,1>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec4@H$00@glm@@QAE@XZ ENDP			; glm::tvec4<int,1>::tvec4<int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$00@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@H$00@glm@@QBEABHH@Z PROC			; glm::tvec4<int,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@H$00@glm@@QBEABHH@Z ENDP			; glm::tvec4<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$00@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@H$00@glm@@QAEAAHH@Z PROC			; glm::tvec4<int,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@H$00@glm@@QAEAAHH@Z ENDP			; glm::tvec4<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$00@glm@@SAHXZ PROC			; glm::tvec4<int,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@H$00@glm@@SAHXZ ENDP			; glm::tvec4<int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@F$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<short,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]

; 484  : 		--*this;

	dec	WORD PTR [ecx]
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	dec	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 485  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@F$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@F$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<short,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]

; 476  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 477  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@F$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@F$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<short,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	WORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	dec	WORD PTR [ecx+6]

; 470  : 	}

	ret	0
??F?$tvec4@F$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@F$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<short,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	WORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]

; 460  : 	}

	ret	0
??E?$tvec4@F$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$00@glm@@QAE@FFFF@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
_d$ = 20						; size = 2
??0?$tvec4@F$00@glm@@QAE@FFFF@Z PROC			; glm::tvec4<short,1>::tvec4<short,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR _d$[ebp]
	mov	WORD PTR [ecx+6], ax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@F$00@glm@@QAE@FFFF@Z ENDP			; glm::tvec4<short,1>::tvec4<short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$00@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec4@F$00@glm@@QAE@F@Z PROC			; glm::tvec4<short,1>::tvec4<short,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	WORD PTR [ecx+6], ax

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@F$00@glm@@QAE@F@Z ENDP			; glm::tvec4<short,1>::tvec4<short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@F$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<short,1>::tvec4<short,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@F$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<short,1>::tvec4<short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@F$00@glm@@QAE@XZ PROC			; glm::tvec4<short,1>::tvec4<short,1>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 163  : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec4@F$00@glm@@QAE@XZ ENDP			; glm::tvec4<short,1>::tvec4<short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$00@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@F$00@glm@@QBEABFH@Z PROC			; glm::tvec4<short,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@F$00@glm@@QBEABFH@Z ENDP			; glm::tvec4<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$00@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@F$00@glm@@QAEAAFH@Z PROC			; glm::tvec4<short,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@F$00@glm@@QAEAAFH@Z ENDP			; glm::tvec4<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@F$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@F$00@glm@@SAHXZ PROC			; glm::tvec4<short,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@F$00@glm@@SAHXZ ENDP			; glm::tvec4<short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@C$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<signed char,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 484  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@C$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@C$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<signed char,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 476  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@C$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@C$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<signed char,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	BYTE PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]

; 470  : 	}

	ret	0
??F?$tvec4@C$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@C$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<signed char,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	BYTE PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]

; 460  : 	}

	ret	0
??E?$tvec4@C$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$00@glm@@QAE@CCCC@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
_d$ = 20						; size = 1
??0?$tvec4@C$00@glm@@QAE@CCCC@Z PROC			; glm::tvec4<signed char,1>::tvec4<signed char,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR _d$[ebp]
	mov	BYTE PTR [ecx+3], al

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@C$00@glm@@QAE@CCCC@Z ENDP			; glm::tvec4<signed char,1>::tvec4<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$00@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec4@C$00@glm@@QAE@C@Z PROC			; glm::tvec4<signed char,1>::tvec4<signed char,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	BYTE PTR [ecx+3], al

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@C$00@glm@@QAE@C@Z ENDP			; glm::tvec4<signed char,1>::tvec4<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@C$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<signed char,1>::tvec4<signed char,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@C$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<signed char,1>::tvec4<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@C$00@glm@@QAE@XZ PROC			; glm::tvec4<signed char,1>::tvec4<signed char,1>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec4@C$00@glm@@QAE@XZ ENDP			; glm::tvec4<signed char,1>::tvec4<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$00@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@C$00@glm@@QBEABCH@Z PROC			; glm::tvec4<signed char,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@C$00@glm@@QBEABCH@Z ENDP			; glm::tvec4<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$00@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@C$00@glm@@QAEAACH@Z PROC			; glm::tvec4<signed char,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@C$00@glm@@QAEAACH@Z ENDP			; glm::tvec4<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@C$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@C$00@glm@@SAHXZ PROC			; glm::tvec4<signed char,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@C$00@glm@@SAHXZ ENDP			; glm::tvec4<signed char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@_K$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned __int64,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	paddq	xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	movups	XMMWORD PTR [ecx+16], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@_K$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@_K$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned __int64,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@_K$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@_K$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned __int64,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	paddq	xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	movups	XMMWORD PTR [ecx+16], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@_K$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@_K$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned __int64,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@_K$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$00@glm@@QAE@_K000@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@_K$00@glm@@QAE@_K000@Z PROC			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@_K$00@glm@@QAE@_K000@Z ENDP			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$00@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@_K$00@glm@@QAE@_K@Z PROC			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+28], eax

; 188  : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+24], edx
	pop	ebp
	ret	8
??0?$tvec4@_K$00@glm@@QAE@_K@Z ENDP			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@_K$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@_K$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@_K$00@glm@@QAE@XZ PROC			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	ret	0
??0?$tvec4@_K$00@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$00@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_K$00@glm@@QBEAB_KH@Z PROC			; glm::tvec4<unsigned __int64,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_K$00@glm@@QBEAB_KH@Z ENDP			; glm::tvec4<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$00@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_K$00@glm@@QAEAA_KH@Z PROC			; glm::tvec4<unsigned __int64,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_K$00@glm@@QAEAA_KH@Z ENDP			; glm::tvec4<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_K$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_K$00@glm@@SAHXZ PROC			; glm::tvec4<unsigned __int64,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@_K$00@glm@@SAHXZ ENDP			; glm::tvec4<unsigned __int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@I$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned int,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@I$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@I$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned int,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	paddd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@I$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@I$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned int,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@I$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@I$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned int,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	paddd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@I$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$00@glm@@QAE@IIII@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@I$00@glm@@QAE@IIII@Z PROC			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@I$00@glm@@QAE@IIII@Z ENDP			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$00@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@I$00@glm@@QAE@I@Z PROC			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@I$00@glm@@QAE@I@Z ENDP			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@I$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@I$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@I$00@glm@@QAE@XZ PROC			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec4@I$00@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$00@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@I$00@glm@@QBEABIH@Z PROC			; glm::tvec4<unsigned int,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@I$00@glm@@QBEABIH@Z ENDP			; glm::tvec4<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$00@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@I$00@glm@@QAEAAIH@Z PROC			; glm::tvec4<unsigned int,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@I$00@glm@@QAEAAIH@Z ENDP			; glm::tvec4<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@I$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@I$00@glm@@SAHXZ PROC			; glm::tvec4<unsigned int,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@I$00@glm@@SAHXZ ENDP			; glm::tvec4<unsigned int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@G$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned short,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 484  : 		--*this;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax
	add	WORD PTR [ecx+2], ax
	add	WORD PTR [ecx+4], ax
	add	WORD PTR [ecx+6], ax

; 485  : 		return Result;

	mov	eax, edx

; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@G$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@G$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned short,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]

; 476  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 477  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@G$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@G$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned short,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 466  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 467  : 		--this->z;

	add	WORD PTR [ecx+4], ax

; 468  : 		--this->w;

	add	WORD PTR [ecx+6], ax

; 469  : 		return *this;

	mov	eax, ecx

; 470  : 	}

	ret	0
??F?$tvec4@G$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@G$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned short,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	WORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]

; 460  : 	}

	ret	0
??E?$tvec4@G$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$00@glm@@QAE@GGGG@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
_d$ = 20						; size = 2
??0?$tvec4@G$00@glm@@QAE@GGGG@Z PROC			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR _d$[ebp]
	mov	WORD PTR [ecx+6], ax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@G$00@glm@@QAE@GGGG@Z ENDP			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$00@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec4@G$00@glm@@QAE@G@Z PROC			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	WORD PTR [ecx+6], ax

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@G$00@glm@@QAE@G@Z ENDP			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@G$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@G$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@G$00@glm@@QAE@XZ PROC			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 163  : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec4@G$00@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$00@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@G$00@glm@@QBEABGH@Z PROC			; glm::tvec4<unsigned short,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@G$00@glm@@QBEABGH@Z ENDP			; glm::tvec4<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$00@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@G$00@glm@@QAEAAGH@Z PROC			; glm::tvec4<unsigned short,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@G$00@glm@@QAEAAGH@Z ENDP			; glm::tvec4<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@G$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@G$00@glm@@SAHXZ PROC			; glm::tvec4<unsigned short,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@G$00@glm@@SAHXZ ENDP			; glm::tvec4<unsigned short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@E$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned char,1>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 484  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@E$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@E$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned char,1>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 476  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@E$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@E$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned char,1>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	BYTE PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]

; 470  : 	}

	ret	0
??F?$tvec4@E$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@E$00@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned char,1>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	BYTE PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]

; 460  : 	}

	ret	0
??E?$tvec4@E$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$00@glm@@QAE@EEEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
_d$ = 20						; size = 1
??0?$tvec4@E$00@glm@@QAE@EEEE@Z PROC			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR _d$[ebp]
	mov	BYTE PTR [ecx+3], al

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@E$00@glm@@QAE@EEEE@Z ENDP			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$00@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec4@E$00@glm@@QAE@E@Z PROC			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	BYTE PTR [ecx+3], al

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@E$00@glm@@QAE@E@Z ENDP			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@E$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@E$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@E$00@glm@@QAE@XZ PROC			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec4@E$00@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$00@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@E$00@glm@@QBEABEH@Z PROC			; glm::tvec4<unsigned char,1>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@E$00@glm@@QBEABEH@Z ENDP			; glm::tvec4<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$00@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@E$00@glm@@QAEAAEH@Z PROC			; glm::tvec4<unsigned char,1>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@E$00@glm@@QAEAAEH@Z ENDP			; glm::tvec4<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@E$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@E$00@glm@@SAHXZ PROC			; glm::tvec4<unsigned char,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@E$00@glm@@SAHXZ ENDP			; glm::tvec4<unsigned char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@N$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<double,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+16], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@N$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@N$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<double,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+16], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@N$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@N$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<double,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+16], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@N$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<double,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx+16], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$01@glm@@QAE@NNNN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@N$01@glm@@QAE@NNNN@Z PROC			; glm::tvec4<double,2>::tvec4<double,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	movsd	xmm0, QWORD PTR _a$[ebp]

; 193  : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	movsd	xmm0, QWORD PTR _d$[ebp]
	movsd	QWORD PTR [ecx+24], xmm0
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@N$01@glm@@QAE@NNNN@Z ENDP			; glm::tvec4<double,2>::tvec4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@N$01@glm@@QAE@N@Z PROC			; glm::tvec4<double,2>::tvec4<double,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 188  : 	{}

	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tvec4@N$01@glm@@QAE@N@Z ENDP			; glm::tvec4<double,2>::tvec4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<double,2>::tvec4<double,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<double,2>::tvec4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@N$01@glm@@QAE@XZ PROC			; glm::tvec4<double,2>::tvec4<double,2>, COMDAT
; _this$ = ecx

; 163  : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movups	XMMWORD PTR [ecx+16], xmm0
	ret	0
??0?$tvec4@N$01@glm@@QAE@XZ ENDP			; glm::tvec4<double,2>::tvec4<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$01@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@N$01@glm@@QBEABNH@Z PROC			; glm::tvec4<double,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@N$01@glm@@QBEABNH@Z ENDP			; glm::tvec4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$01@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@N$01@glm@@QAEAANH@Z PROC			; glm::tvec4<double,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@N$01@glm@@QAEAANH@Z ENDP			; glm::tvec4<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@N$01@glm@@SAHXZ PROC			; glm::tvec4<double,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@N$01@glm@@SAHXZ ENDP			; glm::tvec4<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@M$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<float,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@M$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@M$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<float,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@M$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@M$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<float,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@M$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<float,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QAE@MMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@M$01@glm@@QAE@MMMM@Z PROC			; glm::tvec4<float,2>::tvec4<float,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	movss	xmm0, DWORD PTR _a$[ebp]

; 193  : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@M$01@glm@@QAE@MMMM@Z ENDP			; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@M$01@glm@@QAE@M@Z PROC			; glm::tvec4<float,2>::tvec4<float,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	movss	xmm0, DWORD PTR _scalar$[ebp]

; 188  : 	{}

	mov	eax, ecx
	shufps	xmm0, xmm0, 0
	movups	XMMWORD PTR [ecx], xmm0
	pop	ebp
	ret	4
??0?$tvec4@M$01@glm@@QAE@M@Z ENDP			; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<float,2>::tvec4<float,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@M$01@glm@@QAE@XZ PROC			; glm::tvec4<float,2>::tvec4<float,2>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec4@M$01@glm@@QAE@XZ ENDP			; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$01@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@M$01@glm@@QBEABMH@Z PROC			; glm::tvec4<float,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@M$01@glm@@QBEABMH@Z ENDP			; glm::tvec4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$01@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@M$01@glm@@QAEAAMH@Z PROC			; glm::tvec4<float,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@M$01@glm@@QAEAAMH@Z ENDP			; glm::tvec4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$01@glm@@SAHXZ PROC			; glm::tvec4<float,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@M$01@glm@@SAHXZ ENDP			; glm::tvec4<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@_J$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<__int64,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@_J$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@_J$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<__int64,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@_J$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_J$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@_J$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<__int64,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	psubq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@_J$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_J$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@_J$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<__int64,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@_J$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$01@glm@@QAE@_J000@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@_J$01@glm@@QAE@_J000@Z PROC			; glm::tvec4<__int64,2>::tvec4<__int64,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@_J$01@glm@@QAE@_J000@Z ENDP			; glm::tvec4<__int64,2>::tvec4<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$01@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@_J$01@glm@@QAE@_J@Z PROC			; glm::tvec4<__int64,2>::tvec4<__int64,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+28], eax

; 188  : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+24], edx
	pop	ebp
	ret	8
??0?$tvec4@_J$01@glm@@QAE@_J@Z ENDP			; glm::tvec4<__int64,2>::tvec4<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@_J$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<__int64,2>::tvec4<__int64,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@_J$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<__int64,2>::tvec4<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@_J$01@glm@@QAE@XZ PROC			; glm::tvec4<__int64,2>::tvec4<__int64,2>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	ret	0
??0?$tvec4@_J$01@glm@@QAE@XZ ENDP			; glm::tvec4<__int64,2>::tvec4<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$01@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_J$01@glm@@QBEAB_JH@Z PROC			; glm::tvec4<__int64,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_J$01@glm@@QBEAB_JH@Z ENDP			; glm::tvec4<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$01@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_J$01@glm@@QAEAA_JH@Z PROC			; glm::tvec4<__int64,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_J$01@glm@@QAEAA_JH@Z ENDP			; glm::tvec4<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_J$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_J$01@glm@@SAHXZ PROC			; glm::tvec4<__int64,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@_J$01@glm@@SAHXZ ENDP			; glm::tvec4<__int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@H$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<int,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@H$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@H$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<int,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	paddd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@H$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@H$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@H$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<int,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@H$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@H$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@H$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<int,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	paddd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@H$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$01@glm@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@H$01@glm@@QAE@HHHH@Z PROC			; glm::tvec4<int,2>::tvec4<int,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@H$01@glm@@QAE@HHHH@Z ENDP			; glm::tvec4<int,2>::tvec4<int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$01@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@H$01@glm@@QAE@H@Z PROC			; glm::tvec4<int,2>::tvec4<int,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@H$01@glm@@QAE@H@Z ENDP			; glm::tvec4<int,2>::tvec4<int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@H$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<int,2>::tvec4<int,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@H$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<int,2>::tvec4<int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@H$01@glm@@QAE@XZ PROC			; glm::tvec4<int,2>::tvec4<int,2>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec4@H$01@glm@@QAE@XZ ENDP			; glm::tvec4<int,2>::tvec4<int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$01@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@H$01@glm@@QBEABHH@Z PROC			; glm::tvec4<int,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@H$01@glm@@QBEABHH@Z ENDP			; glm::tvec4<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$01@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@H$01@glm@@QAEAAHH@Z PROC			; glm::tvec4<int,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@H$01@glm@@QAEAAHH@Z ENDP			; glm::tvec4<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$01@glm@@SAHXZ PROC			; glm::tvec4<int,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@H$01@glm@@SAHXZ ENDP			; glm::tvec4<int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@F$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<short,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]

; 484  : 		--*this;

	dec	WORD PTR [ecx]
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	dec	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 485  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@F$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@F$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<short,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]

; 476  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 477  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@F$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@F$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@F$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<short,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	WORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	dec	WORD PTR [ecx+6]

; 470  : 	}

	ret	0
??F?$tvec4@F$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@F$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@F$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<short,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	WORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]

; 460  : 	}

	ret	0
??E?$tvec4@F$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$01@glm@@QAE@FFFF@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
_d$ = 20						; size = 2
??0?$tvec4@F$01@glm@@QAE@FFFF@Z PROC			; glm::tvec4<short,2>::tvec4<short,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR _d$[ebp]
	mov	WORD PTR [ecx+6], ax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@F$01@glm@@QAE@FFFF@Z ENDP			; glm::tvec4<short,2>::tvec4<short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$01@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec4@F$01@glm@@QAE@F@Z PROC			; glm::tvec4<short,2>::tvec4<short,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	WORD PTR [ecx+6], ax

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@F$01@glm@@QAE@F@Z ENDP			; glm::tvec4<short,2>::tvec4<short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@F$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<short,2>::tvec4<short,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@F$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<short,2>::tvec4<short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@F$01@glm@@QAE@XZ PROC			; glm::tvec4<short,2>::tvec4<short,2>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 163  : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec4@F$01@glm@@QAE@XZ ENDP			; glm::tvec4<short,2>::tvec4<short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$01@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@F$01@glm@@QBEABFH@Z PROC			; glm::tvec4<short,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@F$01@glm@@QBEABFH@Z ENDP			; glm::tvec4<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$01@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@F$01@glm@@QAEAAFH@Z PROC			; glm::tvec4<short,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@F$01@glm@@QAEAAFH@Z ENDP			; glm::tvec4<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@F$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@F$01@glm@@SAHXZ PROC			; glm::tvec4<short,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@F$01@glm@@SAHXZ ENDP			; glm::tvec4<short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@C$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<signed char,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 484  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@C$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@C$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<signed char,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 476  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@C$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@C$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<signed char,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	BYTE PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]

; 470  : 	}

	ret	0
??F?$tvec4@C$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@C$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<signed char,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	BYTE PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]

; 460  : 	}

	ret	0
??E?$tvec4@C$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$01@glm@@QAE@CCCC@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
_d$ = 20						; size = 1
??0?$tvec4@C$01@glm@@QAE@CCCC@Z PROC			; glm::tvec4<signed char,2>::tvec4<signed char,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR _d$[ebp]
	mov	BYTE PTR [ecx+3], al

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@C$01@glm@@QAE@CCCC@Z ENDP			; glm::tvec4<signed char,2>::tvec4<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$01@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec4@C$01@glm@@QAE@C@Z PROC			; glm::tvec4<signed char,2>::tvec4<signed char,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	BYTE PTR [ecx+3], al

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@C$01@glm@@QAE@C@Z ENDP			; glm::tvec4<signed char,2>::tvec4<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@C$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<signed char,2>::tvec4<signed char,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@C$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<signed char,2>::tvec4<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@C$01@glm@@QAE@XZ PROC			; glm::tvec4<signed char,2>::tvec4<signed char,2>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec4@C$01@glm@@QAE@XZ ENDP			; glm::tvec4<signed char,2>::tvec4<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$01@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@C$01@glm@@QBEABCH@Z PROC			; glm::tvec4<signed char,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@C$01@glm@@QBEABCH@Z ENDP			; glm::tvec4<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$01@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@C$01@glm@@QAEAACH@Z PROC			; glm::tvec4<signed char,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@C$01@glm@@QAEAACH@Z ENDP			; glm::tvec4<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@C$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@C$01@glm@@SAHXZ PROC			; glm::tvec4<signed char,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@C$01@glm@@SAHXZ ENDP			; glm::tvec4<signed char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@_K$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned __int64,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	paddq	xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	movups	XMMWORD PTR [ecx+16], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@_K$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@_K$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned __int64,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [eax+16], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@_K$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@_K$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@_K$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned __int64,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	paddq	xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	movups	XMMWORD PTR [ecx+16], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@_K$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@_K$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@_K$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned __int64,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [ecx+16]
	paddq	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001
	movups	XMMWORD PTR [ecx+16], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@_K$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$01@glm@@QAE@_K000@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
??0?$tvec4@_K$01@glm@@QAE@_K000@Z PROC			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR [ecx+28], eax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	32					; 00000020H
??0?$tvec4@_K$01@glm@@QAE@_K000@Z ENDP			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$01@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec4@_K$01@glm@@QAE@_K@Z PROC			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+28], eax

; 188  : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+24], edx
	pop	ebp
	ret	8
??0?$tvec4@_K$01@glm@@QAE@_K@Z ENDP			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@_K$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@_K$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@_K$01@glm@@QAE@XZ PROC			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	ret	0
??0?$tvec4@_K$01@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$01@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_K$01@glm@@QBEAB_KH@Z PROC			; glm::tvec4<unsigned __int64,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_K$01@glm@@QBEAB_KH@Z ENDP			; glm::tvec4<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$01@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@_K$01@glm@@QAEAA_KH@Z PROC			; glm::tvec4<unsigned __int64,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@_K$01@glm@@QAEAA_KH@Z ENDP			; glm::tvec4<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_K$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_K$01@glm@@SAHXZ PROC			; glm::tvec4<unsigned __int64,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@_K$01@glm@@SAHXZ ENDP			; glm::tvec4<unsigned __int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@I$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned int,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@I$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@I$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned int,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	paddd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@I$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@I$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@I$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned int,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	psubd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@I$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@I$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@I$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned int,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	paddd	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movups	XMMWORD PTR [ecx], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@I$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$01@glm@@QAE@IIII@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@I$01@glm@@QAE@IIII@Z PROC			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@I$01@glm@@QAE@IIII@Z ENDP			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$01@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@I$01@glm@@QAE@I@Z PROC			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@I$01@glm@@QAE@I@Z ENDP			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@I$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@I$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@I$01@glm@@QAE@XZ PROC			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec4@I$01@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$01@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@I$01@glm@@QBEABIH@Z PROC			; glm::tvec4<unsigned int,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@I$01@glm@@QBEABIH@Z ENDP			; glm::tvec4<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$01@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@I$01@glm@@QAEAAIH@Z PROC			; glm::tvec4<unsigned int,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@I$01@glm@@QAEAAIH@Z ENDP			; glm::tvec4<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@I$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@I$01@glm@@SAHXZ PROC			; glm::tvec4<unsigned int,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@I$01@glm@@SAHXZ ENDP			; glm::tvec4<unsigned int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@G$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned short,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 484  : 		--*this;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax
	add	WORD PTR [ecx+2], ax
	add	WORD PTR [ecx+4], ax
	add	WORD PTR [ecx+6], ax

; 485  : 		return Result;

	mov	eax, edx

; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@G$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@G$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned short,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]

; 476  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], eax

; 477  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@G$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@G$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@G$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned short,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 466  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 467  : 		--this->z;

	add	WORD PTR [ecx+4], ax

; 468  : 		--this->w;

	add	WORD PTR [ecx+6], ax

; 469  : 		return *this;

	mov	eax, ecx

; 470  : 	}

	ret	0
??F?$tvec4@G$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@G$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@G$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned short,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	WORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	inc	WORD PTR [ecx+6]

; 460  : 	}

	ret	0
??E?$tvec4@G$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$01@glm@@QAE@GGGG@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
_d$ = 20						; size = 2
??0?$tvec4@G$01@glm@@QAE@GGGG@Z PROC			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	ax, WORD PTR _d$[ebp]
	mov	WORD PTR [ecx+6], ax

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@G$01@glm@@QAE@GGGG@Z ENDP			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$01@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec4@G$01@glm@@QAE@G@Z PROC			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax
	mov	WORD PTR [ecx+6], ax

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@G$01@glm@@QAE@G@Z ENDP			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@G$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@G$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@G$01@glm@@QAE@XZ PROC			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 163  : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec4@G$01@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$01@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@G$01@glm@@QBEABGH@Z PROC			; glm::tvec4<unsigned short,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@G$01@glm@@QBEABGH@Z ENDP			; glm::tvec4<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$01@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@G$01@glm@@QAEAAGH@Z PROC			; glm::tvec4<unsigned short,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@G$01@glm@@QAEAAGH@Z ENDP			; glm::tvec4<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@G$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@G$01@glm@@SAHXZ PROC			; glm::tvec4<unsigned short,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@G$01@glm@@SAHXZ ENDP			; glm::tvec4<unsigned short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@E$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned char,2>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 484  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@E$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@E$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned char,2>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 476  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@E$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@E$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned char,2>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	BYTE PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]

; 470  : 	}

	ret	0
??F?$tvec4@E$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@E$01@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned char,2>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	BYTE PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]

; 460  : 	}

	ret	0
??E?$tvec4@E$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$01@glm@@QAE@EEEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
_d$ = 20						; size = 1
??0?$tvec4@E$01@glm@@QAE@EEEE@Z PROC			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR _d$[ebp]
	mov	BYTE PTR [ecx+3], al

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@E$01@glm@@QAE@EEEE@Z ENDP			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$01@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec4@E$01@glm@@QAE@E@Z PROC			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	BYTE PTR [ecx+3], al

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@E$01@glm@@QAE@E@Z ENDP			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@E$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@E$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@E$01@glm@@QAE@XZ PROC			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec4@E$01@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$01@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@E$01@glm@@QBEABEH@Z PROC			; glm::tvec4<unsigned char,2>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@E$01@glm@@QBEABEH@Z ENDP			; glm::tvec4<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$01@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@E$01@glm@@QAEAAEH@Z PROC			; glm::tvec4<unsigned char,2>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@E$01@glm@@QAEAAEH@Z ENDP			; glm::tvec4<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@E$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@E$01@glm@@SAHXZ PROC			; glm::tvec4<unsigned char,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@E$01@glm@@SAHXZ ENDP			; glm::tvec4<unsigned char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@N$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<double,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 331  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@N$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@N$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<double,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 323  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@N$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@N$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<double,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 317  : 	}

	ret	0
??F?$tvec3@N$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@N$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<double,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 308  : 	}

	ret	0
??E?$tvec3@N$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QAE@NNN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@N$0A@@glm@@QAE@NNN@Z PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	movsd	xmm0, QWORD PTR _a$[ebp]

; 70   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@N$0A@@glm@@QAE@NNN@Z ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@N$0A@@glm@@QAE@N@Z PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 65   : 	{}

	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tvec3@N$0A@@glm@@QAE@N@Z ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<double,0>::tvec3<double,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@N$0A@@glm@@QAE@XZ PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	ret	0
??0?$tvec3@N$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$0A@@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@N$0A@@glm@@QBEABNH@Z PROC			; glm::tvec3<double,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@N$0A@@glm@@QBEABNH@Z ENDP			; glm::tvec3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$0A@@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@N$0A@@glm@@QAEAANH@Z PROC			; glm::tvec3<double,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@N$0A@@glm@@QAEAANH@Z ENDP			; glm::tvec3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@N$0A@@glm@@SAHXZ PROC			; glm::tvec3<double,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@M$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<float,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]

; 331  : 		--*this;

	movss	xmm1, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx+8]
	movq	QWORD PTR [edx], xmm0
	subss	xmm0, xmm1
	mov	DWORD PTR [edx+8], eax

; 332  : 		return Result;

	mov	eax, edx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@M$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@M$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<float,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]

; 323  : 		++*this;

	movss	xmm1, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx+8]
	movq	QWORD PTR [edx], xmm0
	addss	xmm0, xmm1
	mov	DWORD PTR [edx+8], eax

; 324  : 		return Result;

	mov	eax, edx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@M$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@M$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<float,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 317  : 	}

	ret	0
??F?$tvec3@M$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@M$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<float,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 308  : 	}

	ret	0
??E?$tvec3@M$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QAE@MMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@M$0A@@glm@@QAE@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	movss	xmm0, DWORD PTR _a$[ebp]

; 70   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@M$0A@@glm@@QAE@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@M$0A@@glm@@QAE@M@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	movss	xmm0, DWORD PTR _scalar$[ebp]

; 65   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??0?$tvec3@M$0A@@glm@@QAE@M@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<float,0>::tvec3<float,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@M$0A@@glm@@QAE@XZ PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	DWORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$tvec3@M$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@M$0A@@glm@@QBEABMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@M$0A@@glm@@QBEABMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@M$0A@@glm@@QAEAAMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@M$0A@@glm@@QAEAAMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@_J$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec3<__int64,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]

; 331  : 		--*this;

	add	DWORD PTR [ecx], -1
	movq	QWORD PTR [eax+16], xmm0
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	add	DWORD PTR [ecx+16], -1
	adc	DWORD PTR [ecx+20], -1

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@_J$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec3<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@_J$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec3<__int64,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]

; 323  : 		++*this;

	add	DWORD PTR [ecx], 1
	movq	QWORD PTR [eax+16], xmm0
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], 0

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@_J$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec3<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@_J$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<__int64,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	add	DWORD PTR [ecx+16], -1
	adc	DWORD PTR [ecx+20], -1

; 317  : 	}

	ret	0
??F?$tvec3@_J$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@_J$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<__int64,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], 0

; 308  : 	}

	ret	0
??E?$tvec3@_J$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$0A@@glm@@QAE@_J00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@_J$0A@@glm@@QAE@_J00@Z PROC			; glm::tvec3<__int64,0>::tvec3<__int64,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@_J$0A@@glm@@QAE@_J00@Z ENDP			; glm::tvec3<__int64,0>::tvec3<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$0A@@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@_J$0A@@glm@@QAE@_J@Z PROC			; glm::tvec3<__int64,0>::tvec3<__int64,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax

; 65   : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	pop	ebp
	ret	8
??0?$tvec3@_J$0A@@glm@@QAE@_J@Z ENDP			; glm::tvec3<__int64,0>::tvec3<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@_J$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<__int64,0>::tvec3<__int64,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@_J$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<__int64,0>::tvec3<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@_J$0A@@glm@@QAE@XZ PROC			; glm::tvec3<__int64,0>::tvec3<__int64,0>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	DWORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	ret	0
??0?$tvec3@_J$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<__int64,0>::tvec3<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$0A@@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_J$0A@@glm@@QBEAB_JH@Z PROC			; glm::tvec3<__int64,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_J$0A@@glm@@QBEAB_JH@Z ENDP			; glm::tvec3<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$0A@@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_J$0A@@glm@@QAEAA_JH@Z PROC			; glm::tvec3<__int64,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_J$0A@@glm@@QAEAA_JH@Z ENDP			; glm::tvec3<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_J$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_J$0A@@glm@@SAHXZ PROC			; glm::tvec3<__int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@_J$0A@@glm@@SAHXZ ENDP			; glm::tvec3<__int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@H$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<int,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+8]

; 331  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], edx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@H$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@H$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<int,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+8]

; 323  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], edx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@H$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@H$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<int,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]

; 317  : 	}

	ret	0
??F?$tvec3@H$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@H$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<int,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]

; 308  : 	}

	ret	0
??E?$tvec3@H$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@H$0A@@glm@@QAE@HHH@Z PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@H$0A@@glm@@QAE@HHH@Z ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@H$0A@@glm@@QAE@H@Z PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@H$0A@@glm@@QAE@H@Z ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@H$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<int,0>::tvec3<int,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@H$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@H$0A@@glm@@QAE@XZ PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	DWORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$tvec3@H$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$0A@@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@H$0A@@glm@@QBEABHH@Z PROC			; glm::tvec3<int,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@H$0A@@glm@@QBEABHH@Z ENDP			; glm::tvec3<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$0A@@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@H$0A@@glm@@QAEAAHH@Z PROC			; glm::tvec3<int,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@H$0A@@glm@@QAEAAHH@Z ENDP			; glm::tvec3<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@H$0A@@glm@@SAHXZ PROC			; glm::tvec3<int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@H$0A@@glm@@SAHXZ ENDP			; glm::tvec3<int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@F$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<short,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 331  : 		--*this;

	dec	WORD PTR [ecx]
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@F$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@F$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<short,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 323  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@F$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@F$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<short,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	WORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]

; 317  : 	}

	ret	0
??F?$tvec3@F$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@F$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<short,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	WORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]

; 308  : 	}

	ret	0
??E?$tvec3@F$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$0A@@glm@@QAE@FFF@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
??0?$tvec3@F$0A@@glm@@QAE@FFF@Z PROC			; glm::tvec3<short,0>::tvec3<short,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@F$0A@@glm@@QAE@FFF@Z ENDP			; glm::tvec3<short,0>::tvec3<short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$0A@@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec3@F$0A@@glm@@QAE@F@Z PROC			; glm::tvec3<short,0>::tvec3<short,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@F$0A@@glm@@QAE@F@Z ENDP			; glm::tvec3<short,0>::tvec3<short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@F$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<short,0>::tvec3<short,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@F$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<short,0>::tvec3<short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@F$0A@@glm@@QAE@XZ PROC			; glm::tvec3<short,0>::tvec3<short,0>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	WORD PTR [ecx+4], ax

; 40   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec3@F$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<short,0>::tvec3<short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$0A@@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@F$0A@@glm@@QBEABFH@Z PROC			; glm::tvec3<short,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@F$0A@@glm@@QBEABFH@Z ENDP			; glm::tvec3<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$0A@@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@F$0A@@glm@@QAEAAFH@Z PROC			; glm::tvec3<short,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@F$0A@@glm@@QAEAAFH@Z ENDP			; glm::tvec3<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@F$0A@@glm@@SAHXZ PROC			; glm::tvec3<short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@F$0A@@glm@@SAHXZ ENDP			; glm::tvec3<short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@C$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<signed char,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 331  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@C$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@C$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<signed char,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 323  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@C$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@C$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<signed char,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	BYTE PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]

; 317  : 	}

	ret	0
??F?$tvec3@C$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@C$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<signed char,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	BYTE PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]

; 308  : 	}

	ret	0
??E?$tvec3@C$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$0A@@glm@@QAE@CCC@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
??0?$tvec3@C$0A@@glm@@QAE@CCC@Z PROC			; glm::tvec3<signed char,0>::tvec3<signed char,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@C$0A@@glm@@QAE@CCC@Z ENDP			; glm::tvec3<signed char,0>::tvec3<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$0A@@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec3@C$0A@@glm@@QAE@C@Z PROC			; glm::tvec3<signed char,0>::tvec3<signed char,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@C$0A@@glm@@QAE@C@Z ENDP			; glm::tvec3<signed char,0>::tvec3<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@C$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<signed char,0>::tvec3<signed char,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@C$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<signed char,0>::tvec3<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@C$0A@@glm@@QAE@XZ PROC			; glm::tvec3<signed char,0>::tvec3<signed char,0>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	WORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	BYTE PTR [ecx+2], 0
	ret	0
??0?$tvec3@C$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<signed char,0>::tvec3<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$0A@@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@C$0A@@glm@@QBEABCH@Z PROC			; glm::tvec3<signed char,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@C$0A@@glm@@QBEABCH@Z ENDP			; glm::tvec3<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$0A@@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@C$0A@@glm@@QAEAACH@Z PROC			; glm::tvec3<signed char,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@C$0A@@glm@@QAEAACH@Z ENDP			; glm::tvec3<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@C$0A@@glm@@SAHXZ PROC			; glm::tvec3<signed char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@C$0A@@glm@@SAHXZ ENDP			; glm::tvec3<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@_K$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec3<unsigned __int64,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]

; 331  : 		--*this;

	add	DWORD PTR [ecx], -1
	movq	QWORD PTR [eax+16], xmm0
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	add	DWORD PTR [ecx+16], -1
	adc	DWORD PTR [ecx+20], -1

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@_K$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec3<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@_K$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec3<unsigned __int64,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]

; 323  : 		++*this;

	add	DWORD PTR [ecx], 1
	movq	QWORD PTR [eax+16], xmm0
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], 0

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@_K$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec3<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@_K$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned __int64,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	add	DWORD PTR [ecx+16], -1
	adc	DWORD PTR [ecx+20], -1

; 317  : 	}

	ret	0
??F?$tvec3@_K$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@_K$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned __int64,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], 0

; 308  : 	}

	ret	0
??E?$tvec3@_K$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$0A@@glm@@QAE@_K00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@_K$0A@@glm@@QAE@_K00@Z PROC			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@_K$0A@@glm@@QAE@_K00@Z ENDP			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$0A@@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@_K$0A@@glm@@QAE@_K@Z PROC			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax

; 65   : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	pop	ebp
	ret	8
??0?$tvec3@_K$0A@@glm@@QAE@_K@Z ENDP			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@_K$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@_K$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@_K$0A@@glm@@QAE@XZ PROC			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	DWORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	ret	0
??0?$tvec3@_K$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$0A@@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_K$0A@@glm@@QBEAB_KH@Z PROC			; glm::tvec3<unsigned __int64,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_K$0A@@glm@@QBEAB_KH@Z ENDP			; glm::tvec3<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$0A@@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_K$0A@@glm@@QAEAA_KH@Z PROC			; glm::tvec3<unsigned __int64,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_K$0A@@glm@@QAEAA_KH@Z ENDP			; glm::tvec3<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_K$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_K$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned __int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@_K$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned __int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@I$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned int,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+8]

; 331  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], edx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@I$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@I$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned int,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+8]

; 323  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], edx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@I$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@I$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned int,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]

; 317  : 	}

	ret	0
??F?$tvec3@I$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@I$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned int,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]

; 308  : 	}

	ret	0
??E?$tvec3@I$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QAE@III@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@I$0A@@glm@@QAE@III@Z PROC			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@I$0A@@glm@@QAE@III@Z ENDP			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@I$0A@@glm@@QAE@I@Z PROC			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@I$0A@@glm@@QAE@I@Z ENDP			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@I$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@I$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@I$0A@@glm@@QAE@XZ PROC			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	DWORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$tvec3@I$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$0A@@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@I$0A@@glm@@QBEABIH@Z PROC			; glm::tvec3<unsigned int,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@I$0A@@glm@@QBEABIH@Z ENDP			; glm::tvec3<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$0A@@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@I$0A@@glm@@QAEAAIH@Z PROC			; glm::tvec3<unsigned int,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@I$0A@@glm@@QAEAAIH@Z ENDP			; glm::tvec3<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@I$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@I$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@G$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned short,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	ax, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], ax

; 331  : 		--*this;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax
	add	WORD PTR [ecx+2], ax
	add	WORD PTR [ecx+4], ax

; 332  : 		return Result;

	mov	eax, edx

; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@G$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@G$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned short,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 323  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@G$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@G$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned short,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 314  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 315  : 		--this->z;

	add	WORD PTR [ecx+4], ax

; 316  : 		return *this;

	mov	eax, ecx

; 317  : 	}

	ret	0
??F?$tvec3@G$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@G$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned short,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	WORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]

; 308  : 	}

	ret	0
??E?$tvec3@G$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$0A@@glm@@QAE@GGG@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
??0?$tvec3@G$0A@@glm@@QAE@GGG@Z PROC			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@G$0A@@glm@@QAE@GGG@Z ENDP			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$0A@@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec3@G$0A@@glm@@QAE@G@Z PROC			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@G$0A@@glm@@QAE@G@Z ENDP			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@G$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@G$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@G$0A@@glm@@QAE@XZ PROC			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	WORD PTR [ecx+4], ax

; 40   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec3@G$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$0A@@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@G$0A@@glm@@QBEABGH@Z PROC			; glm::tvec3<unsigned short,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@G$0A@@glm@@QBEABGH@Z ENDP			; glm::tvec3<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$0A@@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@G$0A@@glm@@QAEAAGH@Z PROC			; glm::tvec3<unsigned short,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@G$0A@@glm@@QAEAAGH@Z ENDP			; glm::tvec3<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@G$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@G$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@E$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned char,0>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 331  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@E$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@E$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned char,0>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 323  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@E$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@E$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned char,0>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	BYTE PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]

; 317  : 	}

	ret	0
??F?$tvec3@E$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@E$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned char,0>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	BYTE PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]

; 308  : 	}

	ret	0
??E?$tvec3@E$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$0A@@glm@@QAE@EEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
??0?$tvec3@E$0A@@glm@@QAE@EEE@Z PROC			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@E$0A@@glm@@QAE@EEE@Z ENDP			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$0A@@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec3@E$0A@@glm@@QAE@E@Z PROC			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@E$0A@@glm@@QAE@E@Z ENDP			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@E$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@E$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@E$0A@@glm@@QAE@XZ PROC			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	WORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	BYTE PTR [ecx+2], 0
	ret	0
??0?$tvec3@E$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$0A@@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@E$0A@@glm@@QBEABEH@Z PROC			; glm::tvec3<unsigned char,0>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@E$0A@@glm@@QBEABEH@Z ENDP			; glm::tvec3<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$0A@@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@E$0A@@glm@@QAEAAEH@Z PROC			; glm::tvec3<unsigned char,0>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@E$0A@@glm@@QAEAAEH@Z ENDP			; glm::tvec3<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@E$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@E$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@N$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<double,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 331  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@N$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@N$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<double,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 323  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@N$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@N$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<double,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 317  : 	}

	ret	0
??F?$tvec3@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@N$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<double,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 308  : 	}

	ret	0
??E?$tvec3@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$00@glm@@QAE@NNN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@N$00@glm@@QAE@NNN@Z PROC			; glm::tvec3<double,1>::tvec3<double,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	movsd	xmm0, QWORD PTR _a$[ebp]

; 70   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@N$00@glm@@QAE@NNN@Z ENDP			; glm::tvec3<double,1>::tvec3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@N$00@glm@@QAE@N@Z PROC			; glm::tvec3<double,1>::tvec3<double,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 65   : 	{}

	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tvec3@N$00@glm@@QAE@N@Z ENDP			; glm::tvec3<double,1>::tvec3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<double,1>::tvec3<double,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<double,1>::tvec3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@N$00@glm@@QAE@XZ PROC			; glm::tvec3<double,1>::tvec3<double,1>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	ret	0
??0?$tvec3@N$00@glm@@QAE@XZ ENDP			; glm::tvec3<double,1>::tvec3<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$00@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@N$00@glm@@QBEABNH@Z PROC			; glm::tvec3<double,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@N$00@glm@@QBEABNH@Z ENDP			; glm::tvec3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$00@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@N$00@glm@@QAEAANH@Z PROC			; glm::tvec3<double,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@N$00@glm@@QAEAANH@Z ENDP			; glm::tvec3<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@N$00@glm@@SAHXZ PROC			; glm::tvec3<double,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@N$00@glm@@SAHXZ ENDP			; glm::tvec3<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@M$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<float,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]

; 331  : 		--*this;

	movss	xmm1, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx+8]
	movq	QWORD PTR [edx], xmm0
	subss	xmm0, xmm1
	mov	DWORD PTR [edx+8], eax

; 332  : 		return Result;

	mov	eax, edx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@M$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@M$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<float,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]

; 323  : 		++*this;

	movss	xmm1, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx+8]
	movq	QWORD PTR [edx], xmm0
	addss	xmm0, xmm1
	mov	DWORD PTR [edx+8], eax

; 324  : 		return Result;

	mov	eax, edx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@M$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@M$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<float,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 317  : 	}

	ret	0
??F?$tvec3@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@M$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<float,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 308  : 	}

	ret	0
??E?$tvec3@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$00@glm@@QAE@MMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@M$00@glm@@QAE@MMM@Z PROC			; glm::tvec3<float,1>::tvec3<float,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	movss	xmm0, DWORD PTR _a$[ebp]

; 70   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@M$00@glm@@QAE@MMM@Z ENDP			; glm::tvec3<float,1>::tvec3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@M$00@glm@@QAE@M@Z PROC			; glm::tvec3<float,1>::tvec3<float,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	movss	xmm0, DWORD PTR _scalar$[ebp]

; 65   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??0?$tvec3@M$00@glm@@QAE@M@Z ENDP			; glm::tvec3<float,1>::tvec3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<float,1>::tvec3<float,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<float,1>::tvec3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@M$00@glm@@QAE@XZ PROC			; glm::tvec3<float,1>::tvec3<float,1>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	DWORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$tvec3@M$00@glm@@QAE@XZ ENDP			; glm::tvec3<float,1>::tvec3<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$00@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@M$00@glm@@QBEABMH@Z PROC			; glm::tvec3<float,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@M$00@glm@@QBEABMH@Z ENDP			; glm::tvec3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$00@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@M$00@glm@@QAEAAMH@Z PROC			; glm::tvec3<float,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@M$00@glm@@QAEAAMH@Z ENDP			; glm::tvec3<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$00@glm@@SAHXZ PROC			; glm::tvec3<float,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@M$00@glm@@SAHXZ ENDP			; glm::tvec3<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@_J$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<__int64,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]

; 331  : 		--*this;

	add	DWORD PTR [ecx], -1
	movq	QWORD PTR [eax+16], xmm0
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	add	DWORD PTR [ecx+16], -1
	adc	DWORD PTR [ecx+20], -1

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@_J$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@_J$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<__int64,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]

; 323  : 		++*this;

	add	DWORD PTR [ecx], 1
	movq	QWORD PTR [eax+16], xmm0
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], 0

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@_J$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@_J$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<__int64,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	add	DWORD PTR [ecx+16], -1
	adc	DWORD PTR [ecx+20], -1

; 317  : 	}

	ret	0
??F?$tvec3@_J$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@_J$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<__int64,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], 0

; 308  : 	}

	ret	0
??E?$tvec3@_J$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$00@glm@@QAE@_J00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@_J$00@glm@@QAE@_J00@Z PROC			; glm::tvec3<__int64,1>::tvec3<__int64,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@_J$00@glm@@QAE@_J00@Z ENDP			; glm::tvec3<__int64,1>::tvec3<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$00@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@_J$00@glm@@QAE@_J@Z PROC			; glm::tvec3<__int64,1>::tvec3<__int64,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax

; 65   : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	pop	ebp
	ret	8
??0?$tvec3@_J$00@glm@@QAE@_J@Z ENDP			; glm::tvec3<__int64,1>::tvec3<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@_J$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<__int64,1>::tvec3<__int64,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@_J$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<__int64,1>::tvec3<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@_J$00@glm@@QAE@XZ PROC			; glm::tvec3<__int64,1>::tvec3<__int64,1>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	DWORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	ret	0
??0?$tvec3@_J$00@glm@@QAE@XZ ENDP			; glm::tvec3<__int64,1>::tvec3<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$00@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_J$00@glm@@QBEAB_JH@Z PROC			; glm::tvec3<__int64,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_J$00@glm@@QBEAB_JH@Z ENDP			; glm::tvec3<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$00@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_J$00@glm@@QAEAA_JH@Z PROC			; glm::tvec3<__int64,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_J$00@glm@@QAEAA_JH@Z ENDP			; glm::tvec3<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_J$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_J$00@glm@@SAHXZ PROC			; glm::tvec3<__int64,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@_J$00@glm@@SAHXZ ENDP			; glm::tvec3<__int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@H$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<int,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+8]

; 331  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], edx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@H$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@H$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<int,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+8]

; 323  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], edx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@H$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@H$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<int,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]

; 317  : 	}

	ret	0
??F?$tvec3@H$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@H$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<int,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]

; 308  : 	}

	ret	0
??E?$tvec3@H$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$00@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@H$00@glm@@QAE@HHH@Z PROC			; glm::tvec3<int,1>::tvec3<int,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@H$00@glm@@QAE@HHH@Z ENDP			; glm::tvec3<int,1>::tvec3<int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$00@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@H$00@glm@@QAE@H@Z PROC			; glm::tvec3<int,1>::tvec3<int,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@H$00@glm@@QAE@H@Z ENDP			; glm::tvec3<int,1>::tvec3<int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@H$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<int,1>::tvec3<int,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@H$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<int,1>::tvec3<int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@H$00@glm@@QAE@XZ PROC			; glm::tvec3<int,1>::tvec3<int,1>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	DWORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$tvec3@H$00@glm@@QAE@XZ ENDP			; glm::tvec3<int,1>::tvec3<int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$00@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@H$00@glm@@QBEABHH@Z PROC			; glm::tvec3<int,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@H$00@glm@@QBEABHH@Z ENDP			; glm::tvec3<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$00@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@H$00@glm@@QAEAAHH@Z PROC			; glm::tvec3<int,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@H$00@glm@@QAEAAHH@Z ENDP			; glm::tvec3<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@H$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@H$00@glm@@SAHXZ PROC			; glm::tvec3<int,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@H$00@glm@@SAHXZ ENDP			; glm::tvec3<int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@F$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<short,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 331  : 		--*this;

	dec	WORD PTR [ecx]
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@F$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@F$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<short,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 323  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@F$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@F$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<short,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	WORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]

; 317  : 	}

	ret	0
??F?$tvec3@F$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@F$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<short,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	WORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]

; 308  : 	}

	ret	0
??E?$tvec3@F$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$00@glm@@QAE@FFF@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
??0?$tvec3@F$00@glm@@QAE@FFF@Z PROC			; glm::tvec3<short,1>::tvec3<short,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@F$00@glm@@QAE@FFF@Z ENDP			; glm::tvec3<short,1>::tvec3<short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$00@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec3@F$00@glm@@QAE@F@Z PROC			; glm::tvec3<short,1>::tvec3<short,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@F$00@glm@@QAE@F@Z ENDP			; glm::tvec3<short,1>::tvec3<short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@F$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<short,1>::tvec3<short,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@F$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<short,1>::tvec3<short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@F$00@glm@@QAE@XZ PROC			; glm::tvec3<short,1>::tvec3<short,1>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	WORD PTR [ecx+4], ax

; 40   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec3@F$00@glm@@QAE@XZ ENDP			; glm::tvec3<short,1>::tvec3<short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$00@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@F$00@glm@@QBEABFH@Z PROC			; glm::tvec3<short,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@F$00@glm@@QBEABFH@Z ENDP			; glm::tvec3<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$00@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@F$00@glm@@QAEAAFH@Z PROC			; glm::tvec3<short,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@F$00@glm@@QAEAAFH@Z ENDP			; glm::tvec3<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@F$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@F$00@glm@@SAHXZ PROC			; glm::tvec3<short,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@F$00@glm@@SAHXZ ENDP			; glm::tvec3<short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@C$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<signed char,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 331  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@C$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@C$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<signed char,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 323  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@C$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@C$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<signed char,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	BYTE PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]

; 317  : 	}

	ret	0
??F?$tvec3@C$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@C$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<signed char,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	BYTE PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]

; 308  : 	}

	ret	0
??E?$tvec3@C$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$00@glm@@QAE@CCC@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
??0?$tvec3@C$00@glm@@QAE@CCC@Z PROC			; glm::tvec3<signed char,1>::tvec3<signed char,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@C$00@glm@@QAE@CCC@Z ENDP			; glm::tvec3<signed char,1>::tvec3<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$00@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec3@C$00@glm@@QAE@C@Z PROC			; glm::tvec3<signed char,1>::tvec3<signed char,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@C$00@glm@@QAE@C@Z ENDP			; glm::tvec3<signed char,1>::tvec3<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@C$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<signed char,1>::tvec3<signed char,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@C$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<signed char,1>::tvec3<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@C$00@glm@@QAE@XZ PROC			; glm::tvec3<signed char,1>::tvec3<signed char,1>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	WORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	BYTE PTR [ecx+2], 0
	ret	0
??0?$tvec3@C$00@glm@@QAE@XZ ENDP			; glm::tvec3<signed char,1>::tvec3<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$00@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@C$00@glm@@QBEABCH@Z PROC			; glm::tvec3<signed char,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@C$00@glm@@QBEABCH@Z ENDP			; glm::tvec3<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$00@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@C$00@glm@@QAEAACH@Z PROC			; glm::tvec3<signed char,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@C$00@glm@@QAEAACH@Z ENDP			; glm::tvec3<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@C$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@C$00@glm@@SAHXZ PROC			; glm::tvec3<signed char,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@C$00@glm@@SAHXZ ENDP			; glm::tvec3<signed char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@_K$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned __int64,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]

; 331  : 		--*this;

	add	DWORD PTR [ecx], -1
	movq	QWORD PTR [eax+16], xmm0
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	add	DWORD PTR [ecx+16], -1
	adc	DWORD PTR [ecx+20], -1

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@_K$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@_K$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned __int64,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]

; 323  : 		++*this;

	add	DWORD PTR [ecx], 1
	movq	QWORD PTR [eax+16], xmm0
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], 0

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@_K$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@_K$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned __int64,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	add	DWORD PTR [ecx+16], -1
	adc	DWORD PTR [ecx+20], -1

; 317  : 	}

	ret	0
??F?$tvec3@_K$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@_K$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned __int64,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], 0

; 308  : 	}

	ret	0
??E?$tvec3@_K$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$00@glm@@QAE@_K00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@_K$00@glm@@QAE@_K00@Z PROC			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@_K$00@glm@@QAE@_K00@Z ENDP			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$00@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@_K$00@glm@@QAE@_K@Z PROC			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax

; 65   : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	pop	ebp
	ret	8
??0?$tvec3@_K$00@glm@@QAE@_K@Z ENDP			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@_K$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@_K$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@_K$00@glm@@QAE@XZ PROC			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	DWORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	ret	0
??0?$tvec3@_K$00@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$00@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_K$00@glm@@QBEAB_KH@Z PROC			; glm::tvec3<unsigned __int64,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_K$00@glm@@QBEAB_KH@Z ENDP			; glm::tvec3<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$00@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_K$00@glm@@QAEAA_KH@Z PROC			; glm::tvec3<unsigned __int64,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_K$00@glm@@QAEAA_KH@Z ENDP			; glm::tvec3<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_K$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_K$00@glm@@SAHXZ PROC			; glm::tvec3<unsigned __int64,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@_K$00@glm@@SAHXZ ENDP			; glm::tvec3<unsigned __int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@I$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned int,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+8]

; 331  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], edx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@I$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@I$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned int,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+8]

; 323  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], edx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@I$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@I$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned int,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]

; 317  : 	}

	ret	0
??F?$tvec3@I$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@I$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned int,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]

; 308  : 	}

	ret	0
??E?$tvec3@I$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$00@glm@@QAE@III@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@I$00@glm@@QAE@III@Z PROC			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@I$00@glm@@QAE@III@Z ENDP			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$00@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@I$00@glm@@QAE@I@Z PROC			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@I$00@glm@@QAE@I@Z ENDP			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@I$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@I$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@I$00@glm@@QAE@XZ PROC			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	DWORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$tvec3@I$00@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$00@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@I$00@glm@@QBEABIH@Z PROC			; glm::tvec3<unsigned int,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@I$00@glm@@QBEABIH@Z ENDP			; glm::tvec3<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$00@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@I$00@glm@@QAEAAIH@Z PROC			; glm::tvec3<unsigned int,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@I$00@glm@@QAEAAIH@Z ENDP			; glm::tvec3<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@I$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@I$00@glm@@SAHXZ PROC			; glm::tvec3<unsigned int,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@I$00@glm@@SAHXZ ENDP			; glm::tvec3<unsigned int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@G$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned short,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	ax, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], ax

; 331  : 		--*this;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax
	add	WORD PTR [ecx+2], ax
	add	WORD PTR [ecx+4], ax

; 332  : 		return Result;

	mov	eax, edx

; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@G$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@G$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned short,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 323  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@G$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@G$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned short,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 314  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 315  : 		--this->z;

	add	WORD PTR [ecx+4], ax

; 316  : 		return *this;

	mov	eax, ecx

; 317  : 	}

	ret	0
??F?$tvec3@G$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@G$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned short,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	WORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]

; 308  : 	}

	ret	0
??E?$tvec3@G$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$00@glm@@QAE@GGG@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
??0?$tvec3@G$00@glm@@QAE@GGG@Z PROC			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@G$00@glm@@QAE@GGG@Z ENDP			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$00@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec3@G$00@glm@@QAE@G@Z PROC			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@G$00@glm@@QAE@G@Z ENDP			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@G$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@G$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@G$00@glm@@QAE@XZ PROC			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	WORD PTR [ecx+4], ax

; 40   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec3@G$00@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$00@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@G$00@glm@@QBEABGH@Z PROC			; glm::tvec3<unsigned short,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@G$00@glm@@QBEABGH@Z ENDP			; glm::tvec3<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$00@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@G$00@glm@@QAEAAGH@Z PROC			; glm::tvec3<unsigned short,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@G$00@glm@@QAEAAGH@Z ENDP			; glm::tvec3<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@G$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@G$00@glm@@SAHXZ PROC			; glm::tvec3<unsigned short,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@G$00@glm@@SAHXZ ENDP			; glm::tvec3<unsigned short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@E$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned char,1>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 331  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@E$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@E$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned char,1>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 323  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@E$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@E$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned char,1>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	BYTE PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]

; 317  : 	}

	ret	0
??F?$tvec3@E$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@E$00@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned char,1>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	BYTE PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]

; 308  : 	}

	ret	0
??E?$tvec3@E$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$00@glm@@QAE@EEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
??0?$tvec3@E$00@glm@@QAE@EEE@Z PROC			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@E$00@glm@@QAE@EEE@Z ENDP			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$00@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec3@E$00@glm@@QAE@E@Z PROC			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@E$00@glm@@QAE@E@Z ENDP			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@E$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@E$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@E$00@glm@@QAE@XZ PROC			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	WORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	BYTE PTR [ecx+2], 0
	ret	0
??0?$tvec3@E$00@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$00@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@E$00@glm@@QBEABEH@Z PROC			; glm::tvec3<unsigned char,1>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@E$00@glm@@QBEABEH@Z ENDP			; glm::tvec3<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$00@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@E$00@glm@@QAEAAEH@Z PROC			; glm::tvec3<unsigned char,1>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@E$00@glm@@QAEAAEH@Z ENDP			; glm::tvec3<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@E$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@E$00@glm@@SAHXZ PROC			; glm::tvec3<unsigned char,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@E$00@glm@@SAHXZ ENDP			; glm::tvec3<unsigned char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@N$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<double,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 331  : 		--*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@N$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@N$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<double,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 323  : 		++*this;

	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@N$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@N$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<double,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	subpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	subsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 317  : 	}

	ret	0
??F?$tvec3@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@N$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<double,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	movaps	xmm1, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	addpd	xmm0, xmm1
	movups	XMMWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR [ecx+16]
	addsd	xmm0, xmm1
	movsd	QWORD PTR [ecx+16], xmm0

; 308  : 	}

	ret	0
??E?$tvec3@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$01@glm@@QAE@NNN@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@N$01@glm@@QAE@NNN@Z PROC			; glm::tvec3<double,2>::tvec3<double,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	movsd	xmm0, QWORD PTR _a$[ebp]

; 70   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	movsd	xmm0, QWORD PTR _c$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@N$01@glm@@QAE@NNN@Z ENDP			; glm::tvec3<double,2>::tvec3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@N$01@glm@@QAE@N@Z PROC			; glm::tvec3<double,2>::tvec3<double,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 65   : 	{}

	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	pop	ebp
	ret	8
??0?$tvec3@N$01@glm@@QAE@N@Z ENDP			; glm::tvec3<double,2>::tvec3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<double,2>::tvec3<double,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<double,2>::tvec3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@N$01@glm@@QAE@XZ PROC			; glm::tvec3<double,2>::tvec3<double,2>, COMDAT
; _this$ = ecx

; 40   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movsd	QWORD PTR [ecx+16], xmm0
	ret	0
??0?$tvec3@N$01@glm@@QAE@XZ ENDP			; glm::tvec3<double,2>::tvec3<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$01@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@N$01@glm@@QBEABNH@Z PROC			; glm::tvec3<double,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@N$01@glm@@QBEABNH@Z ENDP			; glm::tvec3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$01@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@N$01@glm@@QAEAANH@Z PROC			; glm::tvec3<double,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@N$01@glm@@QAEAANH@Z ENDP			; glm::tvec3<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@N$01@glm@@SAHXZ PROC			; glm::tvec3<double,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@N$01@glm@@SAHXZ ENDP			; glm::tvec3<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@M$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<float,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]

; 331  : 		--*this;

	movss	xmm1, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx+8]
	movq	QWORD PTR [edx], xmm0
	subss	xmm0, xmm1
	mov	DWORD PTR [edx+8], eax

; 332  : 		return Result;

	mov	eax, edx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@M$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@M$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<float,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]

; 323  : 		++*this;

	movss	xmm1, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx+8]
	movq	QWORD PTR [edx], xmm0
	addss	xmm0, xmm1
	mov	DWORD PTR [edx+8], eax

; 324  : 		return Result;

	mov	eax, edx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@M$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@M$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<float,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 317  : 	}

	ret	0
??F?$tvec3@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@M$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<float,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR [ecx+8], xmm0

; 308  : 	}

	ret	0
??E?$tvec3@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$01@glm@@QAE@MMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@M$01@glm@@QAE@MMM@Z PROC			; glm::tvec3<float,2>::tvec3<float,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	movss	xmm0, DWORD PTR _a$[ebp]

; 70   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@M$01@glm@@QAE@MMM@Z ENDP			; glm::tvec3<float,2>::tvec3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@M$01@glm@@QAE@M@Z PROC			; glm::tvec3<float,2>::tvec3<float,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	movss	xmm0, DWORD PTR _scalar$[ebp]

; 65   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	DWORD PTR [ecx+4], xmm0
	movss	DWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	4
??0?$tvec3@M$01@glm@@QAE@M@Z ENDP			; glm::tvec3<float,2>::tvec3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<float,2>::tvec3<float,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<float,2>::tvec3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@M$01@glm@@QAE@XZ PROC			; glm::tvec3<float,2>::tvec3<float,2>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	DWORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$tvec3@M$01@glm@@QAE@XZ ENDP			; glm::tvec3<float,2>::tvec3<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$01@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@M$01@glm@@QBEABMH@Z PROC			; glm::tvec3<float,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@M$01@glm@@QBEABMH@Z ENDP			; glm::tvec3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$01@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@M$01@glm@@QAEAAMH@Z PROC			; glm::tvec3<float,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@M$01@glm@@QAEAAMH@Z ENDP			; glm::tvec3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$01@glm@@SAHXZ PROC			; glm::tvec3<float,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@M$01@glm@@SAHXZ ENDP			; glm::tvec3<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@_J$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<__int64,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]

; 331  : 		--*this;

	add	DWORD PTR [ecx], -1
	movq	QWORD PTR [eax+16], xmm0
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	add	DWORD PTR [ecx+16], -1
	adc	DWORD PTR [ecx+20], -1

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@_J$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@_J$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<__int64,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]

; 323  : 		++*this;

	add	DWORD PTR [ecx], 1
	movq	QWORD PTR [eax+16], xmm0
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], 0

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@_J$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_J$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@_J$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<__int64,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	add	DWORD PTR [ecx+16], -1
	adc	DWORD PTR [ecx+20], -1

; 317  : 	}

	ret	0
??F?$tvec3@_J$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_J$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@_J$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<__int64,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], 0

; 308  : 	}

	ret	0
??E?$tvec3@_J$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$01@glm@@QAE@_J00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@_J$01@glm@@QAE@_J00@Z PROC			; glm::tvec3<__int64,2>::tvec3<__int64,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@_J$01@glm@@QAE@_J00@Z ENDP			; glm::tvec3<__int64,2>::tvec3<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$01@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@_J$01@glm@@QAE@_J@Z PROC			; glm::tvec3<__int64,2>::tvec3<__int64,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax

; 65   : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	pop	ebp
	ret	8
??0?$tvec3@_J$01@glm@@QAE@_J@Z ENDP			; glm::tvec3<__int64,2>::tvec3<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@_J$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<__int64,2>::tvec3<__int64,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@_J$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<__int64,2>::tvec3<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@_J$01@glm@@QAE@XZ PROC			; glm::tvec3<__int64,2>::tvec3<__int64,2>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	DWORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	ret	0
??0?$tvec3@_J$01@glm@@QAE@XZ ENDP			; glm::tvec3<__int64,2>::tvec3<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$01@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_J$01@glm@@QBEAB_JH@Z PROC			; glm::tvec3<__int64,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_J$01@glm@@QBEAB_JH@Z ENDP			; glm::tvec3<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$01@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_J$01@glm@@QAEAA_JH@Z PROC			; glm::tvec3<__int64,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_J$01@glm@@QAEAA_JH@Z ENDP			; glm::tvec3<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_J$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_J$01@glm@@SAHXZ PROC			; glm::tvec3<__int64,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@_J$01@glm@@SAHXZ ENDP			; glm::tvec3<__int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@H$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<int,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+8]

; 331  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], edx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@H$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@H$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<int,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+8]

; 323  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], edx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@H$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@H$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@H$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<int,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]

; 317  : 	}

	ret	0
??F?$tvec3@H$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@H$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@H$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<int,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]

; 308  : 	}

	ret	0
??E?$tvec3@H$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$01@glm@@QAE@HHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@H$01@glm@@QAE@HHH@Z PROC			; glm::tvec3<int,2>::tvec3<int,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@H$01@glm@@QAE@HHH@Z ENDP			; glm::tvec3<int,2>::tvec3<int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$01@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@H$01@glm@@QAE@H@Z PROC			; glm::tvec3<int,2>::tvec3<int,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@H$01@glm@@QAE@H@Z ENDP			; glm::tvec3<int,2>::tvec3<int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@H$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<int,2>::tvec3<int,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@H$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<int,2>::tvec3<int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@H$01@glm@@QAE@XZ PROC			; glm::tvec3<int,2>::tvec3<int,2>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	DWORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$tvec3@H$01@glm@@QAE@XZ ENDP			; glm::tvec3<int,2>::tvec3<int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$01@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@H$01@glm@@QBEABHH@Z PROC			; glm::tvec3<int,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@H$01@glm@@QBEABHH@Z ENDP			; glm::tvec3<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$01@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@H$01@glm@@QAEAAHH@Z PROC			; glm::tvec3<int,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@H$01@glm@@QAEAAHH@Z ENDP			; glm::tvec3<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@H$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@H$01@glm@@SAHXZ PROC			; glm::tvec3<int,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@H$01@glm@@SAHXZ ENDP			; glm::tvec3<int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@F$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<short,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 331  : 		--*this;

	dec	WORD PTR [ecx]
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@F$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@F$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<short,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 323  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@F$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@F$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@F$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<short,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	WORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]
	dec	WORD PTR [ecx+4]

; 317  : 	}

	ret	0
??F?$tvec3@F$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@F$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@F$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<short,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	WORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]

; 308  : 	}

	ret	0
??E?$tvec3@F$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$01@glm@@QAE@FFF@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
??0?$tvec3@F$01@glm@@QAE@FFF@Z PROC			; glm::tvec3<short,2>::tvec3<short,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@F$01@glm@@QAE@FFF@Z ENDP			; glm::tvec3<short,2>::tvec3<short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$01@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec3@F$01@glm@@QAE@F@Z PROC			; glm::tvec3<short,2>::tvec3<short,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@F$01@glm@@QAE@F@Z ENDP			; glm::tvec3<short,2>::tvec3<short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@F$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<short,2>::tvec3<short,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@F$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<short,2>::tvec3<short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@F$01@glm@@QAE@XZ PROC			; glm::tvec3<short,2>::tvec3<short,2>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	WORD PTR [ecx+4], ax

; 40   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec3@F$01@glm@@QAE@XZ ENDP			; glm::tvec3<short,2>::tvec3<short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$01@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@F$01@glm@@QBEABFH@Z PROC			; glm::tvec3<short,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@F$01@glm@@QBEABFH@Z ENDP			; glm::tvec3<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$01@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@F$01@glm@@QAEAAFH@Z PROC			; glm::tvec3<short,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@F$01@glm@@QAEAAFH@Z ENDP			; glm::tvec3<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@F$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@F$01@glm@@SAHXZ PROC			; glm::tvec3<short,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@F$01@glm@@SAHXZ ENDP			; glm::tvec3<short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@C$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<signed char,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 331  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@C$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@C$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<signed char,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 323  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@C$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@C$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@C$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<signed char,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	BYTE PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]

; 317  : 	}

	ret	0
??F?$tvec3@C$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@C$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@C$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<signed char,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	BYTE PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]

; 308  : 	}

	ret	0
??E?$tvec3@C$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$01@glm@@QAE@CCC@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
??0?$tvec3@C$01@glm@@QAE@CCC@Z PROC			; glm::tvec3<signed char,2>::tvec3<signed char,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@C$01@glm@@QAE@CCC@Z ENDP			; glm::tvec3<signed char,2>::tvec3<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$01@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec3@C$01@glm@@QAE@C@Z PROC			; glm::tvec3<signed char,2>::tvec3<signed char,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@C$01@glm@@QAE@C@Z ENDP			; glm::tvec3<signed char,2>::tvec3<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@C$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<signed char,2>::tvec3<signed char,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@C$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<signed char,2>::tvec3<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@C$01@glm@@QAE@XZ PROC			; glm::tvec3<signed char,2>::tvec3<signed char,2>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	WORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	BYTE PTR [ecx+2], 0
	ret	0
??0?$tvec3@C$01@glm@@QAE@XZ ENDP			; glm::tvec3<signed char,2>::tvec3<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$01@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@C$01@glm@@QBEABCH@Z PROC			; glm::tvec3<signed char,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@C$01@glm@@QBEABCH@Z ENDP			; glm::tvec3<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$01@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@C$01@glm@@QAEAACH@Z PROC			; glm::tvec3<signed char,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@C$01@glm@@QAEAACH@Z ENDP			; glm::tvec3<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@C$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@C$01@glm@@SAHXZ PROC			; glm::tvec3<signed char,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@C$01@glm@@SAHXZ ENDP			; glm::tvec3<signed char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@_K$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned __int64,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]

; 331  : 		--*this;

	add	DWORD PTR [ecx], -1
	movq	QWORD PTR [eax+16], xmm0
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	add	DWORD PTR [ecx+16], -1
	adc	DWORD PTR [ecx+20], -1

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@_K$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@_K$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned __int64,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR [ecx+16]

; 323  : 		++*this;

	add	DWORD PTR [ecx], 1
	movq	QWORD PTR [eax+16], xmm0
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], 0

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@_K$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@_K$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@_K$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned __int64,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	add	DWORD PTR [ecx+16], -1
	adc	DWORD PTR [ecx+20], -1

; 317  : 	}

	ret	0
??F?$tvec3@_K$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@_K$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@_K$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned __int64,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	add	DWORD PTR [ecx+16], 1
	adc	DWORD PTR [ecx+20], 0

; 308  : 	}

	ret	0
??E?$tvec3@_K$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$01@glm@@QAE@_K00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
??0?$tvec3@_K$01@glm@@QAE@_K00@Z PROC			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR [ecx+20], eax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	24					; 00000018H
??0?$tvec3@_K$01@glm@@QAE@_K00@Z ENDP			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$01@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec3@_K$01@glm@@QAE@_K@Z PROC			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], eax

; 65   : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], edx
	pop	ebp
	ret	8
??0?$tvec3@_K$01@glm@@QAE@_K@Z ENDP			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@_K$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@_K$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@_K$01@glm@@QAE@XZ PROC			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	DWORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	ret	0
??0?$tvec3@_K$01@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$01@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_K$01@glm@@QBEAB_KH@Z PROC			; glm::tvec3<unsigned __int64,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_K$01@glm@@QBEAB_KH@Z ENDP			; glm::tvec3<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$01@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@_K$01@glm@@QAEAA_KH@Z PROC			; glm::tvec3<unsigned __int64,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@_K$01@glm@@QAEAA_KH@Z ENDP			; glm::tvec3<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_K$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_K$01@glm@@SAHXZ PROC			; glm::tvec3<unsigned __int64,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@_K$01@glm@@SAHXZ ENDP			; glm::tvec3<unsigned __int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@I$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned int,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+8]

; 331  : 		--*this;

	dec	DWORD PTR [ecx]
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], edx

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@I$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@I$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned int,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movq	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+8]

; 323  : 		++*this;

	inc	DWORD PTR [ecx]
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]
	movq	QWORD PTR [eax], xmm0
	mov	DWORD PTR [eax+8], edx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@I$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@I$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@I$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned int,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	DWORD PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+8]

; 317  : 	}

	ret	0
??F?$tvec3@I$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@I$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@I$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned int,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	DWORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+8]

; 308  : 	}

	ret	0
??E?$tvec3@I$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$01@glm@@QAE@III@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@I$01@glm@@QAE@III@Z PROC			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@I$01@glm@@QAE@III@Z ENDP			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$01@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec3@I$01@glm@@QAE@I@Z PROC			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@I$01@glm@@QAE@I@Z ENDP			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@I$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@I$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@I$01@glm@@QAE@XZ PROC			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	DWORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$tvec3@I$01@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$01@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@I$01@glm@@QBEABIH@Z PROC			; glm::tvec3<unsigned int,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@I$01@glm@@QBEABIH@Z ENDP			; glm::tvec3<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$01@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@I$01@glm@@QAEAAIH@Z PROC			; glm::tvec3<unsigned int,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@I$01@glm@@QAEAAIH@Z ENDP			; glm::tvec3<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@I$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@I$01@glm@@SAHXZ PROC			; glm::tvec3<unsigned int,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@I$01@glm@@SAHXZ ENDP			; glm::tvec3<unsigned int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@G$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned short,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	ax, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], ax

; 331  : 		--*this;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax
	add	WORD PTR [ecx+2], ax
	add	WORD PTR [ecx+4], ax

; 332  : 		return Result;

	mov	eax, edx

; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@G$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@G$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned short,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	dx, WORD PTR [ecx+4]

; 323  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@G$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@G$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@G$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned short,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 314  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 315  : 		--this->z;

	add	WORD PTR [ecx+4], ax

; 316  : 		return *this;

	mov	eax, ecx

; 317  : 	}

	ret	0
??F?$tvec3@G$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@G$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@G$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned short,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	WORD PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]
	inc	WORD PTR [ecx+4]

; 308  : 	}

	ret	0
??E?$tvec3@G$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$01@glm@@QAE@GGG@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
_c$ = 16						; size = 2
??0?$tvec3@G$01@glm@@QAE@GGG@Z PROC			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	ax, WORD PTR _a$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+4], ax

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@G$01@glm@@QAE@GGG@Z ENDP			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$01@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec3@G$01@glm@@QAE@G@Z PROC			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax
	mov	WORD PTR [ecx+4], ax

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@G$01@glm@@QAE@G@Z ENDP			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@G$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@G$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@G$01@glm@@QAE@XZ PROC			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	WORD PTR [ecx+4], ax

; 40   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec3@G$01@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$01@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@G$01@glm@@QBEABGH@Z PROC			; glm::tvec3<unsigned short,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@G$01@glm@@QBEABGH@Z ENDP			; glm::tvec3<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$01@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@G$01@glm@@QAEAAGH@Z PROC			; glm::tvec3<unsigned short,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@G$01@glm@@QAEAAGH@Z ENDP			; glm::tvec3<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@G$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@G$01@glm@@SAHXZ PROC			; glm::tvec3<unsigned short,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@G$01@glm@@SAHXZ ENDP			; glm::tvec3<unsigned short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec3@E$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned char,2>::operator--, COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 331  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 332  : 		return Result;
; 333  : 	}

	pop	ebp
	ret	8
??F?$tvec3@E$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec3@E$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec3<unsigned char,2>::operator++, COMDAT
; _this$ = ecx

; 321  : 	{

	push	ebp
	mov	ebp, esp

; 322  : 		tvec3<T, P> Result(*this);

	mov	dx, WORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	WORD PTR [eax], dx
	mov	dl, BYTE PTR [ecx+2]

; 323  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 324  : 		return Result;
; 325  : 	}

	pop	ebp
	ret	8
??E?$tvec3@E$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec3<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??F?$tvec3@E$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec3@E$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned char,2>::operator--, COMDAT
; _this$ = ecx

; 313  : 		--this->x;

	dec	BYTE PTR [ecx]

; 314  : 		--this->y;
; 315  : 		--this->z;
; 316  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]

; 317  : 	}

	ret	0
??F?$tvec3@E$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??E?$tvec3@E$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec3@E$01@glm@@QAEAAU01@XZ PROC			; glm::tvec3<unsigned char,2>::operator++, COMDAT
; _this$ = ecx

; 304  : 		++this->x;

	inc	BYTE PTR [ecx]

; 305  : 		++this->y;
; 306  : 		++this->z;
; 307  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]

; 308  : 	}

	ret	0
??E?$tvec3@E$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec3<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$01@glm@@QAE@EEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
??0?$tvec3@E$01@glm@@QAE@EEE@Z PROC			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp

; 69   : 		: x(a), y(b), z(c)

	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al

; 70   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@E$01@glm@@QAE@EEE@Z ENDP			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$01@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec3@E$01@glm@@QAE@E@Z PROC			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>, COMDAT
; _this$ = ecx

; 65   : 	{}

	push	ebp
	mov	ebp, esp

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al

; 65   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec3@E$01@glm@@QAE@E@Z ENDP			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec3@E$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>, COMDAT
; _this$ = ecx

; 60   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec3@E$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec3@E$01@glm@@QAE@XZ PROC			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>, COMDAT
; _this$ = ecx

; 38   : 				: x(0), y(0), z(0)

	mov	WORD PTR [ecx], 0

; 40   : 		{}

	mov	eax, ecx
	mov	BYTE PTR [ecx+2], 0
	ret	0
??0?$tvec3@E$01@glm@@QAE@XZ ENDP			; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$01@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@E$01@glm@@QBEABEH@Z PROC			; glm::tvec3<unsigned char,2>::operator[], COMDAT
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp

; 152  : 		assert(i >= 0 && i < this->length());
; 153  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 154  : 	}

	pop	ebp
	ret	4
??A?$tvec3@E$01@glm@@QBEABEH@Z ENDP			; glm::tvec3<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$01@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec3@E$01@glm@@QAEAAEH@Z PROC			; glm::tvec3<unsigned char,2>::operator[], COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp

; 145  : 		assert(i >= 0 && i < this->length());
; 146  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 147  : 	}

	pop	ebp
	ret	4
??A?$tvec3@E$01@glm@@QAEAAEH@Z ENDP			; glm::tvec3<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@E$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@E$01@glm@@SAHXZ PROC			; glm::tvec3<unsigned char,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

	mov	eax, 3
	ret	0
?length@?$tvec3@E$01@glm@@SAHXZ ENDP			; glm::tvec3<unsigned char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@N$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<double,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 273  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@N$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@N$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<double,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 265  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@N$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@N$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<double,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@N$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@N$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<double,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@N$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QAE@NN@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@N$0A@@glm@@QAE@NN@Z PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	movsd	xmm0, QWORD PTR _s1$[ebp]

; 57   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _s2$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@N$0A@@glm@@QAE@NN@Z ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@N$0A@@glm@@QAE@N@Z PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 52   : 	{}

	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	pop	ebp
	ret	8
??0?$tvec2@N$0A@@glm@@QAE@N@Z ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<double,0>::tvec2<double,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@N$0A@@glm@@QAE@XZ PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	ret	0
??0?$tvec2@N$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$0A@@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@N$0A@@glm@@QBEABNH@Z PROC			; glm::tvec2<double,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@N$0A@@glm@@QBEABNH@Z ENDP			; glm::tvec2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$0A@@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@N$0A@@glm@@QAEAANH@Z PROC			; glm::tvec2<double,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@N$0A@@glm@@QAEAANH@Z ENDP			; glm::tvec2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@N$0A@@glm@@SAHXZ PROC			; glm::tvec2<double,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@N$0A@@glm@@SAHXZ ENDP			; glm::tvec2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@_J$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec2<__int64,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]

; 273  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	movups	XMMWORD PTR [eax], xmm0

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@_J$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec2<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@_J$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec2<__int64,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]

; 265  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	movups	XMMWORD PTR [eax], xmm0

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@_J$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec2<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@_J$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<__int64,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1

; 259  : 	}

	ret	0
??F?$tvec2@_J$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@_J$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<__int64,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0

; 251  : 	}

	ret	0
??E?$tvec2@_J$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$0A@@glm@@QAE@_J0@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@_J$0A@@glm@@QAE@_J0@Z PROC			; glm::tvec2<__int64,0>::tvec2<__int64,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s1$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s2$[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@_J$0A@@glm@@QAE@_J0@Z ENDP			; glm::tvec2<__int64,0>::tvec2<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$0A@@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@_J$0A@@glm@@QAE@_J@Z PROC			; glm::tvec2<__int64,0>::tvec2<__int64,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax

; 52   : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	pop	ebp
	ret	8
??0?$tvec2@_J$0A@@glm@@QAE@_J@Z ENDP			; glm::tvec2<__int64,0>::tvec2<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@_J$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<__int64,0>::tvec2<__int64,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@_J$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<__int64,0>::tvec2<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@_J$0A@@glm@@QAE@XZ PROC			; glm::tvec2<__int64,0>::tvec2<__int64,0>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	DWORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec2@_J$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<__int64,0>::tvec2<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$0A@@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_J$0A@@glm@@QBEAB_JH@Z PROC			; glm::tvec2<__int64,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_J$0A@@glm@@QBEAB_JH@Z ENDP			; glm::tvec2<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$0A@@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_J$0A@@glm@@QAEAA_JH@Z PROC			; glm::tvec2<__int64,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_J$0A@@glm@@QAEAA_JH@Z ENDP			; glm::tvec2<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_J$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_J$0A@@glm@@SAHXZ PROC			; glm::tvec2<__int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@_J$0A@@glm@@SAHXZ ENDP			; glm::tvec2<__int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@H$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<int,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@H$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@H$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<int,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@H$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@H$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<int,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]

; 259  : 	}

	ret	0
??F?$tvec2@H$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@H$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<int,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]

; 251  : 	}

	ret	0
??E?$tvec2@H$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QAE@HH@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@H$0A@@glm@@QAE@HH@Z PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@H$0A@@glm@@QAE@HH@Z ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@H$0A@@glm@@QAE@H@Z PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@H$0A@@glm@@QAE@H@Z ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@H$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<int,0>::tvec2<int,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@H$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@H$0A@@glm@@QAE@XZ PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	DWORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@H$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$0A@@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@H$0A@@glm@@QBEABHH@Z PROC			; glm::tvec2<int,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@H$0A@@glm@@QBEABHH@Z ENDP			; glm::tvec2<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$0A@@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@H$0A@@glm@@QAEAAHH@Z PROC			; glm::tvec2<int,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@H$0A@@glm@@QAEAAHH@Z ENDP			; glm::tvec2<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@H$0A@@glm@@SAHXZ PROC			; glm::tvec2<int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@H$0A@@glm@@SAHXZ ENDP			; glm::tvec2<int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@C$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<signed char,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 273  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@C$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@C$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<signed char,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 265  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@C$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@C$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<signed char,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	BYTE PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]

; 259  : 	}

	ret	0
??F?$tvec2@C$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@C$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<signed char,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	BYTE PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]

; 251  : 	}

	ret	0
??E?$tvec2@C$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$0A@@glm@@QAE@CC@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 1
_s2$ = 12						; size = 1
??0?$tvec2@C$0A@@glm@@QAE@CC@Z PROC			; glm::tvec2<signed char,0>::tvec2<signed char,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	al, BYTE PTR _s1$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _s2$[ebp]
	mov	BYTE PTR [ecx+1], al

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@C$0A@@glm@@QAE@CC@Z ENDP			; glm::tvec2<signed char,0>::tvec2<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$0A@@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec2@C$0A@@glm@@QAE@C@Z PROC			; glm::tvec2<signed char,0>::tvec2<signed char,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@C$0A@@glm@@QAE@C@Z ENDP			; glm::tvec2<signed char,0>::tvec2<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@C$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<signed char,0>::tvec2<signed char,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@C$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<signed char,0>::tvec2<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@C$0A@@glm@@QAE@XZ PROC			; glm::tvec2<signed char,0>::tvec2<signed char,0>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	WORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec2@C$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<signed char,0>::tvec2<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$0A@@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@C$0A@@glm@@QBEABCH@Z PROC			; glm::tvec2<signed char,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@C$0A@@glm@@QBEABCH@Z ENDP			; glm::tvec2<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$0A@@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@C$0A@@glm@@QAEAACH@Z PROC			; glm::tvec2<signed char,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@C$0A@@glm@@QAEAACH@Z ENDP			; glm::tvec2<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@C$0A@@glm@@SAHXZ PROC			; glm::tvec2<signed char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@C$0A@@glm@@SAHXZ ENDP			; glm::tvec2<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@_K$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec2<unsigned __int64,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]

; 273  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	movups	XMMWORD PTR [eax], xmm0

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@_K$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec2<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@_K$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec2<unsigned __int64,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]

; 265  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	movups	XMMWORD PTR [eax], xmm0

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@_K$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec2<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@_K$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned __int64,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1

; 259  : 	}

	ret	0
??F?$tvec2@_K$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@_K$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned __int64,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0

; 251  : 	}

	ret	0
??E?$tvec2@_K$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$0A@@glm@@QAE@_K0@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@_K$0A@@glm@@QAE@_K0@Z PROC			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s1$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s2$[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@_K$0A@@glm@@QAE@_K0@Z ENDP			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$0A@@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@_K$0A@@glm@@QAE@_K@Z PROC			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax

; 52   : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	pop	ebp
	ret	8
??0?$tvec2@_K$0A@@glm@@QAE@_K@Z ENDP			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@_K$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@_K$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@_K$0A@@glm@@QAE@XZ PROC			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	DWORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec2@_K$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$0A@@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_K$0A@@glm@@QBEAB_KH@Z PROC			; glm::tvec2<unsigned __int64,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_K$0A@@glm@@QBEAB_KH@Z ENDP			; glm::tvec2<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$0A@@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_K$0A@@glm@@QAEAA_KH@Z PROC			; glm::tvec2<unsigned __int64,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_K$0A@@glm@@QAEAA_KH@Z ENDP			; glm::tvec2<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_K$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_K$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned __int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@_K$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned __int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@E$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned char,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 273  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@E$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@E$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned char,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 265  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@E$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@E$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned char,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	BYTE PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]

; 259  : 	}

	ret	0
??F?$tvec2@E$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@E$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned char,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	BYTE PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]

; 251  : 	}

	ret	0
??E?$tvec2@E$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$0A@@glm@@QAE@EE@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 1
_s2$ = 12						; size = 1
??0?$tvec2@E$0A@@glm@@QAE@EE@Z PROC			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	al, BYTE PTR _s1$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _s2$[ebp]
	mov	BYTE PTR [ecx+1], al

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@E$0A@@glm@@QAE@EE@Z ENDP			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$0A@@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec2@E$0A@@glm@@QAE@E@Z PROC			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@E$0A@@glm@@QAE@E@Z ENDP			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@E$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@E$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@E$0A@@glm@@QAE@XZ PROC			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	WORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec2@E$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$0A@@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@E$0A@@glm@@QBEABEH@Z PROC			; glm::tvec2<unsigned char,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@E$0A@@glm@@QBEABEH@Z ENDP			; glm::tvec2<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$0A@@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@E$0A@@glm@@QAEAAEH@Z PROC			; glm::tvec2<unsigned char,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@E$0A@@glm@@QAEAAEH@Z ENDP			; glm::tvec2<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@E$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@E$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@N$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<double,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 273  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@N$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@N$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<double,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 265  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@N$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@N$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<double,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@N$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<double,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$00@glm@@QAE@NN@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@N$00@glm@@QAE@NN@Z PROC			; glm::tvec2<double,1>::tvec2<double,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	movsd	xmm0, QWORD PTR _s1$[ebp]

; 57   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _s2$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@N$00@glm@@QAE@NN@Z ENDP			; glm::tvec2<double,1>::tvec2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@N$00@glm@@QAE@N@Z PROC			; glm::tvec2<double,1>::tvec2<double,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 52   : 	{}

	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	pop	ebp
	ret	8
??0?$tvec2@N$00@glm@@QAE@N@Z ENDP			; glm::tvec2<double,1>::tvec2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<double,1>::tvec2<double,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<double,1>::tvec2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@N$00@glm@@QAE@XZ PROC			; glm::tvec2<double,1>::tvec2<double,1>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	ret	0
??0?$tvec2@N$00@glm@@QAE@XZ ENDP			; glm::tvec2<double,1>::tvec2<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$00@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@N$00@glm@@QBEABNH@Z PROC			; glm::tvec2<double,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@N$00@glm@@QBEABNH@Z ENDP			; glm::tvec2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$00@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@N$00@glm@@QAEAANH@Z PROC			; glm::tvec2<double,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@N$00@glm@@QAEAANH@Z ENDP			; glm::tvec2<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@N$00@glm@@SAHXZ PROC			; glm::tvec2<double,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@N$00@glm@@SAHXZ ENDP			; glm::tvec2<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@M$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<float,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);
; 273  : 		--*this;

	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [esi], eax

; 274  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0

; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@M$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@M$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<float,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);
; 265  : 		++*this;

	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [esi], eax

; 266  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0

; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@M$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@M$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<float,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+4], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@M$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<float,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+4], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$00@glm@@QAE@MM@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@M$00@glm@@QAE@MM@Z PROC			; glm::tvec2<float,1>::tvec2<float,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	movss	xmm0, DWORD PTR _s1$[ebp]

; 57   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _s2$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??0?$tvec2@M$00@glm@@QAE@MM@Z ENDP			; glm::tvec2<float,1>::tvec2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@M$00@glm@@QAE@M@Z PROC			; glm::tvec2<float,1>::tvec2<float,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	movss	xmm0, DWORD PTR _scalar$[ebp]

; 52   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	4
??0?$tvec2@M$00@glm@@QAE@M@Z ENDP			; glm::tvec2<float,1>::tvec2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<float,1>::tvec2<float,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<float,1>::tvec2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@M$00@glm@@QAE@XZ PROC			; glm::tvec2<float,1>::tvec2<float,1>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	DWORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@M$00@glm@@QAE@XZ ENDP			; glm::tvec2<float,1>::tvec2<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$00@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@M$00@glm@@QBEABMH@Z PROC			; glm::tvec2<float,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@M$00@glm@@QBEABMH@Z ENDP			; glm::tvec2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$00@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@M$00@glm@@QAEAAMH@Z PROC			; glm::tvec2<float,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@M$00@glm@@QAEAAMH@Z ENDP			; glm::tvec2<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$00@glm@@SAHXZ PROC			; glm::tvec2<float,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@M$00@glm@@SAHXZ ENDP			; glm::tvec2<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@_J$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<__int64,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]

; 273  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	movups	XMMWORD PTR [eax], xmm0

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@_J$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@_J$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<__int64,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]

; 265  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	movups	XMMWORD PTR [eax], xmm0

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@_J$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@_J$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<__int64,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1

; 259  : 	}

	ret	0
??F?$tvec2@_J$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@_J$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<__int64,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0

; 251  : 	}

	ret	0
??E?$tvec2@_J$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$00@glm@@QAE@_J0@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@_J$00@glm@@QAE@_J0@Z PROC			; glm::tvec2<__int64,1>::tvec2<__int64,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s1$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s2$[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@_J$00@glm@@QAE@_J0@Z ENDP			; glm::tvec2<__int64,1>::tvec2<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$00@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@_J$00@glm@@QAE@_J@Z PROC			; glm::tvec2<__int64,1>::tvec2<__int64,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax

; 52   : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	pop	ebp
	ret	8
??0?$tvec2@_J$00@glm@@QAE@_J@Z ENDP			; glm::tvec2<__int64,1>::tvec2<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@_J$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<__int64,1>::tvec2<__int64,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@_J$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<__int64,1>::tvec2<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@_J$00@glm@@QAE@XZ PROC			; glm::tvec2<__int64,1>::tvec2<__int64,1>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	DWORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec2@_J$00@glm@@QAE@XZ ENDP			; glm::tvec2<__int64,1>::tvec2<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$00@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_J$00@glm@@QBEAB_JH@Z PROC			; glm::tvec2<__int64,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_J$00@glm@@QBEAB_JH@Z ENDP			; glm::tvec2<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$00@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_J$00@glm@@QAEAA_JH@Z PROC			; glm::tvec2<__int64,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_J$00@glm@@QAEAA_JH@Z ENDP			; glm::tvec2<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_J$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_J$00@glm@@SAHXZ PROC			; glm::tvec2<__int64,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@_J$00@glm@@SAHXZ ENDP			; glm::tvec2<__int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@H$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<int,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@H$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@H$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<int,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@H$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@H$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<int,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]

; 259  : 	}

	ret	0
??F?$tvec2@H$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@H$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<int,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]

; 251  : 	}

	ret	0
??E?$tvec2@H$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$00@glm@@QAE@HH@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@H$00@glm@@QAE@HH@Z PROC			; glm::tvec2<int,1>::tvec2<int,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@H$00@glm@@QAE@HH@Z ENDP			; glm::tvec2<int,1>::tvec2<int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$00@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@H$00@glm@@QAE@H@Z PROC			; glm::tvec2<int,1>::tvec2<int,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@H$00@glm@@QAE@H@Z ENDP			; glm::tvec2<int,1>::tvec2<int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@H$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<int,1>::tvec2<int,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@H$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<int,1>::tvec2<int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@H$00@glm@@QAE@XZ PROC			; glm::tvec2<int,1>::tvec2<int,1>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	DWORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@H$00@glm@@QAE@XZ ENDP			; glm::tvec2<int,1>::tvec2<int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$00@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@H$00@glm@@QBEABHH@Z PROC			; glm::tvec2<int,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@H$00@glm@@QBEABHH@Z ENDP			; glm::tvec2<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$00@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@H$00@glm@@QAEAAHH@Z PROC			; glm::tvec2<int,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@H$00@glm@@QAEAAHH@Z ENDP			; glm::tvec2<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@H$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@H$00@glm@@SAHXZ PROC			; glm::tvec2<int,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@H$00@glm@@SAHXZ ENDP			; glm::tvec2<int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@F$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<short,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	WORD PTR [ecx]
	dec	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@F$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@F$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<short,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@F$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@F$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<short,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	WORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]

; 259  : 	}

	ret	0
??F?$tvec2@F$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@F$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<short,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	WORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]

; 251  : 	}

	ret	0
??E?$tvec2@F$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$00@glm@@QAE@FF@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 2
_s2$ = 12						; size = 2
??0?$tvec2@F$00@glm@@QAE@FF@Z PROC			; glm::tvec2<short,1>::tvec2<short,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	ax, WORD PTR _s1$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _s2$[ebp]
	mov	WORD PTR [ecx+2], ax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@F$00@glm@@QAE@FF@Z ENDP			; glm::tvec2<short,1>::tvec2<short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$00@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec2@F$00@glm@@QAE@F@Z PROC			; glm::tvec2<short,1>::tvec2<short,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@F$00@glm@@QAE@F@Z ENDP			; glm::tvec2<short,1>::tvec2<short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@F$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<short,1>::tvec2<short,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@F$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<short,1>::tvec2<short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@F$00@glm@@QAE@XZ PROC			; glm::tvec2<short,1>::tvec2<short,1>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax

; 27   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec2@F$00@glm@@QAE@XZ ENDP			; glm::tvec2<short,1>::tvec2<short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$00@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@F$00@glm@@QBEABFH@Z PROC			; glm::tvec2<short,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@F$00@glm@@QBEABFH@Z ENDP			; glm::tvec2<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$00@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@F$00@glm@@QAEAAFH@Z PROC			; glm::tvec2<short,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@F$00@glm@@QAEAAFH@Z ENDP			; glm::tvec2<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@F$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@F$00@glm@@SAHXZ PROC			; glm::tvec2<short,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@F$00@glm@@SAHXZ ENDP			; glm::tvec2<short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@C$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<signed char,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 273  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@C$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@C$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<signed char,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 265  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@C$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@C$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<signed char,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	BYTE PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]

; 259  : 	}

	ret	0
??F?$tvec2@C$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@C$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<signed char,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	BYTE PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]

; 251  : 	}

	ret	0
??E?$tvec2@C$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$00@glm@@QAE@CC@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 1
_s2$ = 12						; size = 1
??0?$tvec2@C$00@glm@@QAE@CC@Z PROC			; glm::tvec2<signed char,1>::tvec2<signed char,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	al, BYTE PTR _s1$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _s2$[ebp]
	mov	BYTE PTR [ecx+1], al

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@C$00@glm@@QAE@CC@Z ENDP			; glm::tvec2<signed char,1>::tvec2<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$00@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec2@C$00@glm@@QAE@C@Z PROC			; glm::tvec2<signed char,1>::tvec2<signed char,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@C$00@glm@@QAE@C@Z ENDP			; glm::tvec2<signed char,1>::tvec2<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@C$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<signed char,1>::tvec2<signed char,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@C$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<signed char,1>::tvec2<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@C$00@glm@@QAE@XZ PROC			; glm::tvec2<signed char,1>::tvec2<signed char,1>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	WORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec2@C$00@glm@@QAE@XZ ENDP			; glm::tvec2<signed char,1>::tvec2<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$00@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@C$00@glm@@QBEABCH@Z PROC			; glm::tvec2<signed char,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@C$00@glm@@QBEABCH@Z ENDP			; glm::tvec2<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$00@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@C$00@glm@@QAEAACH@Z PROC			; glm::tvec2<signed char,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@C$00@glm@@QAEAACH@Z ENDP			; glm::tvec2<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@C$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@C$00@glm@@SAHXZ PROC			; glm::tvec2<signed char,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@C$00@glm@@SAHXZ ENDP			; glm::tvec2<signed char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@_K$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned __int64,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]

; 273  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	movups	XMMWORD PTR [eax], xmm0

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@_K$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@_K$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned __int64,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]

; 265  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	movups	XMMWORD PTR [eax], xmm0

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@_K$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@_K$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned __int64,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1

; 259  : 	}

	ret	0
??F?$tvec2@_K$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@_K$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned __int64,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0

; 251  : 	}

	ret	0
??E?$tvec2@_K$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$00@glm@@QAE@_K0@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@_K$00@glm@@QAE@_K0@Z PROC			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s1$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s2$[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@_K$00@glm@@QAE@_K0@Z ENDP			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$00@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@_K$00@glm@@QAE@_K@Z PROC			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax

; 52   : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	pop	ebp
	ret	8
??0?$tvec2@_K$00@glm@@QAE@_K@Z ENDP			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@_K$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@_K$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@_K$00@glm@@QAE@XZ PROC			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	DWORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec2@_K$00@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$00@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_K$00@glm@@QBEAB_KH@Z PROC			; glm::tvec2<unsigned __int64,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_K$00@glm@@QBEAB_KH@Z ENDP			; glm::tvec2<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$00@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_K$00@glm@@QAEAA_KH@Z PROC			; glm::tvec2<unsigned __int64,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_K$00@glm@@QAEAA_KH@Z ENDP			; glm::tvec2<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_K$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_K$00@glm@@SAHXZ PROC			; glm::tvec2<unsigned __int64,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@_K$00@glm@@SAHXZ ENDP			; glm::tvec2<unsigned __int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@I$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned int,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@I$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@I$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned int,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@I$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@I$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned int,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]

; 259  : 	}

	ret	0
??F?$tvec2@I$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@I$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned int,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]

; 251  : 	}

	ret	0
??E?$tvec2@I$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$00@glm@@QAE@II@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@I$00@glm@@QAE@II@Z PROC			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@I$00@glm@@QAE@II@Z ENDP			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$00@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@I$00@glm@@QAE@I@Z PROC			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@I$00@glm@@QAE@I@Z ENDP			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@I$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@I$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@I$00@glm@@QAE@XZ PROC			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	DWORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@I$00@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$00@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@I$00@glm@@QBEABIH@Z PROC			; glm::tvec2<unsigned int,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@I$00@glm@@QBEABIH@Z ENDP			; glm::tvec2<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$00@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@I$00@glm@@QAEAAIH@Z PROC			; glm::tvec2<unsigned int,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@I$00@glm@@QAEAAIH@Z ENDP			; glm::tvec2<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@I$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@I$00@glm@@SAHXZ PROC			; glm::tvec2<unsigned int,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@I$00@glm@@SAHXZ ENDP			; glm::tvec2<unsigned int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@G$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned short,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 273  : 		--*this;

	mov	edx, 65535				; 0000ffffH
	add	WORD PTR [ecx], dx
	add	WORD PTR [ecx+2], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@G$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@G$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned short,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@G$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@G$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned short,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 257  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 258  : 		return *this;

	mov	eax, ecx

; 259  : 	}

	ret	0
??F?$tvec2@G$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@G$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned short,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	WORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]

; 251  : 	}

	ret	0
??E?$tvec2@G$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$00@glm@@QAE@GG@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 2
_s2$ = 12						; size = 2
??0?$tvec2@G$00@glm@@QAE@GG@Z PROC			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	ax, WORD PTR _s1$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _s2$[ebp]
	mov	WORD PTR [ecx+2], ax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@G$00@glm@@QAE@GG@Z ENDP			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$00@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec2@G$00@glm@@QAE@G@Z PROC			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@G$00@glm@@QAE@G@Z ENDP			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@G$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@G$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@G$00@glm@@QAE@XZ PROC			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax

; 27   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec2@G$00@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$00@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@G$00@glm@@QBEABGH@Z PROC			; glm::tvec2<unsigned short,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@G$00@glm@@QBEABGH@Z ENDP			; glm::tvec2<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$00@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@G$00@glm@@QAEAAGH@Z PROC			; glm::tvec2<unsigned short,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@G$00@glm@@QAEAAGH@Z ENDP			; glm::tvec2<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@G$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@G$00@glm@@SAHXZ PROC			; glm::tvec2<unsigned short,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@G$00@glm@@SAHXZ ENDP			; glm::tvec2<unsigned short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@E$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned char,1>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 273  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@E$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@E$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned char,1>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 265  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@E$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@E$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned char,1>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	BYTE PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]

; 259  : 	}

	ret	0
??F?$tvec2@E$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@E$00@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned char,1>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	BYTE PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]

; 251  : 	}

	ret	0
??E?$tvec2@E$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$00@glm@@QAE@EE@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 1
_s2$ = 12						; size = 1
??0?$tvec2@E$00@glm@@QAE@EE@Z PROC			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	al, BYTE PTR _s1$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _s2$[ebp]
	mov	BYTE PTR [ecx+1], al

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@E$00@glm@@QAE@EE@Z ENDP			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$00@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec2@E$00@glm@@QAE@E@Z PROC			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@E$00@glm@@QAE@E@Z ENDP			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@E$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@E$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@E$00@glm@@QAE@XZ PROC			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	WORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec2@E$00@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$00@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@E$00@glm@@QBEABEH@Z PROC			; glm::tvec2<unsigned char,1>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@E$00@glm@@QBEABEH@Z ENDP			; glm::tvec2<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$00@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@E$00@glm@@QAEAAEH@Z PROC			; glm::tvec2<unsigned char,1>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@E$00@glm@@QAEAAEH@Z ENDP			; glm::tvec2<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@E$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@E$00@glm@@SAHXZ PROC			; glm::tvec2<unsigned char,1>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@E$00@glm@@SAHXZ ENDP			; glm::tvec2<unsigned char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@N$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<double,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 273  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@N$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@N$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<double,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 265  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@N$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@N$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<double,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	subpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@N$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<double,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	addpd	xmm0, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	XMMWORD PTR [ecx], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$01@glm@@QAE@NN@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@N$01@glm@@QAE@NN@Z PROC			; glm::tvec2<double,2>::tvec2<double,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	movsd	xmm0, QWORD PTR _s1$[ebp]

; 57   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	movsd	xmm0, QWORD PTR _s2$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@N$01@glm@@QAE@NN@Z ENDP			; glm::tvec2<double,2>::tvec2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@N$01@glm@@QAE@N@Z PROC			; glm::tvec2<double,2>::tvec2<double,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 52   : 	{}

	mov	eax, ecx
	unpcklpd xmm0, xmm0
	movups	XMMWORD PTR [ecx], xmm0
	pop	ebp
	ret	8
??0?$tvec2@N$01@glm@@QAE@N@Z ENDP			; glm::tvec2<double,2>::tvec2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<double,2>::tvec2<double,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<double,2>::tvec2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@N$01@glm@@QAE@XZ PROC			; glm::tvec2<double,2>::tvec2<double,2>, COMDAT
; _this$ = ecx

; 27   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	ret	0
??0?$tvec2@N$01@glm@@QAE@XZ ENDP			; glm::tvec2<double,2>::tvec2<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$01@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@N$01@glm@@QBEABNH@Z PROC			; glm::tvec2<double,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@N$01@glm@@QBEABNH@Z ENDP			; glm::tvec2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$01@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@N$01@glm@@QAEAANH@Z PROC			; glm::tvec2<double,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@N$01@glm@@QAEAANH@Z ENDP			; glm::tvec2<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@N$01@glm@@SAHXZ PROC			; glm::tvec2<double,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@N$01@glm@@SAHXZ ENDP			; glm::tvec2<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@M$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<float,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);
; 273  : 		--*this;

	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [esi], eax

; 274  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0

; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@M$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@M$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<float,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);
; 265  : 		++*this;

	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [esi], eax

; 266  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0

; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@M$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@M$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<float,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+4], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@M$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<float,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+4], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$01@glm@@QAE@MM@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@M$01@glm@@QAE@MM@Z PROC			; glm::tvec2<float,2>::tvec2<float,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	movss	xmm0, DWORD PTR _s1$[ebp]

; 57   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _s2$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??0?$tvec2@M$01@glm@@QAE@MM@Z ENDP			; glm::tvec2<float,2>::tvec2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@M$01@glm@@QAE@M@Z PROC			; glm::tvec2<float,2>::tvec2<float,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	movss	xmm0, DWORD PTR _scalar$[ebp]

; 52   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	4
??0?$tvec2@M$01@glm@@QAE@M@Z ENDP			; glm::tvec2<float,2>::tvec2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<float,2>::tvec2<float,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<float,2>::tvec2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@M$01@glm@@QAE@XZ PROC			; glm::tvec2<float,2>::tvec2<float,2>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	DWORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@M$01@glm@@QAE@XZ ENDP			; glm::tvec2<float,2>::tvec2<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$01@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@M$01@glm@@QBEABMH@Z PROC			; glm::tvec2<float,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@M$01@glm@@QBEABMH@Z ENDP			; glm::tvec2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$01@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@M$01@glm@@QAEAAMH@Z PROC			; glm::tvec2<float,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@M$01@glm@@QAEAAMH@Z ENDP			; glm::tvec2<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$01@glm@@SAHXZ PROC			; glm::tvec2<float,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@M$01@glm@@SAHXZ ENDP			; glm::tvec2<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@_J$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<__int64,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]

; 273  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	movups	XMMWORD PTR [eax], xmm0

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@_J$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@_J$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<__int64,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]

; 265  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	movups	XMMWORD PTR [eax], xmm0

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@_J$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_J$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@_J$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<__int64,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1

; 259  : 	}

	ret	0
??F?$tvec2@_J$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_J$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@_J$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<__int64,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0

; 251  : 	}

	ret	0
??E?$tvec2@_J$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$01@glm@@QAE@_J0@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@_J$01@glm@@QAE@_J0@Z PROC			; glm::tvec2<__int64,2>::tvec2<__int64,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s1$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s2$[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@_J$01@glm@@QAE@_J0@Z ENDP			; glm::tvec2<__int64,2>::tvec2<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$01@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@_J$01@glm@@QAE@_J@Z PROC			; glm::tvec2<__int64,2>::tvec2<__int64,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax

; 52   : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	pop	ebp
	ret	8
??0?$tvec2@_J$01@glm@@QAE@_J@Z ENDP			; glm::tvec2<__int64,2>::tvec2<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@_J$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<__int64,2>::tvec2<__int64,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@_J$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<__int64,2>::tvec2<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@_J$01@glm@@QAE@XZ PROC			; glm::tvec2<__int64,2>::tvec2<__int64,2>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	DWORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec2@_J$01@glm@@QAE@XZ ENDP			; glm::tvec2<__int64,2>::tvec2<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$01@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_J$01@glm@@QBEAB_JH@Z PROC			; glm::tvec2<__int64,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_J$01@glm@@QBEAB_JH@Z ENDP			; glm::tvec2<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$01@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_J$01@glm@@QAEAA_JH@Z PROC			; glm::tvec2<__int64,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_J$01@glm@@QAEAA_JH@Z ENDP			; glm::tvec2<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_J$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_J$01@glm@@SAHXZ PROC			; glm::tvec2<__int64,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@_J$01@glm@@SAHXZ ENDP			; glm::tvec2<__int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@H$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<int,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@H$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@H$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<int,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@H$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@H$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@H$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<int,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]

; 259  : 	}

	ret	0
??F?$tvec2@H$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@H$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@H$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<int,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]

; 251  : 	}

	ret	0
??E?$tvec2@H$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$01@glm@@QAE@HH@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@H$01@glm@@QAE@HH@Z PROC			; glm::tvec2<int,2>::tvec2<int,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@H$01@glm@@QAE@HH@Z ENDP			; glm::tvec2<int,2>::tvec2<int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$01@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@H$01@glm@@QAE@H@Z PROC			; glm::tvec2<int,2>::tvec2<int,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@H$01@glm@@QAE@H@Z ENDP			; glm::tvec2<int,2>::tvec2<int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@H$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<int,2>::tvec2<int,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@H$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<int,2>::tvec2<int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@H$01@glm@@QAE@XZ PROC			; glm::tvec2<int,2>::tvec2<int,2>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	DWORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@H$01@glm@@QAE@XZ ENDP			; glm::tvec2<int,2>::tvec2<int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$01@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@H$01@glm@@QBEABHH@Z PROC			; glm::tvec2<int,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@H$01@glm@@QBEABHH@Z ENDP			; glm::tvec2<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$01@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@H$01@glm@@QAEAAHH@Z PROC			; glm::tvec2<int,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@H$01@glm@@QAEAAHH@Z ENDP			; glm::tvec2<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@H$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@H$01@glm@@SAHXZ PROC			; glm::tvec2<int,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@H$01@glm@@SAHXZ ENDP			; glm::tvec2<int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@F$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<short,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	WORD PTR [ecx]
	dec	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@F$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@F$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<short,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@F$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@F$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<short,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	WORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]

; 259  : 	}

	ret	0
??F?$tvec2@F$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@F$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<short,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	WORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]

; 251  : 	}

	ret	0
??E?$tvec2@F$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$01@glm@@QAE@FF@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 2
_s2$ = 12						; size = 2
??0?$tvec2@F$01@glm@@QAE@FF@Z PROC			; glm::tvec2<short,2>::tvec2<short,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	ax, WORD PTR _s1$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _s2$[ebp]
	mov	WORD PTR [ecx+2], ax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@F$01@glm@@QAE@FF@Z ENDP			; glm::tvec2<short,2>::tvec2<short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$01@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec2@F$01@glm@@QAE@F@Z PROC			; glm::tvec2<short,2>::tvec2<short,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@F$01@glm@@QAE@F@Z ENDP			; glm::tvec2<short,2>::tvec2<short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@F$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<short,2>::tvec2<short,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@F$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<short,2>::tvec2<short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@F$01@glm@@QAE@XZ PROC			; glm::tvec2<short,2>::tvec2<short,2>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax

; 27   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec2@F$01@glm@@QAE@XZ ENDP			; glm::tvec2<short,2>::tvec2<short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$01@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@F$01@glm@@QBEABFH@Z PROC			; glm::tvec2<short,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@F$01@glm@@QBEABFH@Z ENDP			; glm::tvec2<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$01@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@F$01@glm@@QAEAAFH@Z PROC			; glm::tvec2<short,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@F$01@glm@@QAEAAFH@Z ENDP			; glm::tvec2<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@F$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@F$01@glm@@SAHXZ PROC			; glm::tvec2<short,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@F$01@glm@@SAHXZ ENDP			; glm::tvec2<short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@C$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<signed char,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 273  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@C$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@C$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<signed char,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 265  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@C$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@C$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@C$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<signed char,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	BYTE PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]

; 259  : 	}

	ret	0
??F?$tvec2@C$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@C$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@C$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<signed char,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	BYTE PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]

; 251  : 	}

	ret	0
??E?$tvec2@C$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$01@glm@@QAE@CC@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 1
_s2$ = 12						; size = 1
??0?$tvec2@C$01@glm@@QAE@CC@Z PROC			; glm::tvec2<signed char,2>::tvec2<signed char,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	al, BYTE PTR _s1$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _s2$[ebp]
	mov	BYTE PTR [ecx+1], al

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@C$01@glm@@QAE@CC@Z ENDP			; glm::tvec2<signed char,2>::tvec2<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$01@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec2@C$01@glm@@QAE@C@Z PROC			; glm::tvec2<signed char,2>::tvec2<signed char,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@C$01@glm@@QAE@C@Z ENDP			; glm::tvec2<signed char,2>::tvec2<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@C$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<signed char,2>::tvec2<signed char,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@C$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<signed char,2>::tvec2<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@C$01@glm@@QAE@XZ PROC			; glm::tvec2<signed char,2>::tvec2<signed char,2>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	WORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec2@C$01@glm@@QAE@XZ ENDP			; glm::tvec2<signed char,2>::tvec2<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$01@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@C$01@glm@@QBEABCH@Z PROC			; glm::tvec2<signed char,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@C$01@glm@@QBEABCH@Z ENDP			; glm::tvec2<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$01@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@C$01@glm@@QAEAACH@Z PROC			; glm::tvec2<signed char,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@C$01@glm@@QAEAACH@Z ENDP			; glm::tvec2<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@C$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@C$01@glm@@SAHXZ PROC			; glm::tvec2<signed char,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@C$01@glm@@SAHXZ ENDP			; glm::tvec2<signed char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@_K$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned __int64,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]

; 273  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1
	movups	XMMWORD PTR [eax], xmm0

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@_K$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@_K$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned __int64,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]

; 265  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0
	movups	XMMWORD PTR [eax], xmm0

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@_K$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@_K$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@_K$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned __int64,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1
	add	DWORD PTR [ecx+8], -1
	adc	DWORD PTR [ecx+12], -1

; 259  : 	}

	ret	0
??F?$tvec2@_K$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@_K$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@_K$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned __int64,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0
	add	DWORD PTR [ecx+8], 1
	adc	DWORD PTR [ecx+12], 0

; 251  : 	}

	ret	0
??E?$tvec2@_K$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$01@glm@@QAE@_K0@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 8
_s2$ = 16						; size = 8
??0?$tvec2@_K$01@glm@@QAE@_K0@Z PROC			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s1$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _s2$[ebp+4]
	mov	DWORD PTR [ecx+12], eax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec2@_K$01@glm@@QAE@_K0@Z ENDP			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$01@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec2@_K$01@glm@@QAE@_K@Z PROC			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	edx, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+12], eax

; 52   : 	{}

	mov	eax, ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], edx
	pop	ebp
	ret	8
??0?$tvec2@_K$01@glm@@QAE@_K@Z ENDP			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@_K$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@_K$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@_K$01@glm@@QAE@XZ PROC			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	DWORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec2@_K$01@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$01@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_K$01@glm@@QBEAB_KH@Z PROC			; glm::tvec2<unsigned __int64,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_K$01@glm@@QBEAB_KH@Z ENDP			; glm::tvec2<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$01@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@_K$01@glm@@QAEAA_KH@Z PROC			; glm::tvec2<unsigned __int64,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@_K$01@glm@@QAEAA_KH@Z ENDP			; glm::tvec2<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_K$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_K$01@glm@@SAHXZ PROC			; glm::tvec2<unsigned __int64,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@_K$01@glm@@SAHXZ ENDP			; glm::tvec2<unsigned __int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@I$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned int,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@I$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@I$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned int,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@I$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@I$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned int,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]

; 259  : 	}

	ret	0
??F?$tvec2@I$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@I$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned int,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]

; 251  : 	}

	ret	0
??E?$tvec2@I$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$01@glm@@QAE@II@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@I$01@glm@@QAE@II@Z PROC			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@I$01@glm@@QAE@II@Z ENDP			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$01@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@I$01@glm@@QAE@I@Z PROC			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@I$01@glm@@QAE@I@Z ENDP			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@I$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@I$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@I$01@glm@@QAE@XZ PROC			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	DWORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@I$01@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$01@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@I$01@glm@@QBEABIH@Z PROC			; glm::tvec2<unsigned int,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@I$01@glm@@QBEABIH@Z ENDP			; glm::tvec2<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$01@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@I$01@glm@@QAEAAIH@Z PROC			; glm::tvec2<unsigned int,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@I$01@glm@@QAEAAIH@Z ENDP			; glm::tvec2<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@I$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@I$01@glm@@SAHXZ PROC			; glm::tvec2<unsigned int,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@I$01@glm@@SAHXZ ENDP			; glm::tvec2<unsigned int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@G$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned short,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 273  : 		--*this;

	mov	edx, 65535				; 0000ffffH
	add	WORD PTR [ecx], dx
	add	WORD PTR [ecx+2], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@G$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@G$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned short,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@G$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@G$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned short,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 257  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 258  : 		return *this;

	mov	eax, ecx

; 259  : 	}

	ret	0
??F?$tvec2@G$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@G$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned short,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	WORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]

; 251  : 	}

	ret	0
??E?$tvec2@G$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$01@glm@@QAE@GG@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 2
_s2$ = 12						; size = 2
??0?$tvec2@G$01@glm@@QAE@GG@Z PROC			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	ax, WORD PTR _s1$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _s2$[ebp]
	mov	WORD PTR [ecx+2], ax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@G$01@glm@@QAE@GG@Z ENDP			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$01@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec2@G$01@glm@@QAE@G@Z PROC			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@G$01@glm@@QAE@G@Z ENDP			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@G$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@G$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@G$01@glm@@QAE@XZ PROC			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax

; 27   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec2@G$01@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$01@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@G$01@glm@@QBEABGH@Z PROC			; glm::tvec2<unsigned short,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@G$01@glm@@QBEABGH@Z ENDP			; glm::tvec2<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$01@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@G$01@glm@@QAEAAGH@Z PROC			; glm::tvec2<unsigned short,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@G$01@glm@@QAEAAGH@Z ENDP			; glm::tvec2<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@G$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@G$01@glm@@SAHXZ PROC			; glm::tvec2<unsigned short,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@G$01@glm@@SAHXZ ENDP			; glm::tvec2<unsigned short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@E$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned char,2>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 273  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@E$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@E$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned char,2>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dx, WORD PTR [ecx]

; 265  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	mov	WORD PTR [eax], dx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@E$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@E$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@E$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned char,2>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	BYTE PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]

; 259  : 	}

	ret	0
??F?$tvec2@E$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@E$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@E$01@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned char,2>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	BYTE PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]

; 251  : 	}

	ret	0
??E?$tvec2@E$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$01@glm@@QAE@EE@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 1
_s2$ = 12						; size = 1
??0?$tvec2@E$01@glm@@QAE@EE@Z PROC			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	al, BYTE PTR _s1$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _s2$[ebp]
	mov	BYTE PTR [ecx+1], al

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@E$01@glm@@QAE@EE@Z ENDP			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$01@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec2@E$01@glm@@QAE@E@Z PROC			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@E$01@glm@@QAE@E@Z ENDP			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@E$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@E$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@E$01@glm@@QAE@XZ PROC			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	WORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec2@E$01@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$01@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@E$01@glm@@QBEABEH@Z PROC			; glm::tvec2<unsigned char,2>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@E$01@glm@@QBEABEH@Z ENDP			; glm::tvec2<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$01@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@E$01@glm@@QAEAAEH@Z PROC			; glm::tvec2<unsigned char,2>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@E$01@glm@@QAEAAEH@Z ENDP			; glm::tvec2<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@E$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@E$01@glm@@SAHXZ PROC			; glm::tvec2<unsigned char,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@E$01@glm@@SAHXZ ENDP			; glm::tvec2<unsigned char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@N$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<double,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);
; 194  : 		--*this;

	movsd	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	movsd	QWORD PTR [ecx], xmm0

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@N$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@N$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<double,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);
; 186  : 		++*this;

	movsd	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	movsd	QWORD PTR [ecx], xmm0

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@N$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@N$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<double,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	movsd	xmm0, QWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@N$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<double,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@N$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<double,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	movsd	xmm0, QWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@N$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<double,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$0A@@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@N$0A@@glm@@QAE@N@Z PROC			; glm::tvec1<double,0>::tvec1<double,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 39   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	pop	ebp
	ret	8
??0?$tvec1@N$0A@@glm@@QAE@N@Z ENDP			; glm::tvec1<double,0>::tvec1<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@N$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<double,0>::tvec1<double,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@N$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<double,0>::tvec1<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@N$0A@@glm@@QAE@XZ PROC			; glm::tvec1<double,0>::tvec1<double,0>, COMDAT
; _this$ = ecx

; 14   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	ret	0
??0?$tvec1@N$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<double,0>::tvec1<double,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$0A@@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@N$0A@@glm@@QBEABNH@Z PROC			; glm::tvec1<double,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@N$0A@@glm@@QBEABNH@Z ENDP			; glm::tvec1<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$0A@@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@N$0A@@glm@@QAEAANH@Z PROC			; glm::tvec1<double,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@N$0A@@glm@@QAEAANH@Z ENDP			; glm::tvec1<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@N$0A@@glm@@SAHXZ PROC			; glm::tvec1<double,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@N$0A@@glm@@SAHXZ ENDP			; glm::tvec1<double,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@M$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<float,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);
; 194  : 		--*this;

	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	movss	DWORD PTR [ecx], xmm0

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@M$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@M$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<float,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);
; 186  : 		++*this;

	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	movss	DWORD PTR [ecx], xmm0

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@M$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@M$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<float,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@M$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@M$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<float,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@M$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@M$0A@@glm@@QAE@M@Z PROC			; glm::tvec1<float,0>::tvec1<float,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	movss	xmm0, DWORD PTR _scalar$[ebp]

; 39   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	pop	ebp
	ret	4
??0?$tvec1@M$0A@@glm@@QAE@M@Z ENDP			; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<float,0>::tvec1<float,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@M$0A@@glm@@QAE@XZ PROC			; glm::tvec1<float,0>::tvec1<float,0>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	DWORD PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@M$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$0A@@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@M$0A@@glm@@QBEABMH@Z PROC			; glm::tvec1<float,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@M$0A@@glm@@QBEABMH@Z ENDP			; glm::tvec1<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$0A@@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@M$0A@@glm@@QAEAAMH@Z PROC			; glm::tvec1<float,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@M$0A@@glm@@QAEAAMH@Z ENDP			; glm::tvec1<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@M$0A@@glm@@SAHXZ PROC			; glm::tvec1<float,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@M$0A@@glm@@SAHXZ ENDP			; glm::tvec1<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@_J$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec1<__int64,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 194  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], -1
	mov	DWORD PTR [eax+4], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@_J$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec1<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@_J$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec1<__int64,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 186  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [eax+4], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@_J$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec1<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@_J$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<__int64,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 179  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1

; 180  : 	}

	ret	0
??F?$tvec1@_J$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<__int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@_J$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<__int64,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 172  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0

; 173  : 	}

	ret	0
??E?$tvec1@_J$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<__int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$0A@@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@_J$0A@@glm@@QAE@_J@Z PROC			; glm::tvec1<__int64,0>::tvec1<__int64,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec1@_J$0A@@glm@@QAE@_J@Z ENDP			; glm::tvec1<__int64,0>::tvec1<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@_J$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<__int64,0>::tvec1<__int64,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@_J$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<__int64,0>::tvec1<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@_J$0A@@glm@@QAE@XZ PROC			; glm::tvec1<__int64,0>::tvec1<__int64,0>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	DWORD PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec1@_J$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<__int64,0>::tvec1<__int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$0A@@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_J$0A@@glm@@QBEAB_JH@Z PROC			; glm::tvec1<__int64,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_J$0A@@glm@@QBEAB_JH@Z ENDP			; glm::tvec1<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$0A@@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_J$0A@@glm@@QAEAA_JH@Z PROC			; glm::tvec1<__int64,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_J$0A@@glm@@QAEAA_JH@Z ENDP			; glm::tvec1<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_J$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_J$0A@@glm@@SAHXZ PROC			; glm::tvec1<__int64,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@_J$0A@@glm@@SAHXZ ENDP			; glm::tvec1<__int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@H$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<int,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 194  : 		--*this;

	dec	edx
	mov	DWORD PTR [ecx], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@H$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@H$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<int,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 186  : 		++*this;

	inc	edx
	mov	DWORD PTR [ecx], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@H$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@H$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<int,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@H$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@H$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<int,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@H$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$0A@@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@H$0A@@glm@@QAE@H@Z PROC			; glm::tvec1<int,0>::tvec1<int,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@H$0A@@glm@@QAE@H@Z ENDP			; glm::tvec1<int,0>::tvec1<int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@H$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<int,0>::tvec1<int,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@H$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<int,0>::tvec1<int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@H$0A@@glm@@QAE@XZ PROC			; glm::tvec1<int,0>::tvec1<int,0>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	DWORD PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@H$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<int,0>::tvec1<int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$0A@@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@H$0A@@glm@@QBEABHH@Z PROC			; glm::tvec1<int,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@H$0A@@glm@@QBEABHH@Z ENDP			; glm::tvec1<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$0A@@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@H$0A@@glm@@QAEAAHH@Z PROC			; glm::tvec1<int,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@H$0A@@glm@@QAEAAHH@Z ENDP			; glm::tvec1<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@H$0A@@glm@@SAHXZ PROC			; glm::tvec1<int,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@H$0A@@glm@@SAHXZ ENDP			; glm::tvec1<int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@F$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<short,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 194  : 		--*this;

	dec	edx
	mov	WORD PTR [ecx], dx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@F$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@F$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<short,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 186  : 		++*this;

	inc	edx
	mov	WORD PTR [ecx], dx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@F$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@F$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<short,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	WORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@F$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@F$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<short,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	WORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@F$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$0A@@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec1@F$0A@@glm@@QAE@F@Z PROC			; glm::tvec1<short,0>::tvec1<short,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@F$0A@@glm@@QAE@F@Z ENDP			; glm::tvec1<short,0>::tvec1<short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@F$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<short,0>::tvec1<short,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@F$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<short,0>::tvec1<short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@F$0A@@glm@@QAE@XZ PROC			; glm::tvec1<short,0>::tvec1<short,0>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	xor	eax, eax
	mov	WORD PTR [ecx], ax

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@F$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<short,0>::tvec1<short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$0A@@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@F$0A@@glm@@QBEABFH@Z PROC			; glm::tvec1<short,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@F$0A@@glm@@QBEABFH@Z ENDP			; glm::tvec1<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$0A@@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@F$0A@@glm@@QAEAAFH@Z PROC			; glm::tvec1<short,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@F$0A@@glm@@QAEAAFH@Z ENDP			; glm::tvec1<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@F$0A@@glm@@SAHXZ PROC			; glm::tvec1<short,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@F$0A@@glm@@SAHXZ ENDP			; glm::tvec1<short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@C$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<signed char,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 194  : 		--*this;

	dec	dl
	mov	BYTE PTR [ecx], dl

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@C$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@C$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<signed char,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 186  : 		++*this;

	inc	dl
	mov	BYTE PTR [ecx], dl

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@C$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@C$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<signed char,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	BYTE PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@C$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@C$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<signed char,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	BYTE PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@C$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$0A@@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec1@C$0A@@glm@@QAE@C@Z PROC			; glm::tvec1<signed char,0>::tvec1<signed char,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@C$0A@@glm@@QAE@C@Z ENDP			; glm::tvec1<signed char,0>::tvec1<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@C$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<signed char,0>::tvec1<signed char,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@C$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<signed char,0>::tvec1<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@C$0A@@glm@@QAE@XZ PROC			; glm::tvec1<signed char,0>::tvec1<signed char,0>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	BYTE PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@C$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<signed char,0>::tvec1<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$0A@@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@C$0A@@glm@@QBEABCH@Z PROC			; glm::tvec1<signed char,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@C$0A@@glm@@QBEABCH@Z ENDP			; glm::tvec1<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$0A@@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@C$0A@@glm@@QAEAACH@Z PROC			; glm::tvec1<signed char,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@C$0A@@glm@@QAEAACH@Z ENDP			; glm::tvec1<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@C$0A@@glm@@SAHXZ PROC			; glm::tvec1<signed char,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@C$0A@@glm@@SAHXZ ENDP			; glm::tvec1<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@_K$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec1<unsigned __int64,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 194  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], -1
	mov	DWORD PTR [eax+4], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@_K$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec1<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@_K$0A@@glm@@QAE?AU01@H@Z PROC		; glm::tvec1<unsigned __int64,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 186  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [eax+4], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@_K$0A@@glm@@QAE?AU01@H@Z ENDP		; glm::tvec1<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@_K$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned __int64,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 179  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1

; 180  : 	}

	ret	0
??F?$tvec1@_K$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned __int64,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@_K$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned __int64,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 172  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0

; 173  : 	}

	ret	0
??E?$tvec1@_K$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned __int64,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$0A@@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@_K$0A@@glm@@QAE@_K@Z PROC			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec1@_K$0A@@glm@@QAE@_K@Z ENDP			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@_K$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@_K$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@_K$0A@@glm@@QAE@XZ PROC			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	DWORD PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec1@_K$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$0A@@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_K$0A@@glm@@QBEAB_KH@Z PROC			; glm::tvec1<unsigned __int64,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_K$0A@@glm@@QBEAB_KH@Z ENDP			; glm::tvec1<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$0A@@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_K$0A@@glm@@QAEAA_KH@Z PROC			; glm::tvec1<unsigned __int64,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_K$0A@@glm@@QAEAA_KH@Z ENDP			; glm::tvec1<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_K$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_K$0A@@glm@@SAHXZ PROC			; glm::tvec1<unsigned __int64,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@_K$0A@@glm@@SAHXZ ENDP			; glm::tvec1<unsigned __int64,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@I$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned int,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 194  : 		--*this;

	dec	edx
	mov	DWORD PTR [ecx], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@I$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@I$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned int,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 186  : 		++*this;

	inc	edx
	mov	DWORD PTR [ecx], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@I$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@I$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned int,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@I$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@I$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned int,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@I$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$0A@@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@I$0A@@glm@@QAE@I@Z PROC			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@I$0A@@glm@@QAE@I@Z ENDP			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@I$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@I$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@I$0A@@glm@@QAE@XZ PROC			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	DWORD PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@I$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$0A@@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@I$0A@@glm@@QBEABIH@Z PROC			; glm::tvec1<unsigned int,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@I$0A@@glm@@QBEABIH@Z ENDP			; glm::tvec1<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$0A@@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@I$0A@@glm@@QAEAAIH@Z PROC			; glm::tvec1<unsigned int,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@I$0A@@glm@@QAEAAIH@Z ENDP			; glm::tvec1<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@I$0A@@glm@@SAHXZ PROC			; glm::tvec1<unsigned int,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@I$0A@@glm@@SAHXZ ENDP			; glm::tvec1<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@G$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned short,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 194  : 		--*this;

	dec	edx
	mov	WORD PTR [ecx], dx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@G$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@G$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned short,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 186  : 		++*this;

	inc	edx
	mov	WORD PTR [ecx], dx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@G$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@G$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned short,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@G$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@G$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned short,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	WORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@G$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$0A@@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec1@G$0A@@glm@@QAE@G@Z PROC			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@G$0A@@glm@@QAE@G@Z ENDP			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@G$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@G$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@G$0A@@glm@@QAE@XZ PROC			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	xor	eax, eax
	mov	WORD PTR [ecx], ax

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@G$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$0A@@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@G$0A@@glm@@QBEABGH@Z PROC			; glm::tvec1<unsigned short,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@G$0A@@glm@@QBEABGH@Z ENDP			; glm::tvec1<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$0A@@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@G$0A@@glm@@QAEAAGH@Z PROC			; glm::tvec1<unsigned short,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@G$0A@@glm@@QAEAAGH@Z ENDP			; glm::tvec1<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@G$0A@@glm@@SAHXZ PROC			; glm::tvec1<unsigned short,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@G$0A@@glm@@SAHXZ ENDP			; glm::tvec1<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@E$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned char,0>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 194  : 		--*this;

	dec	dl
	mov	BYTE PTR [ecx], dl

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@E$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@E$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned char,0>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 186  : 		++*this;

	inc	dl
	mov	BYTE PTR [ecx], dl

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@E$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@E$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned char,0>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	BYTE PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@E$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@E$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned char,0>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	BYTE PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@E$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$0A@@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec1@E$0A@@glm@@QAE@E@Z PROC			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@E$0A@@glm@@QAE@E@Z ENDP			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@E$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@E$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@E$0A@@glm@@QAE@XZ PROC			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	BYTE PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@E$0A@@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$0A@@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@E$0A@@glm@@QBEABEH@Z PROC			; glm::tvec1<unsigned char,0>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@E$0A@@glm@@QBEABEH@Z ENDP			; glm::tvec1<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$0A@@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@E$0A@@glm@@QAEAAEH@Z PROC			; glm::tvec1<unsigned char,0>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@E$0A@@glm@@QAEAAEH@Z ENDP			; glm::tvec1<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@E$0A@@glm@@SAHXZ PROC			; glm::tvec1<unsigned char,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@E$0A@@glm@@SAHXZ ENDP			; glm::tvec1<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@N$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<double,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);
; 194  : 		--*this;

	movsd	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	movsd	QWORD PTR [ecx], xmm0

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@N$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@N$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<double,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);
; 186  : 		++*this;

	movsd	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	movsd	QWORD PTR [ecx], xmm0

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@N$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@N$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<double,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	movsd	xmm0, QWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<double,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@N$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<double,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	movsd	xmm0, QWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@N$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<double,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$00@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@N$00@glm@@QAE@N@Z PROC			; glm::tvec1<double,1>::tvec1<double,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 39   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	pop	ebp
	ret	8
??0?$tvec1@N$00@glm@@QAE@N@Z ENDP			; glm::tvec1<double,1>::tvec1<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@N$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<double,1>::tvec1<double,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@N$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<double,1>::tvec1<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@N$00@glm@@QAE@XZ PROC			; glm::tvec1<double,1>::tvec1<double,1>, COMDAT
; _this$ = ecx

; 14   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	ret	0
??0?$tvec1@N$00@glm@@QAE@XZ ENDP			; glm::tvec1<double,1>::tvec1<double,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$00@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@N$00@glm@@QBEABNH@Z PROC			; glm::tvec1<double,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@N$00@glm@@QBEABNH@Z ENDP			; glm::tvec1<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$00@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@N$00@glm@@QAEAANH@Z PROC			; glm::tvec1<double,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@N$00@glm@@QAEAANH@Z ENDP			; glm::tvec1<double,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@N$00@glm@@SAHXZ PROC			; glm::tvec1<double,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@N$00@glm@@SAHXZ ENDP			; glm::tvec1<double,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@M$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<float,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);
; 194  : 		--*this;

	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	movss	DWORD PTR [ecx], xmm0

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@M$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@M$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<float,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);
; 186  : 		++*this;

	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	movss	DWORD PTR [ecx], xmm0

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@M$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@M$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<float,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<float,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@M$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<float,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@M$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<float,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$00@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@M$00@glm@@QAE@M@Z PROC			; glm::tvec1<float,1>::tvec1<float,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	movss	xmm0, DWORD PTR _scalar$[ebp]

; 39   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	pop	ebp
	ret	4
??0?$tvec1@M$00@glm@@QAE@M@Z ENDP			; glm::tvec1<float,1>::tvec1<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@M$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<float,1>::tvec1<float,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@M$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<float,1>::tvec1<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@M$00@glm@@QAE@XZ PROC			; glm::tvec1<float,1>::tvec1<float,1>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	DWORD PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@M$00@glm@@QAE@XZ ENDP			; glm::tvec1<float,1>::tvec1<float,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$00@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@M$00@glm@@QBEABMH@Z PROC			; glm::tvec1<float,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@M$00@glm@@QBEABMH@Z ENDP			; glm::tvec1<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$00@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@M$00@glm@@QAEAAMH@Z PROC			; glm::tvec1<float,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@M$00@glm@@QAEAAMH@Z ENDP			; glm::tvec1<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@M$00@glm@@SAHXZ PROC			; glm::tvec1<float,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@M$00@glm@@SAHXZ ENDP			; glm::tvec1<float,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@_J$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<__int64,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 194  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], -1
	mov	DWORD PTR [eax+4], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@_J$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@_J$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<__int64,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 186  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [eax+4], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@_J$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@_J$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<__int64,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 179  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1

; 180  : 	}

	ret	0
??F?$tvec1@_J$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<__int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@_J$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<__int64,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 172  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0

; 173  : 	}

	ret	0
??E?$tvec1@_J$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<__int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$00@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@_J$00@glm@@QAE@_J@Z PROC			; glm::tvec1<__int64,1>::tvec1<__int64,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec1@_J$00@glm@@QAE@_J@Z ENDP			; glm::tvec1<__int64,1>::tvec1<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@_J$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<__int64,1>::tvec1<__int64,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@_J$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<__int64,1>::tvec1<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@_J$00@glm@@QAE@XZ PROC			; glm::tvec1<__int64,1>::tvec1<__int64,1>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	DWORD PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec1@_J$00@glm@@QAE@XZ ENDP			; glm::tvec1<__int64,1>::tvec1<__int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$00@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_J$00@glm@@QBEAB_JH@Z PROC			; glm::tvec1<__int64,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_J$00@glm@@QBEAB_JH@Z ENDP			; glm::tvec1<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$00@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_J$00@glm@@QAEAA_JH@Z PROC			; glm::tvec1<__int64,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_J$00@glm@@QAEAA_JH@Z ENDP			; glm::tvec1<__int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_J$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_J$00@glm@@SAHXZ PROC			; glm::tvec1<__int64,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@_J$00@glm@@SAHXZ ENDP			; glm::tvec1<__int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@H$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<int,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 194  : 		--*this;

	dec	edx
	mov	DWORD PTR [ecx], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@H$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@H$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<int,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 186  : 		++*this;

	inc	edx
	mov	DWORD PTR [ecx], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@H$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@H$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<int,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@H$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@H$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<int,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@H$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$00@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@H$00@glm@@QAE@H@Z PROC			; glm::tvec1<int,1>::tvec1<int,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@H$00@glm@@QAE@H@Z ENDP			; glm::tvec1<int,1>::tvec1<int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@H$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<int,1>::tvec1<int,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@H$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<int,1>::tvec1<int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@H$00@glm@@QAE@XZ PROC			; glm::tvec1<int,1>::tvec1<int,1>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	DWORD PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@H$00@glm@@QAE@XZ ENDP			; glm::tvec1<int,1>::tvec1<int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$00@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@H$00@glm@@QBEABHH@Z PROC			; glm::tvec1<int,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@H$00@glm@@QBEABHH@Z ENDP			; glm::tvec1<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$00@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@H$00@glm@@QAEAAHH@Z PROC			; glm::tvec1<int,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@H$00@glm@@QAEAAHH@Z ENDP			; glm::tvec1<int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@H$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@H$00@glm@@SAHXZ PROC			; glm::tvec1<int,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@H$00@glm@@SAHXZ ENDP			; glm::tvec1<int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@F$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<short,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 194  : 		--*this;

	dec	edx
	mov	WORD PTR [ecx], dx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@F$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@F$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<short,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 186  : 		++*this;

	inc	edx
	mov	WORD PTR [ecx], dx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@F$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@F$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<short,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	WORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@F$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@F$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<short,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	WORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@F$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$00@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec1@F$00@glm@@QAE@F@Z PROC			; glm::tvec1<short,1>::tvec1<short,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@F$00@glm@@QAE@F@Z ENDP			; glm::tvec1<short,1>::tvec1<short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@F$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<short,1>::tvec1<short,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@F$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<short,1>::tvec1<short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@F$00@glm@@QAE@XZ PROC			; glm::tvec1<short,1>::tvec1<short,1>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	xor	eax, eax
	mov	WORD PTR [ecx], ax

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@F$00@glm@@QAE@XZ ENDP			; glm::tvec1<short,1>::tvec1<short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$00@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@F$00@glm@@QBEABFH@Z PROC			; glm::tvec1<short,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@F$00@glm@@QBEABFH@Z ENDP			; glm::tvec1<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$00@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@F$00@glm@@QAEAAFH@Z PROC			; glm::tvec1<short,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@F$00@glm@@QAEAAFH@Z ENDP			; glm::tvec1<short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@F$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@F$00@glm@@SAHXZ PROC			; glm::tvec1<short,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@F$00@glm@@SAHXZ ENDP			; glm::tvec1<short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@C$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<signed char,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 194  : 		--*this;

	dec	dl
	mov	BYTE PTR [ecx], dl

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@C$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@C$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<signed char,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 186  : 		++*this;

	inc	dl
	mov	BYTE PTR [ecx], dl

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@C$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@C$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<signed char,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	BYTE PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@C$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<signed char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@C$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<signed char,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	BYTE PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@C$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<signed char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$00@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec1@C$00@glm@@QAE@C@Z PROC			; glm::tvec1<signed char,1>::tvec1<signed char,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@C$00@glm@@QAE@C@Z ENDP			; glm::tvec1<signed char,1>::tvec1<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@C$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<signed char,1>::tvec1<signed char,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@C$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<signed char,1>::tvec1<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@C$00@glm@@QAE@XZ PROC			; glm::tvec1<signed char,1>::tvec1<signed char,1>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	BYTE PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@C$00@glm@@QAE@XZ ENDP			; glm::tvec1<signed char,1>::tvec1<signed char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$00@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@C$00@glm@@QBEABCH@Z PROC			; glm::tvec1<signed char,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@C$00@glm@@QBEABCH@Z ENDP			; glm::tvec1<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$00@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@C$00@glm@@QAEAACH@Z PROC			; glm::tvec1<signed char,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@C$00@glm@@QAEAACH@Z ENDP			; glm::tvec1<signed char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@C$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@C$00@glm@@SAHXZ PROC			; glm::tvec1<signed char,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@C$00@glm@@SAHXZ ENDP			; glm::tvec1<signed char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@_K$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned __int64,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 194  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], -1
	mov	DWORD PTR [eax+4], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@_K$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@_K$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned __int64,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 186  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [eax+4], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@_K$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@_K$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned __int64,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 179  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1

; 180  : 	}

	ret	0
??F?$tvec1@_K$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned __int64,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@_K$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned __int64,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 172  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0

; 173  : 	}

	ret	0
??E?$tvec1@_K$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned __int64,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$00@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@_K$00@glm@@QAE@_K@Z PROC			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec1@_K$00@glm@@QAE@_K@Z ENDP			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@_K$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@_K$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@_K$00@glm@@QAE@XZ PROC			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	DWORD PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec1@_K$00@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned __int64,1>::tvec1<unsigned __int64,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$00@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_K$00@glm@@QBEAB_KH@Z PROC			; glm::tvec1<unsigned __int64,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_K$00@glm@@QBEAB_KH@Z ENDP			; glm::tvec1<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$00@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_K$00@glm@@QAEAA_KH@Z PROC			; glm::tvec1<unsigned __int64,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_K$00@glm@@QAEAA_KH@Z ENDP			; glm::tvec1<unsigned __int64,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_K$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_K$00@glm@@SAHXZ PROC			; glm::tvec1<unsigned __int64,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@_K$00@glm@@SAHXZ ENDP			; glm::tvec1<unsigned __int64,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@I$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned int,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 194  : 		--*this;

	dec	edx
	mov	DWORD PTR [ecx], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@I$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@I$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned int,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 186  : 		++*this;

	inc	edx
	mov	DWORD PTR [ecx], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@I$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@I$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned int,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@I$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned int,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@I$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned int,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@I$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned int,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$00@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@I$00@glm@@QAE@I@Z PROC			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@I$00@glm@@QAE@I@Z ENDP			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@I$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@I$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@I$00@glm@@QAE@XZ PROC			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	DWORD PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@I$00@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned int,1>::tvec1<unsigned int,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$00@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@I$00@glm@@QBEABIH@Z PROC			; glm::tvec1<unsigned int,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@I$00@glm@@QBEABIH@Z ENDP			; glm::tvec1<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$00@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@I$00@glm@@QAEAAIH@Z PROC			; glm::tvec1<unsigned int,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@I$00@glm@@QAEAAIH@Z ENDP			; glm::tvec1<unsigned int,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@I$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@I$00@glm@@SAHXZ PROC			; glm::tvec1<unsigned int,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@I$00@glm@@SAHXZ ENDP			; glm::tvec1<unsigned int,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@G$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned short,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 194  : 		--*this;

	dec	edx
	mov	WORD PTR [ecx], dx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@G$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@G$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned short,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 186  : 		++*this;

	inc	edx
	mov	WORD PTR [ecx], dx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@G$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@G$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned short,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@G$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned short,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@G$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned short,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	WORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@G$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned short,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$00@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec1@G$00@glm@@QAE@G@Z PROC			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@G$00@glm@@QAE@G@Z ENDP			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@G$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@G$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@G$00@glm@@QAE@XZ PROC			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	xor	eax, eax
	mov	WORD PTR [ecx], ax

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@G$00@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned short,1>::tvec1<unsigned short,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$00@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@G$00@glm@@QBEABGH@Z PROC			; glm::tvec1<unsigned short,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@G$00@glm@@QBEABGH@Z ENDP			; glm::tvec1<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$00@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@G$00@glm@@QAEAAGH@Z PROC			; glm::tvec1<unsigned short,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@G$00@glm@@QAEAAGH@Z ENDP			; glm::tvec1<unsigned short,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@G$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@G$00@glm@@SAHXZ PROC			; glm::tvec1<unsigned short,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@G$00@glm@@SAHXZ ENDP			; glm::tvec1<unsigned short,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@E$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned char,1>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 194  : 		--*this;

	dec	dl
	mov	BYTE PTR [ecx], dl

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@E$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$00@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@E$00@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned char,1>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 186  : 		++*this;

	inc	dl
	mov	BYTE PTR [ecx], dl

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@E$00@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@E$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned char,1>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	BYTE PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@E$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned char,1>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$00@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@E$00@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned char,1>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	BYTE PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@E$00@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned char,1>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$00@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec1@E$00@glm@@QAE@E@Z PROC			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@E$00@glm@@QAE@E@Z ENDP			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$00@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@E$00@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@E$00@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$00@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@E$00@glm@@QAE@XZ PROC			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	BYTE PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@E$00@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned char,1>::tvec1<unsigned char,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$00@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@E$00@glm@@QBEABEH@Z PROC			; glm::tvec1<unsigned char,1>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@E$00@glm@@QBEABEH@Z ENDP			; glm::tvec1<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$00@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@E$00@glm@@QAEAAEH@Z PROC			; glm::tvec1<unsigned char,1>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@E$00@glm@@QAEAAEH@Z ENDP			; glm::tvec1<unsigned char,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@E$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@E$00@glm@@SAHXZ PROC			; glm::tvec1<unsigned char,1>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@E$00@glm@@SAHXZ ENDP			; glm::tvec1<unsigned char,1>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@N$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<double,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);
; 194  : 		--*this;

	movsd	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	movsd	QWORD PTR [ecx], xmm0

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@N$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@N$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<double,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);
; 186  : 		++*this;

	movsd	xmm0, QWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	movsd	QWORD PTR [ecx], xmm0

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@N$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@N$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<double,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	movsd	xmm0, QWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<double,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@N$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@N$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<double,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	movsd	xmm0, QWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@N$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<double,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$01@glm@@QAE@N@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@N$01@glm@@QAE@N@Z PROC			; glm::tvec1<double,2>::tvec1<double,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	movsd	xmm0, QWORD PTR _scalar$[ebp]

; 39   : 	{}

	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	pop	ebp
	ret	8
??0?$tvec1@N$01@glm@@QAE@N@Z ENDP			; glm::tvec1<double,2>::tvec1<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@N$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<double,2>::tvec1<double,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@N$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<double,2>::tvec1<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@N$01@glm@@QAE@XZ PROC			; glm::tvec1<double,2>::tvec1<double,2>, COMDAT
; _this$ = ecx

; 14   : 		{}

	xorps	xmm0, xmm0
	mov	eax, ecx
	movsd	QWORD PTR [ecx], xmm0
	ret	0
??0?$tvec1@N$01@glm@@QAE@XZ ENDP			; glm::tvec1<double,2>::tvec1<double,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$01@glm@@QBEABNH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@N$01@glm@@QBEABNH@Z PROC			; glm::tvec1<double,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@N$01@glm@@QBEABNH@Z ENDP			; glm::tvec1<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$01@glm@@QAEAANH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@N$01@glm@@QAEAANH@Z PROC			; glm::tvec1<double,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@N$01@glm@@QAEAANH@Z ENDP			; glm::tvec1<double,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@N$01@glm@@SAHXZ PROC			; glm::tvec1<double,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@N$01@glm@@SAHXZ ENDP			; glm::tvec1<double,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@M$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<float,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);
; 194  : 		--*this;

	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	movss	DWORD PTR [ecx], xmm0

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@M$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@M$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<float,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);
; 186  : 		++*this;

	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	movss	DWORD PTR [ecx], xmm0

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@M$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@M$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<float,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0

; 180  : 	}

	ret	0
??F?$tvec1@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<float,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@M$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@M$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<float,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0

; 173  : 	}

	ret	0
??E?$tvec1@M$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<float,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$01@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@M$01@glm@@QAE@M@Z PROC			; glm::tvec1<float,2>::tvec1<float,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	movss	xmm0, DWORD PTR _scalar$[ebp]

; 39   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	pop	ebp
	ret	4
??0?$tvec1@M$01@glm@@QAE@M@Z ENDP			; glm::tvec1<float,2>::tvec1<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@M$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<float,2>::tvec1<float,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@M$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<float,2>::tvec1<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@M$01@glm@@QAE@XZ PROC			; glm::tvec1<float,2>::tvec1<float,2>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	DWORD PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@M$01@glm@@QAE@XZ ENDP			; glm::tvec1<float,2>::tvec1<float,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$01@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@M$01@glm@@QBEABMH@Z PROC			; glm::tvec1<float,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@M$01@glm@@QBEABMH@Z ENDP			; glm::tvec1<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$01@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@M$01@glm@@QAEAAMH@Z PROC			; glm::tvec1<float,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@M$01@glm@@QAEAAMH@Z ENDP			; glm::tvec1<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@M$01@glm@@SAHXZ PROC			; glm::tvec1<float,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@M$01@glm@@SAHXZ ENDP			; glm::tvec1<float,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@_J$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<__int64,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 194  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], -1
	mov	DWORD PTR [eax+4], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@_J$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@_J$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<__int64,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 186  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [eax+4], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@_J$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_J$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@_J$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<__int64,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 179  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1

; 180  : 	}

	ret	0
??F?$tvec1@_J$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<__int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_J$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@_J$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<__int64,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 172  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0

; 173  : 	}

	ret	0
??E?$tvec1@_J$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<__int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$01@glm@@QAE@_J@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@_J$01@glm@@QAE@_J@Z PROC			; glm::tvec1<__int64,2>::tvec1<__int64,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec1@_J$01@glm@@QAE@_J@Z ENDP			; glm::tvec1<__int64,2>::tvec1<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@_J$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<__int64,2>::tvec1<__int64,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@_J$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<__int64,2>::tvec1<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@_J$01@glm@@QAE@XZ PROC			; glm::tvec1<__int64,2>::tvec1<__int64,2>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	DWORD PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec1@_J$01@glm@@QAE@XZ ENDP			; glm::tvec1<__int64,2>::tvec1<__int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$01@glm@@QBEAB_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_J$01@glm@@QBEAB_JH@Z PROC			; glm::tvec1<__int64,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_J$01@glm@@QBEAB_JH@Z ENDP			; glm::tvec1<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_J$01@glm@@QAEAA_JH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_J$01@glm@@QAEAA_JH@Z PROC			; glm::tvec1<__int64,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_J$01@glm@@QAEAA_JH@Z ENDP			; glm::tvec1<__int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_J$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_J$01@glm@@SAHXZ PROC			; glm::tvec1<__int64,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@_J$01@glm@@SAHXZ ENDP			; glm::tvec1<__int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@H$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<int,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 194  : 		--*this;

	dec	edx
	mov	DWORD PTR [ecx], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@H$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@H$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<int,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 186  : 		++*this;

	inc	edx
	mov	DWORD PTR [ecx], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@H$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@H$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@H$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<int,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@H$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@H$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<int,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@H$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$01@glm@@QAE@H@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@H$01@glm@@QAE@H@Z PROC			; glm::tvec1<int,2>::tvec1<int,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@H$01@glm@@QAE@H@Z ENDP			; glm::tvec1<int,2>::tvec1<int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@H$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<int,2>::tvec1<int,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@H$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<int,2>::tvec1<int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@H$01@glm@@QAE@XZ PROC			; glm::tvec1<int,2>::tvec1<int,2>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	DWORD PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@H$01@glm@@QAE@XZ ENDP			; glm::tvec1<int,2>::tvec1<int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$01@glm@@QBEABHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@H$01@glm@@QBEABHH@Z PROC			; glm::tvec1<int,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@H$01@glm@@QBEABHH@Z ENDP			; glm::tvec1<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$01@glm@@QAEAAHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@H$01@glm@@QAEAAHH@Z PROC			; glm::tvec1<int,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@H$01@glm@@QAEAAHH@Z ENDP			; glm::tvec1<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@H$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@H$01@glm@@SAHXZ PROC			; glm::tvec1<int,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@H$01@glm@@SAHXZ ENDP			; glm::tvec1<int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@F$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<short,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 194  : 		--*this;

	dec	edx
	mov	WORD PTR [ecx], dx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@F$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@F$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<short,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 186  : 		++*this;

	inc	edx
	mov	WORD PTR [ecx], dx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@F$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@F$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@F$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<short,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	WORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@F$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@F$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@F$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<short,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	WORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@F$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$01@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec1@F$01@glm@@QAE@F@Z PROC			; glm::tvec1<short,2>::tvec1<short,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@F$01@glm@@QAE@F@Z ENDP			; glm::tvec1<short,2>::tvec1<short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@F$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<short,2>::tvec1<short,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@F$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<short,2>::tvec1<short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@F$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@F$01@glm@@QAE@XZ PROC			; glm::tvec1<short,2>::tvec1<short,2>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	xor	eax, eax
	mov	WORD PTR [ecx], ax

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@F$01@glm@@QAE@XZ ENDP			; glm::tvec1<short,2>::tvec1<short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$01@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@F$01@glm@@QBEABFH@Z PROC			; glm::tvec1<short,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@F$01@glm@@QBEABFH@Z ENDP			; glm::tvec1<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@F$01@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@F$01@glm@@QAEAAFH@Z PROC			; glm::tvec1<short,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@F$01@glm@@QAEAAFH@Z ENDP			; glm::tvec1<short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@F$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@F$01@glm@@SAHXZ PROC			; glm::tvec1<short,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@F$01@glm@@SAHXZ ENDP			; glm::tvec1<short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@C$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<signed char,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 194  : 		--*this;

	dec	dl
	mov	BYTE PTR [ecx], dl

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@C$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@C$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<signed char,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 186  : 		++*this;

	inc	dl
	mov	BYTE PTR [ecx], dl

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@C$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@C$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@C$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<signed char,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	BYTE PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@C$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<signed char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@C$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@C$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<signed char,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	BYTE PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@C$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<signed char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$01@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec1@C$01@glm@@QAE@C@Z PROC			; glm::tvec1<signed char,2>::tvec1<signed char,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@C$01@glm@@QAE@C@Z ENDP			; glm::tvec1<signed char,2>::tvec1<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@C$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<signed char,2>::tvec1<signed char,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@C$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<signed char,2>::tvec1<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@C$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@C$01@glm@@QAE@XZ PROC			; glm::tvec1<signed char,2>::tvec1<signed char,2>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	BYTE PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@C$01@glm@@QAE@XZ ENDP			; glm::tvec1<signed char,2>::tvec1<signed char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$01@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@C$01@glm@@QBEABCH@Z PROC			; glm::tvec1<signed char,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@C$01@glm@@QBEABCH@Z ENDP			; glm::tvec1<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@C$01@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@C$01@glm@@QAEAACH@Z PROC			; glm::tvec1<signed char,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@C$01@glm@@QAEAACH@Z ENDP			; glm::tvec1<signed char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@C$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@C$01@glm@@SAHXZ PROC			; glm::tvec1<signed char,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@C$01@glm@@SAHXZ ENDP			; glm::tvec1<signed char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@_K$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned __int64,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 194  : 		--*this;

	add	DWORD PTR [ecx], -1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], -1
	mov	DWORD PTR [eax+4], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@_K$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@_K$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned __int64,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 186  : 		++*this;

	add	DWORD PTR [ecx], 1
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	adc	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [eax+4], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@_K$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@_K$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@_K$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned __int64,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	add	DWORD PTR [ecx], -1

; 179  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], -1

; 180  : 	}

	ret	0
??F?$tvec1@_K$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned __int64,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@_K$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@_K$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned __int64,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	add	DWORD PTR [ecx], 1

; 172  : 		return *this;

	mov	eax, ecx
	adc	DWORD PTR [ecx+4], 0

; 173  : 	}

	ret	0
??E?$tvec1@_K$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned __int64,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$01@glm@@QAE@_K@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 8
??0?$tvec1@_K$01@glm@@QAE@_K@Z PROC			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _scalar$[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec1@_K$01@glm@@QAE@_K@Z ENDP			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@_K$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@_K$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@_K$01@glm@@QAE@XZ PROC			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	DWORD PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec1@_K$01@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned __int64,2>::tvec1<unsigned __int64,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$01@glm@@QBEAB_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_K$01@glm@@QBEAB_KH@Z PROC			; glm::tvec1<unsigned __int64,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_K$01@glm@@QBEAB_KH@Z ENDP			; glm::tvec1<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$01@glm@@QAEAA_KH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@_K$01@glm@@QAEAA_KH@Z PROC			; glm::tvec1<unsigned __int64,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*8]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@_K$01@glm@@QAEAA_KH@Z ENDP			; glm::tvec1<unsigned __int64,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_K$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_K$01@glm@@SAHXZ PROC			; glm::tvec1<unsigned __int64,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@_K$01@glm@@SAHXZ ENDP			; glm::tvec1<unsigned __int64,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@I$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned int,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 194  : 		--*this;

	dec	edx
	mov	DWORD PTR [ecx], edx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@I$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@I$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned int,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 186  : 		++*this;

	inc	edx
	mov	DWORD PTR [ecx], edx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@I$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@I$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@I$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned int,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	DWORD PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@I$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned int,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@I$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@I$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned int,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	DWORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@I$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned int,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$01@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec1@I$01@glm@@QAE@I@Z PROC			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@I$01@glm@@QAE@I@Z ENDP			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@I$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@I$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@I$01@glm@@QAE@XZ PROC			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	DWORD PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@I$01@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$01@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@I$01@glm@@QBEABIH@Z PROC			; glm::tvec1<unsigned int,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@I$01@glm@@QBEABIH@Z ENDP			; glm::tvec1<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$01@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@I$01@glm@@QAEAAIH@Z PROC			; glm::tvec1<unsigned int,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@I$01@glm@@QAEAAIH@Z ENDP			; glm::tvec1<unsigned int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@I$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@I$01@glm@@SAHXZ PROC			; glm::tvec1<unsigned int,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@I$01@glm@@SAHXZ ENDP			; glm::tvec1<unsigned int,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@G$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned short,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 194  : 		--*this;

	dec	edx
	mov	WORD PTR [ecx], dx

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@G$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@G$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned short,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 186  : 		++*this;

	inc	edx
	mov	WORD PTR [ecx], dx

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@G$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@G$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@G$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned short,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@G$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned short,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@G$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@G$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned short,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	WORD PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@G$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned short,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$01@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec1@G$01@glm@@QAE@G@Z PROC			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@G$01@glm@@QAE@G@Z ENDP			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@G$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@G$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@G$01@glm@@QAE@XZ PROC			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	xor	eax, eax
	mov	WORD PTR [ecx], ax

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@G$01@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned short,2>::tvec1<unsigned short,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$01@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@G$01@glm@@QBEABGH@Z PROC			; glm::tvec1<unsigned short,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@G$01@glm@@QBEABGH@Z ENDP			; glm::tvec1<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@G$01@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@G$01@glm@@QAEAAGH@Z PROC			; glm::tvec1<unsigned short,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@G$01@glm@@QAEAAGH@Z ENDP			; glm::tvec1<unsigned short,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@G$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@G$01@glm@@SAHXZ PROC			; glm::tvec1<unsigned short,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@G$01@glm@@SAHXZ ENDP			; glm::tvec1<unsigned short,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec1@E$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned char,2>::operator--, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp

; 193  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 194  : 		--*this;

	dec	dl
	mov	BYTE PTR [ecx], dl

; 195  : 		return Result;
; 196  : 	}

	pop	ebp
	ret	8
??F?$tvec1@E$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$01@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec1@E$01@glm@@QAE?AU01@H@Z PROC			; glm::tvec1<unsigned char,2>::operator++, COMDAT
; _this$ = ecx

; 184  : 	{

	push	ebp
	mov	ebp, esp

; 185  : 		tvec1<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 186  : 		++*this;

	inc	dl
	mov	BYTE PTR [ecx], dl

; 187  : 		return Result;
; 188  : 	}

	pop	ebp
	ret	8
??E?$tvec1@E$01@glm@@QAE?AU01@H@Z ENDP			; glm::tvec1<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??F?$tvec1@E$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec1@E$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned char,2>::operator--, COMDAT
; _this$ = ecx

; 178  : 		--this->x;

	dec	BYTE PTR [ecx]

; 179  : 		return *this;

	mov	eax, ecx

; 180  : 	}

	ret	0
??F?$tvec1@E$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned char,2>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@E$01@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec1@E$01@glm@@QAEAAU01@XZ PROC			; glm::tvec1<unsigned char,2>::operator++, COMDAT
; _this$ = ecx

; 171  : 		++this->x;

	inc	BYTE PTR [ecx]

; 172  : 		return *this;

	mov	eax, ecx

; 173  : 	}

	ret	0
??E?$tvec1@E$01@glm@@QAEAAU01@XZ ENDP			; glm::tvec1<unsigned char,2>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$01@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec1@E$01@glm@@QAE@E@Z PROC			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>, COMDAT
; _this$ = ecx

; 39   : 	{}

	push	ebp
	mov	ebp, esp

; 38   : 		: x(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al

; 39   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec1@E$01@glm@@QAE@E@Z ENDP			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$01@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec1@E$01@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>, COMDAT
; _this$ = ecx

; 34   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec1@E$01@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$01@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec1@E$01@glm@@QAE@XZ PROC			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>, COMDAT
; _this$ = ecx

; 12   : 				: x(0)

	mov	BYTE PTR [ecx], 0

; 14   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec1@E$01@glm@@QAE@XZ ENDP			; glm::tvec1<unsigned char,2>::tvec1<unsigned char,2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$01@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@E$01@glm@@QBEABEH@Z PROC			; glm::tvec1<unsigned char,2>::operator[], COMDAT
; _this$ = ecx

; 78   : 	{

	push	ebp
	mov	ebp, esp

; 79   : 		assert(i >= 0 && i < this->length());
; 80   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 81   : 	}

	pop	ebp
	ret	4
??A?$tvec1@E$01@glm@@QBEABEH@Z ENDP			; glm::tvec1<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@E$01@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec1@E$01@glm@@QAEAAEH@Z PROC			; glm::tvec1<unsigned char,2>::operator[], COMDAT
; _this$ = ecx

; 71   : 	{

	push	ebp
	mov	ebp, esp

; 72   : 		assert(i >= 0 && i < this->length());
; 73   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 74   : 	}

	pop	ebp
	ret	4
??A?$tvec1@E$01@glm@@QAEAAEH@Z ENDP			; glm::tvec1<unsigned char,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@E$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@E$01@glm@@SAHXZ PROC			; glm::tvec1<unsigned char,2>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

	mov	eax, 1
	ret	0
?length@?$tvec1@E$01@glm@@SAHXZ ENDP			; glm::tvec1<unsigned char,2>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@I$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned int,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	dec	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@I$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@I$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned int,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@I$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@I$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@I$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned int,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	DWORD PTR [ecx+4]

; 259  : 	}

	ret	0
??F?$tvec2@I$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned int,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@I$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@I$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned int,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	DWORD PTR [ecx+4]

; 251  : 	}

	ret	0
??E?$tvec2@I$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QAE@II@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@I$0A@@glm@@QAE@II@Z PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@I$0A@@glm@@QAE@II@Z ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QAE@I@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@I$0A@@glm@@QAE@I@Z PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	eax, DWORD PTR _scalar$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@I$0A@@glm@@QAE@I@Z ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@I$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@I$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@I$0A@@glm@@QAE@XZ PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	DWORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@I$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$0A@@glm@@QBEABIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@I$0A@@glm@@QBEABIH@Z PROC			; glm::tvec2<unsigned int,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@I$0A@@glm@@QBEABIH@Z ENDP			; glm::tvec2<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$0A@@glm@@QAEAAIH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@I$0A@@glm@@QAEAAIH@Z PROC			; glm::tvec2<unsigned int,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@I$0A@@glm@@QAEAAIH@Z ENDP			; glm::tvec2<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@I$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@I$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@C$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<signed char,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 484  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@C$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@C$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<signed char,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 476  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@C$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@C$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@C$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<signed char,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	BYTE PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]

; 470  : 	}

	ret	0
??F?$tvec4@C$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<signed char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@C$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@C$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<signed char,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	BYTE PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]

; 460  : 	}

	ret	0
??E?$tvec4@C$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<signed char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$0A@@glm@@QAE@CCCC@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
_d$ = 20						; size = 1
??0?$tvec4@C$0A@@glm@@QAE@CCCC@Z PROC			; glm::tvec4<signed char,0>::tvec4<signed char,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR _d$[ebp]
	mov	BYTE PTR [ecx+3], al

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@C$0A@@glm@@QAE@CCCC@Z ENDP			; glm::tvec4<signed char,0>::tvec4<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$0A@@glm@@QAE@C@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec4@C$0A@@glm@@QAE@C@Z PROC			; glm::tvec4<signed char,0>::tvec4<signed char,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	BYTE PTR [ecx+3], al

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@C$0A@@glm@@QAE@C@Z ENDP			; glm::tvec4<signed char,0>::tvec4<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@C$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<signed char,0>::tvec4<signed char,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@C$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<signed char,0>::tvec4<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@C$0A@@glm@@QAE@XZ PROC			; glm::tvec4<signed char,0>::tvec4<signed char,0>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec4@C$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<signed char,0>::tvec4<signed char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$0A@@glm@@QBEABCH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@C$0A@@glm@@QBEABCH@Z PROC			; glm::tvec4<signed char,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@C$0A@@glm@@QBEABCH@Z ENDP			; glm::tvec4<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$0A@@glm@@QAEAACH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@C$0A@@glm@@QAEAACH@Z PROC			; glm::tvec4<signed char,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@C$0A@@glm@@QAEAACH@Z ENDP			; glm::tvec4<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@C$0A@@glm@@SAHXZ PROC			; glm::tvec4<signed char,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@C$0A@@glm@@SAHXZ ENDP			; glm::tvec4<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@E$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned char,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 484  : 		--*this;

	dec	BYTE PTR [ecx]
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@E$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@E$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<unsigned char,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 476  : 		++*this;

	inc	BYTE PTR [ecx]
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]
	mov	DWORD PTR [eax], edx

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@E$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@E$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@E$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned char,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	dec	BYTE PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	dec	BYTE PTR [ecx+1]
	dec	BYTE PTR [ecx+2]
	dec	BYTE PTR [ecx+3]

; 470  : 	}

	ret	0
??F?$tvec4@E$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned char,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@E$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@E$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<unsigned char,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	inc	BYTE PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	inc	BYTE PTR [ecx+1]
	inc	BYTE PTR [ecx+2]
	inc	BYTE PTR [ecx+3]

; 460  : 	}

	ret	0
??E?$tvec4@E$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<unsigned char,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$0A@@glm@@QAE@EEEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
_d$ = 20						; size = 1
??0?$tvec4@E$0A@@glm@@QAE@EEEE@Z PROC			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	al, BYTE PTR _d$[ebp]
	mov	BYTE PTR [ecx+3], al

; 193  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@E$0A@@glm@@QAE@EEEE@Z ENDP			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$0A@@glm@@QAE@E@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 1
??0?$tvec4@E$0A@@glm@@QAE@E@Z PROC			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	al, BYTE PTR _scalar$[ebp]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], al
	mov	BYTE PTR [ecx+2], al
	mov	BYTE PTR [ecx+3], al

; 188  : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec4@E$0A@@glm@@QAE@E@Z ENDP			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@E$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@E$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@E$0A@@glm@@QAE@XZ PROC			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec4@E$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$0A@@glm@@QBEABEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@E$0A@@glm@@QBEABEH@Z PROC			; glm::tvec4<unsigned char,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@E$0A@@glm@@QBEABEH@Z ENDP			; glm::tvec4<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$0A@@glm@@QAEAAEH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@E$0A@@glm@@QAEAAEH@Z PROC			; glm::tvec4<unsigned char,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@E$0A@@glm@@QAEAAEH@Z ENDP			; glm::tvec4<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@E$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned char,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@E$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec4@M$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<float,0>::operator--, COMDAT
; _this$ = ecx

; 482  : 	{

	push	ebp
	mov	ebp, esp

; 483  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 484  : 		--*this;

	movups	xmm0, XMMWORD PTR [ecx]
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0

; 485  : 		return Result;
; 486  : 	}

	pop	ebp
	ret	8
??F?$tvec4@M$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec4@M$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec4<float,0>::operator++, COMDAT
; _this$ = ecx

; 474  : 	{

	push	ebp
	mov	ebp, esp

; 475  : 		tvec4<T, P> Result(*this);

	movups	xmm0, XMMWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	movups	XMMWORD PTR [eax], xmm0

; 476  : 		++*this;

	movups	xmm0, XMMWORD PTR [ecx]
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0

; 477  : 		return Result;
; 478  : 	}

	pop	ebp
	ret	8
??E?$tvec4@M$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??F?$tvec4@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec4@M$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<float,0>::operator--, COMDAT
; _this$ = ecx

; 465  : 		--this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 466  : 		--this->y;
; 467  : 		--this->z;
; 468  : 		--this->w;
; 469  : 		return *this;

	mov	eax, ecx
	subps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0

; 470  : 	}

	ret	0
??F?$tvec4@M$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??E?$tvec4@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec4@M$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec4<float,0>::operator++, COMDAT
; _this$ = ecx

; 455  : 		++this->x;

	movups	xmm0, XMMWORD PTR [ecx]

; 456  : 		++this->y;
; 457  : 		++this->z;
; 458  : 		++this->w;
; 459  : 		return *this;

	mov	eax, ecx
	addps	xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
	movups	XMMWORD PTR [ecx], xmm0

; 460  : 	}

	ret	0
??E?$tvec4@M$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec4<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QAE@MMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??0?$tvec4@M$0A@@glm@@QAE@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT
; _this$ = ecx

; 193  : 	{}

	push	ebp
	mov	ebp, esp

; 192  : 		: x(a), y(b), z(c), w(d)

	movss	xmm0, DWORD PTR _a$[ebp]

; 193  : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@M$0A@@glm@@QAE@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec4@M$0A@@glm@@QAE@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT
; _this$ = ecx

; 188  : 	{}

	push	ebp
	mov	ebp, esp

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	movss	xmm0, DWORD PTR _scalar$[ebp]

; 188  : 	{}

	mov	eax, ecx
	shufps	xmm0, xmm0, 0
	movups	XMMWORD PTR [ecx], xmm0
	pop	ebp
	ret	4
??0?$tvec4@M$0A@@glm@@QAE@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec4@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec4<float,0>::tvec4<float,0>, COMDAT
; _this$ = ecx

; 183  : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec4@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec4@M$0A@@glm@@QAE@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT
; _this$ = ecx

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	DWORD PTR [ecx], 0

; 163  : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	0
??0?$tvec4@M$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@M$0A@@glm@@QBEABMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp

; 337  : 		assert(i >= 0 && i < this->length());
; 338  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 339  : 	}

	pop	ebp
	ret	4
??A?$tvec4@M$0A@@glm@@QBEABMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec4@M$0A@@glm@@QAEAAMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT
; _this$ = ecx

; 329  : 	{

	push	ebp
	mov	ebp, esp

; 330  : 		assert(i >= 0 && i < this->length());
; 331  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 332  : 	}

	pop	ebp
	ret	4
??A?$tvec4@M$0A@@glm@@QAEAAMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

	mov	eax, 4
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@F$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<short,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 273  : 		--*this;

	dec	WORD PTR [ecx]
	dec	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@F$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@F$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<short,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@F$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@F$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@F$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<short,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	dec	WORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	dec	WORD PTR [ecx+2]

; 259  : 	}

	ret	0
??F?$tvec2@F$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@F$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@F$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<short,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	WORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]

; 251  : 	}

	ret	0
??E?$tvec2@F$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$0A@@glm@@QAE@FF@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 2
_s2$ = 12						; size = 2
??0?$tvec2@F$0A@@glm@@QAE@FF@Z PROC			; glm::tvec2<short,0>::tvec2<short,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	ax, WORD PTR _s1$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _s2$[ebp]
	mov	WORD PTR [ecx+2], ax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@F$0A@@glm@@QAE@FF@Z ENDP			; glm::tvec2<short,0>::tvec2<short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$0A@@glm@@QAE@F@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec2@F$0A@@glm@@QAE@F@Z PROC			; glm::tvec2<short,0>::tvec2<short,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@F$0A@@glm@@QAE@F@Z ENDP			; glm::tvec2<short,0>::tvec2<short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@F$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<short,0>::tvec2<short,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@F$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<short,0>::tvec2<short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@F$0A@@glm@@QAE@XZ PROC			; glm::tvec2<short,0>::tvec2<short,0>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax

; 27   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec2@F$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<short,0>::tvec2<short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$0A@@glm@@QBEABFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@F$0A@@glm@@QBEABFH@Z PROC			; glm::tvec2<short,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@F$0A@@glm@@QBEABFH@Z ENDP			; glm::tvec2<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$0A@@glm@@QAEAAFH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@F$0A@@glm@@QAEAAFH@Z PROC			; glm::tvec2<short,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@F$0A@@glm@@QAEAAFH@Z ENDP			; glm::tvec2<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@F$0A@@glm@@SAHXZ PROC			; glm::tvec2<short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@F$0A@@glm@@SAHXZ ENDP			; glm::tvec2<short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@G$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned short,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 273  : 		--*this;

	mov	edx, 65535				; 0000ffffH
	add	WORD PTR [ecx], dx
	add	WORD PTR [ecx+2], dx

; 274  : 		return Result;
; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@G$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@G$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<unsigned short,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 265  : 		++*this;

	inc	WORD PTR [ecx]
	inc	WORD PTR [ecx+2]
	mov	DWORD PTR [eax], edx

; 266  : 		return Result;
; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@G$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@G$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@G$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned short,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	mov	eax, 65535				; 0000ffffH
	add	WORD PTR [ecx], ax

; 257  : 		--this->y;

	add	WORD PTR [ecx+2], ax

; 258  : 		return *this;

	mov	eax, ecx

; 259  : 	}

	ret	0
??F?$tvec2@G$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned short,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@G$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@G$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<unsigned short,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	inc	WORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	inc	WORD PTR [ecx+2]

; 251  : 	}

	ret	0
??E?$tvec2@G$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<unsigned short,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$0A@@glm@@QAE@GG@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 2
_s2$ = 12						; size = 2
??0?$tvec2@G$0A@@glm@@QAE@GG@Z PROC			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	mov	ax, WORD PTR _s1$[ebp]
	mov	WORD PTR [ecx], ax
	mov	ax, WORD PTR _s2$[ebp]
	mov	WORD PTR [ecx+2], ax

; 57   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$tvec2@G$0A@@glm@@QAE@GG@Z ENDP			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$0A@@glm@@QAE@G@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 2
??0?$tvec2@G$0A@@glm@@QAE@G@Z PROC			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	mov	ax, WORD PTR _scalar$[ebp]
	mov	WORD PTR [ecx], ax
	mov	WORD PTR [ecx+2], ax

; 52   : 	{}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$tvec2@G$0A@@glm@@QAE@G@Z ENDP			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@G$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@G$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@G$0A@@glm@@QAE@XZ PROC			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	xor	eax, eax
	mov	DWORD PTR [ecx], eax

; 27   : 		{}

	mov	eax, ecx
	ret	0
??0?$tvec2@G$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$0A@@glm@@QBEABGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@G$0A@@glm@@QBEABGH@Z PROC			; glm::tvec2<unsigned short,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@G$0A@@glm@@QBEABGH@Z ENDP			; glm::tvec2<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$0A@@glm@@QAEAAGH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@G$0A@@glm@@QAEAAGH@Z PROC			; glm::tvec2<unsigned short,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@G$0A@@glm@@QAEAAGH@Z ENDP			; glm::tvec2<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@G$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@G$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??F?$tvec2@M$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<float,0>::operator--, COMDAT
; _this$ = ecx

; 271  : 	{

	push	ebp
	mov	ebp, esp

; 272  : 		tvec2<T, P> Result(*this);
; 273  : 		--*this;

	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [esi], eax

; 274  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0

; 275  : 	}

	pop	ebp
	ret	8
??F?$tvec2@M$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$0A@@glm@@QAE?AU01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$tvec2@M$0A@@glm@@QAE?AU01@H@Z PROC			; glm::tvec2<float,0>::operator++, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp

; 264  : 		tvec2<T, P> Result(*this);
; 265  : 		++*this;

	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [esi], eax

; 266  : 		return Result;

	mov	eax, esi
	mov	DWORD PTR [esi+4], edx
	pop	esi
	movss	DWORD PTR [ecx+4], xmm0

; 267  : 	}

	pop	ebp
	ret	8
??E?$tvec2@M$0A@@glm@@QAE?AU01@H@Z ENDP			; glm::tvec2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??F?$tvec2@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??F?$tvec2@M$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<float,0>::operator--, COMDAT
; _this$ = ecx

; 256  : 		--this->x;

	movss	xmm0, DWORD PTR [ecx]

; 257  : 		--this->y;
; 258  : 		return *this;

	mov	eax, ecx
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+4], xmm0

; 259  : 	}

	ret	0
??F?$tvec2@M$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<float,0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??E?$tvec2@M$0A@@glm@@QAEAAU01@XZ
_TEXT	SEGMENT
??E?$tvec2@M$0A@@glm@@QAEAAU01@XZ PROC			; glm::tvec2<float,0>::operator++, COMDAT
; _this$ = ecx

; 248  : 		++this->x;

	movss	xmm0, DWORD PTR [ecx]

; 249  : 		++this->y;
; 250  : 		return *this;

	mov	eax, ecx
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+4], xmm0

; 251  : 	}

	ret	0
??E?$tvec2@M$0A@@glm@@QAEAAU01@XZ ENDP			; glm::tvec2<float,0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QAE@MM@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0?$tvec2@M$0A@@glm@@QAE@MM@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT
; _this$ = ecx

; 57   : 	{}

	push	ebp
	mov	ebp, esp

; 56   : 		: x(s1), y(s2)

	movss	xmm0, DWORD PTR _s1$[ebp]

; 57   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	xmm0, DWORD PTR _s2$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	8
??0?$tvec2@M$0A@@glm@@QAE@MM@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QAE@M@Z
_TEXT	SEGMENT
_scalar$ = 8						; size = 4
??0?$tvec2@M$0A@@glm@@QAE@M@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT
; _this$ = ecx

; 52   : 	{}

	push	ebp
	mov	ebp, esp

; 51   : 		: x(scalar), y(scalar)

	movss	xmm0, DWORD PTR _scalar$[ebp]

; 52   : 	{}

	mov	eax, ecx
	movss	DWORD PTR [ecx], xmm0
	movss	DWORD PTR [ecx+4], xmm0
	pop	ebp
	ret	4
??0?$tvec2@M$0A@@glm@@QAE@M@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QAE@W4ctor@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tvec2@M$0A@@glm@@QAE@W4ctor@1@@Z PROC		; glm::tvec2<float,0>::tvec2<float,0>, COMDAT
; _this$ = ecx

; 47   : 	{}

	mov	eax, ecx
	ret	4
??0?$tvec2@M$0A@@glm@@QAE@W4ctor@1@@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
??0?$tvec2@M$0A@@glm@@QAE@XZ PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT
; _this$ = ecx

; 25   : 				: x(0), y(0)

	mov	DWORD PTR [ecx], 0

; 27   : 		{}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$tvec2@M$0A@@glm@@QAE@XZ ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QBEABMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@M$0A@@glm@@QBEABMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp

; 110  : 		assert(i >= 0 && i < this->length());
; 111  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 112  : 	}

	pop	ebp
	ret	4
??A?$tvec2@M$0A@@glm@@QBEABMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$tvec2@M$0A@@glm@@QAEAAMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT
; _this$ = ecx

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 		assert(i >= 0 && i < this->length());
; 104  : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 105  : 	}

	pop	ebp
	ret	4
??A?$tvec2@M$0A@@glm@@QAEAAMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\kuba\desktop\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$0A@@glm@@SAHXZ PROC			; glm::tvec2<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

	mov	eax, 2
	ret	0
?length@?$tvec2@M$0A@@glm@@SAHXZ ENDP			; glm::tvec2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
tv68 = 8						; size = 4
__Xx$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 316  : 	{

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR __Xx$[ebp]

; 317  : 	return (_CSTD sqrtf(_Xx));

	sqrtss	xmm0, xmm0
	movss	DWORD PTR tv68[ebp], xmm0
	fld	DWORD PTR tv68[ebp]

; 318  : 	}

	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
tv68 = 8						; size = 4
__Xx$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 306  : 	{

	push	ebp
	mov	ebp, esp

; 307  : 	return (_CSTD sinf(_Xx));

	movss	xmm0, DWORD PTR __Xx$[ebp]
	call	___libm_sse2_sinf
	movss	DWORD PTR tv68[ebp], xmm0
	fld	DWORD PTR tv68[ebp]

; 308  : 	}

	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
tv68 = 8						; size = 4
__Xx$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 102  : 	{

	push	ebp
	mov	ebp, esp

; 103  : 	return (_CSTD cosf(_Xx));

	movss	xmm0, DWORD PTR __Xx$[ebp]
	call	___libm_sse2_cosf
	movss	DWORD PTR tv68[ebp], xmm0
	fld	DWORD PTR tv68[ebp]

; 104  : 	}

	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv65 = 8						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 745  :     {

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR __X$[ebp]

; 746  :         return (float)sqrt(_X);

	sqrtss	xmm0, xmm0
	movss	DWORD PTR tv65[ebp], xmm0
	fld	DWORD PTR tv65[ebp]

; 747  :     }

	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv65 = 8						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 735  :     {

	push	ebp
	mov	ebp, esp

; 736  :         return (float)sin(_X);

	movss	xmm0, DWORD PTR __X$[ebp]
	call	___libm_sse2_sinf
	movss	DWORD PTR tv65[ebp], xmm0
	fld	DWORD PTR tv65[ebp]

; 737  :     }

	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv65 = 8						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 634  :     {

	push	ebp
	mov	ebp, esp

; 635  :         return (float)cos(_X);

	movss	xmm0, DWORD PTR __X$[ebp]
	call	___libm_sse2_cosf
	movss	DWORD PTR tv65[ebp], xmm0
	fld	DWORD PTR tv65[ebp]

; 636  :     }

	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___n$[ebp]
	test	esi, esi
	je	SHORT $LN6@vector
	push	ebx
	mov	ebx, DWORD PTR ___f$[ebp]
	push	edi
	mov	edi, DWORD PTR ___t$[ebp]
$LL2@vector:
	mov	ecx, edi
	call	ebx
	add	edi, DWORD PTR ___s$[ebp]
	sub	esi, 1
	jne	SHORT $LL2@vector
	pop	edi
	pop	ebx
$LN6@vector:
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
